<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SQL入门教程</title>
      <link href="/2024/09/03/SQL%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2024/09/03/SQL%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>SQL是什么?</strong><br>是结构化查询语言，Structure QueryLanguage，访问和处理数据库的标准计算机语言。</p><p><strong>SQL与数据库有啥关系？</strong><br>数据库种类很多，MySQL，SQLServer，Oracle等，他们的SQL操作语法会有一点点不同，但是都会有基本的SQL语法。</p><p><strong>常用的数据库操作命令能介绍点吗？</strong><br>首先先说明一下，在SQL语句命令中是不区分大小写的，因此你使用命令SELECT等同于select。<br>同时，我们以<code>;</code>作为SQL语句结尾标志，这样就可以一次性输入条个SQL语句然后一起执行，例如创建表时的命令。<br>不同的SQL语句间用<code>,</code>分割，我们一般将一条命令写在同一行，不同命令分在不同行。</p><p>下面是一些常见的针对数据库操作的命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#展示有哪些数据库</span><br><span class="line">$ <span class="keyword">SHOW</span> DATABASES;</span><br><span class="line">#创建数据库test</span><br><span class="line">$ <span class="keyword">CREATE</span> DATABASE test;</span><br><span class="line">#使用数据库test</span><br><span class="line">$ <span class="keyword">SHOW</span> DATABASES;</span><br><span class="line">#创建数据库test</span><br><span class="line">$ <span class="keyword">CREATE</span> DATABASE test;</span><br><span class="line">#使用数据库test</span><br><span class="line">$ USE test;</span><br><span class="line">#在数据库test中创建表student</span><br><span class="line">$ <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student(</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    age <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line">#展示有哪些表</span><br><span class="line">$ <span class="keyword">SHOW</span> TABLES;</span><br><span class="line">#查看表中所有信息</span><br><span class="line">$ <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure><p><strong>常用的SQL操作命令有哪些?</strong></p><ul><li>SELECT</li><li>UPDATE</li><li>DELETE</li><li>INSERT INTO</li><li>CREATE DATABASE</li><li>ALTER DATABASE</li><li>CREATE TABLE</li><li>ALTER TABLE</li><li>ALIER IADLE</li><li>DROP TABLE</li><li>CREATE INDEX</li><li>DROP INDEX</li></ul><p><strong>SELECT怎么用?</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#查看student表中name，age两列数据</span><br><span class="line">$ <span class="keyword">SELECT</span> name,age <span class="keyword">FROM</span> student;</span><br><span class="line">#查看student表中所有数据</span><br><span class="line">$ <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure><p><strong>去重怎么做?</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">DISTINCT</span>关键字去重</span><br><span class="line">$ <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> name <span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure><p><strong>我想查具体某行记录怎么做？</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#使用<span class="keyword">WHERE</span>关键字搭配<span class="keyword">SELECT</span></span><br><span class="line">$ <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student</span><br><span class="line">  <span class="keyword">WHERE</span> name<span class="operator">=</span>&quot;fjsi&quot;;</span><br><span class="line">#<span class="keyword">WHERE</span>使用的条件也可以多个连用，建立逻辑关系</span><br><span class="line">$ <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student</span><br><span class="line">  <span class="keyword">WHERE</span> name<span class="operator">=</span>&quot;fjsi&quot; <span class="keyword">AND</span> (email<span class="operator">=</span>&quot;fjsi@fjsi.com&quot; <span class="keyword">or</span> age<span class="operator">=</span><span class="number">18</span>);</span><br></pre></td></tr></table></figure><p><strong>查询出来的结果有点乱，我能不能对结果进行排序？</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#使用<span class="keyword">ORDER</span> <span class="keyword">BY</span>搭配排序的<span class="keyword">DESC</span></span><br><span class="line">$ <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student</span><br><span class="line">  <span class="keyword">WHERE</span> age<span class="operator">=</span><span class="number">18</span></span><br><span class="line">  <span class="keyword">ORDER</span> <span class="keyword">BY</span> name；<span class="comment">--ORDER BY黔认升序排序</span></span><br><span class="line">#降序排序</span><br><span class="line">$ <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student</span><br><span class="line">  <span class="keyword">WHERE</span> age<span class="operator">=</span><span class="number">18</span></span><br><span class="line">  <span class="keyword">ORDER</span> <span class="keyword">BY</span> name <span class="keyword">DESC</span>；<span class="comment">--使用DESC设置降序</span></span><br></pre></td></tr></table></figure><p><strong>我能往表里插入数据吗？</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#不设置插入位置直接插入数据，这种情况要满足插入数据数量和列数相同</span><br><span class="line">$ <span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span> (&quot;sifangjian&quot;, &quot;sifangjian@qq.com&quot;, <span class="number">18</span>):</span><br><span class="line">#插入到指定列，主键id不用插入数据会自动编号</span><br><span class="line">$ <span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (name,age) <span class="keyword">VALUES</span> (&quot;sifangjian&quot;, <span class="number">18</span>)</span><br></pre></td></tr></table></figure><p><strong>插入的数据我没写好，想修改怎么办？</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># UPDATE...SET配合<span class="keyword">WHERE</span></span><br><span class="line">$ <span class="keyword">UPDATE</span> student</span><br><span class="line">  <span class="keyword">SET</span> name<span class="operator">=</span>&quot;sifangjian&quot;, email<span class="operator">=</span>&quot;sifangjian@qq.com&quot;</span><br><span class="line">  <span class="keyword">WHERE</span> age<span class="operator">=</span><span class="number">18</span>;</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>当UPDATE语句没有包含WHERE语句时相当于没设置限定条件，默认对所有行进行修改。</p></div><p><strong>那我不想要插入的数据记录了怎么删掉？</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">DELETE</span> 配合 MHERE 删除指定行的记录</span><br><span class="line">  <span class="keyword">DELETE</span> <span class="keyword">FROM</span> student</span><br><span class="line">  <span class="keyword">WHERE</span> Column1<span class="operator">=</span>&quot;value1&quot;;</span><br></pre></td></tr></table></figure><p>当DELETE语句中的WHERE被雀略相当于不设限制，默认对表中所有行删除，等同于<code>DELETE *FROM student</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux操作系统</title>
      <link href="/2024/09/03/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
      <url>/2024/09/03/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p><h2 id="来历"><a href="#来历" class="headerlink" title="来历"></a>来历</h2><p>某一天大佬Linus Torvalds觉得Unix操作系统不太好用，于是基于Unix操作系统开发了Linux内核，也称为Unix-Like，所以你也可以将Linux操作系统称为类Unix系统。</p><p>顺便说一句，Git也是他开发的，妥妥的大佬，好吧。</p><p>Linux内核开发出来后，开发者将内核开源了，只要遵循GPL开源协议的个人或机构都可以基于Linux底层源代码来开发和发布，因此市面上大多数Linux操作系统都是开源免费的，或者提供免费版本。</p><p>目前Linux内核由全球成千上万程序师共同维护。</p><p>最后下个定义：基于Linux内核开发的操作系统都称为Linux操作系统。</p><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p>Linux操作系统是个多层次结构，由内到外就像是一层层的壳，最内层到最外层分别是：内核，系统库，Shell，应用程序。</p><ul><li>内核：直接与硬件打交道，例如设备驱动程序、进程管理、内存管理、文件系统、网络协议栈等。</li><li>系统库：支持应用程序开发的软件库，例如C标准库、数学库、动态链接库、线程库、第三方库等。</li><li>Shell：命令行解释器，是用户使用Linux系统的接口，直接接受用户输入的shell命令，传递给内核来执行。</li><li>应用程序：办公软件、服务软件等，例如浏览器、Git、Nginx、MySQL等。</li></ul><h2 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h2><p>市面上的有很多的Linux操作系统，虽然特点是五花八门，但基本上都是使用相似的Linux内核，在此基础上开发封装自己的系统软件，差别也就在系统软件上。</p><p>来几个典型代表我们认识认识：</p><ul><li>Red Hat系列<br>这个系列的操作系统如今已经非常成熟了，主要有三个发行版fedora，redhat，centos，区别可以这样理解：fedora小白鼠，redhat付费版(其中的商业软件部分付费)，centos免费版。<br>redhat和centos都是稳定版本，国内企业centos用的多。</li><li>Debian系列<br>与redhat同为Linux内核，但其软件生态体系和redhat完全不同，主要分支：Debian，Ubuntu，kali，国产linux，在人工智能，自动驾驶，大数据方面用的较多</li><li>Android系列<br>也是基于Linux内核开发的，像是小米的miui系统，oppo的coloros系统，华为的HarmonyOS操作系统</li></ul><p>因为都是基于Linux内核，所以多数操作命令都是通用的</p><h2 id="安装选择"><a href="#安装选择" class="headerlink" title="安装选择"></a>安装选择</h2><ol><li>虚拟机<br>Windows上较常用的：vmware、VirtualBox、Hyper-V(Windows子系统WSL)<br>Mac上较常用的：Multipass、vmware、VirtualBox、Parallels Desktop<br>Docker虚拟机上安装Linux系统</li><li>双系统<br>直接将本机装成Linux系统或采用Windows和Linux双系统</li><li>云服务器<br>阿里云、腾讯云等，收费</li></ol><h2 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a>远程连接</h2><p>大多数使用Linux操作系统的场景都是企业部署服务器，因此远程连接操作是必不可少的。远程连接的方式：</p><ol><li>ssh远程连接</li></ol><h2 id="vi-vim编辑器"><a href="#vi-vim编辑器" class="headerlink" title="vi&#x2F;vim编辑器"></a>vi&#x2F;vim编辑器</h2><p>vi:Unix下的一款文本编辑器<br>vim:vi的增强版，Linux默认会安装vim，下文中vi都指的是vim</p><p>命令行输入vi或vim后回车会直接进入vim界面，可以看到vim的版本号和一些提示信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">for</span> information</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">:<span class="built_in">help</span> iccf</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">exit</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">:q</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">on-line <span class="built_in">help</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">:<span class="built_in">help</span></span></span><br></pre></td></tr></table></figure><h3 id="vi命令模式"><a href="#vi命令模式" class="headerlink" title="vi命令模式"></a>vi命令模式</h3><p>vi常用命令模式有三种：Command mode(命令模式), Last line mode(尾行模式), Insert mode(插入模式)<br>使用vim命令后默认进入的是命令模式<br>在命令模式下使用<code>:</code>进入尾行模式</p><p>打开指定文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开example.txt文件,example.txt不存在则创建此文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vi example.txt</span></span><br></pre></td></tr></table></figure><p>进入后左下角显示的是当前打开的文件名和创建信息，新创建的文件会显示<code>[New]</code>，要对文件进行修改，可以在命令模式下按下<code>i</code>或<code>I</code>或<code>o</code>或<code>O</code>或<code>a</code>或<code>A</code>都可以进入插入模式，在下方信息栏会显示<code>--Insert--</code>，编辑完成后按<code>ESC</code>键即可退出插入模式，使用<code>:wq</code>保存并退出vi，使用<code>cat example.txt</code>命令可以查看example.txt文件内容<br>在命令模式下使用<code>^</code>让光标跳转到所在行的行首，<code>$</code>让光标跳转到所在行的行尾</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复制本行内容-CTRL+C</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yy</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">粘贴内容到下一行-CTRL+V</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">p</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">剪切本行内容，同时能达到删除本行内容的效果-CTRL+X</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">dd</span></span></span><br></pre></td></tr></table></figure><p>在命令前加上数字可以达到操作几行的目的，例如<code>2yy</code>就是复制2行，<code>3p</code>就是粘贴三次</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令模式下开启行号显示</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">:<span class="built_in">set</span> number</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令模式下关闭行号显示</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">:<span class="built_in">set</span> nonumber</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令模式下向后翻一页</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">CTRL+F</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令模式下向前翻一页</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">CTRL+B</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令模式下向后翻半页</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">CTRL+D</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令模式下向前翻半页</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">CTRL+U</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令模式下跳转到文件最后一行</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">G</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令模式下跳转到文件第一行</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gg</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令模式下跳转到文件指定行，`行号`+`G`，例如：</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">30G</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令模式下跳转到文件指定行，`:`+`行号`，例如：</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">:30</span></span><br></pre></td></tr></table></figure><p>查找，命令模式下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从光标处向下查找目标，例如查找hello</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">/hello</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从光标处向上查找目标，例如查找hello</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">?hello</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查到结果后按n切换同方向的下一个</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">n</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查到结果后按n切换反方向的下一个</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">N</span></span><br></pre></td></tr></table></figure><p>查找区分大小写，但是不是完全匹配，即查找3也会匹配到line3，但是查找A不会匹配到a.<br>查找命令后加上<code>\c</code>会忽略大小写，例如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">能匹配到hello</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">/Hello\c</span></span><br></pre></td></tr></table></figure><p>替换</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令模式下</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">两个数字表示替换的行号范围，s表示替换，hello和world表示要把匹配到的hello替换成world，g表示全局</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">:1,5s/hello/world/g</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将光标所在行的第一个hello替换成world</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">:s/hello/world</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将光标所在行的所有hello替换成world</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">:s/hello/world/g</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将1到5行每行的第一个hello替换成world</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">:1,5s/hello/world</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将1到5行所有hello替换成world</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">:1,5s/hello/world/g</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将文件中所有hello替换成world</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">:1,<span class="variable">$s</span>/hello/world/g</span></span><br></pre></td></tr></table></figure><p>撤销</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">撤销，相当于Windows中的CTRL+Z，命令模式下</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">u</span></span><br></pre></td></tr></table></figure><p>在vim中有一个重要的文件<code>.vimrc</code>文件，在其中保存一些vi的配置信息，例如快捷键、插件、颜色、忽略大小写等，在此文件中配置后，每次打开vi都会自动加载其中的配置就不用每次手动设置了，可以将自己习惯的设置写入到这个文件中</p><h2 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h2><p>Linux中绝大多数命令都可接受一个或多个参数来增强或改变命令的行为，掌握常用命令时也要关注他的参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">展示文件和目录</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">展示文件和目录详细信息，例如权限、所有者、大小、修改时间等</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -l</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">展示所有文件和目录详细信息，包括隐藏的文件和目录，一般隐藏文件都是`.`开头的，例如保存用户配置信息的`.bash_profile`</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -a</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以人类可读的方式显示文件大小</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -h</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">按时间排序</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -t</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">逆序</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -r</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令的参数都是可以组合起来使用的，例如:</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -l -h -t -r</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者这种组合方式</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -ltr</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建文件夹</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> newdir/</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑内容I am hello.txt并重定向到hello.txt文件中，文件不存在则创建</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&quot;I am hello.txt&quot;</span> &gt; hello.txt</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看hello.txt文件内容</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> hello.txt</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除hello.txt文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">rm</span> hello.txt</span></span><br></pre></td></tr></table></figure><p>使用<code>ls -l</code>命令查看文件或目录的详细信息时，最左边的一位表示文件类型：d表示目录，-表示普通文件，l表示链接文件</p><h3 id="链接文件"><a href="#链接文件" class="headerlink" title="链接文件"></a>链接文件</h3><p>链接文件是Linux上特有的一种文件形式，分为软链接和硬链接两种，软链接类似Windows上的快捷方式，使用下面命令创建：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建软链接文件link.txt指向test.txt，-s参数表示创建软链接</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ln</span> -s test.txt link.txt</span></span><br></pre></td></tr></table></figure><p>硬链接也是使用ln命令来创建，不加-s参数，例如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建硬链接文件link.txt指向test.txt</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ln</span> test.txt link.txt</span></span><br></pre></td></tr></table></figure><p>软链接与硬链接的区别：</p><ul><li>软链接相当于目标文件的快捷方式，硬链接相当于目标文件的另一个名字</li><li>软链接可以访问到目标文件内容，修改软链接内容会失去与目标文件的链接；修改硬链接内容等同于直接修改目标文件内容，目标文件和指向它的所有硬链接内容同步</li><li>删除目标文件会造成软链接指向并不存在的文件，显示为红色；删除目标文件对硬链接没有影响</li><li>软链接可以指向文件或目录，软链接只能指向文件<br>tips：硬链接文件与目标文件共用一个i节点(i节点是Linux系统中保存文件元信息的地方)，通过<code>ls -l</code>查看文件详细信息时，权限后面的那个数字就代表此文件的i节点关联的文件数量，即目标文件+硬链接数量。使用命令<code>ls -i</code>命令可以展示i节点编号</li></ul><h3 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h3><p>使用<code>ls -l</code>命令查看文件或目录的详细信息时，最左边的一位表示文件类型，之后的9位表示文件权限<br>3位1组，分别对应文件所有者(user)权限，同组用户(group)权限，其他用户(other)权限，每组中三个字符分别表示的是：可读(r)，可写(w)，可执行(x)，相应位置上如果没有相应权限就会显示为<code>-</code><br>可以使用<code>chmod</code>(change mode)命令来修改文件权限，配合<code>+</code>和<code>-</code>使用，例如：</p><ol><li>统一给所有用户添加或删除权限 <figure class="highlight shell"><figcaption><span>统一指定</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/*统一给所有用户添加或删除权限*/</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">test.txt添加可执行权限</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">chrom +x test.txt</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取消可执行权限</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">chrom -x test.txt</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">test.txt添加读写权限</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">chrom +rw test.txt</span></span><br></pre></td></tr></table></figure></li><li>给单独指定的用户添加或删除权限<figure class="highlight shell"><figcaption><span>单独指定</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/*单独给指定用户添加或删除权限*/</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">u所有者，group同组用户，o其他用户</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">chrom u+r test.txt</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">chrom g-w test.txt</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">chrom o+x test.txt</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">组合使用</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">chrom ug+x test.txt</span></span><br></pre></td></tr></table></figure></li><li>给所有用户使用编号指定权限<br>按照二进制给权限三位编号，例如777表示rwxrwxrwx(111,111,111)，664表示rw-rw-r–(110,110,100)<figure class="highlight shell"><figcaption><span>编号指定</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编码指定权限</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">chrom 777 test.txt</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">chrom 664 test.txt</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h3><ol><li>通过vi创建并编辑文件</li><li><code>touch</code>命令，这个命令本来是用来更新文件修改时间为当前时间的，同时当文件不存在时会自动创建空文件<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch test.txt</span><br></pre></td></tr></table></figure></li><li><code>echo</code>命令，这是个用来输出文本的命令<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令行回显hello world</span></span><br><span class="line">echo &quot;hello world&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将输出内容重定向到hello.txt文件中，当hello.txt文件不存在时创建此文件并写入内容</span></span><br><span class="line">echo &quot;hello world&quot; &gt; hello.txt</span><br></pre></td></tr></table></figure></li></ol><h3 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">回显当前所在目录</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">pwd</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换当前目录为/newdir/</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> /newdir</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> newdir</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换当前目录为根目录</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> /</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换当前目录为上级目录，可以通用多级返回</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> ../</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> ..</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> ../../..</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换当前目录为当前用户的home目录</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> ~</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换当前目录为上次所在的目录</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> -</span></span><br></pre></td></tr></table></figure><h3 id="文件和文件夹操作"><a href="#文件和文件夹操作" class="headerlink" title="文件和文件夹操作"></a>文件和文件夹操作</h3><p>复制</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复制file1.txt文件，新文件为file2.txt</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cp</span> file1.txt file2.txt</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">嵌套复制文件夹，不嵌套不能用</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cp</span> -r folder1 folder2</span></span><br></pre></td></tr></table></figure><p>文件移动</p><figure class="highlight shell"><figcaption><span>文件移动</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可用于移动也可用于重命名</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mv</span> file1.txt file2.txt</span></span><br></pre></td></tr></table></figure><p>文件删除</p><figure class="highlight shell"><figcaption><span>文件删除</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">rm</span> file1.txt</span></span><br></pre></td></tr></table></figure><p>文件夹创建</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建picture文件夹</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> picture</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建多级目录</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> -p folder1/folder2</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前目录文件大小，同时能展示文件目录结构</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">du</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">du</span> -h</span></span><br></pre></td></tr></table></figure><p>文件夹删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">文件夹为空时</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">rmdir</span> folder1</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">文件夹不为空时，递归删除folder1目录和其中文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">rm</span> -r folder1</span></span><br></pre></td></tr></table></figure><div class="note warning flat"><p>由于Linux系统中删除操作是不可逆的，没有Windows中回收站类似的机制，因此慎用<code>rm</code>和<code>rm -r</code>参数</p></div><h2 id="Linux文件系统"><a href="#Linux文件系统" class="headerlink" title="Linux文件系统"></a>Linux文件系统</h2><h3 id="根目录结构"><a href="#根目录结构" class="headerlink" title="根目录结构"></a>根目录结构</h3><blockquote><p>&#x2F;bin：存放系统的基本命令，以及一些二进制可执行文件<br>&#x2F;etc：存放系统和一些软件的配置文件<br>&#x2F;home：用户的home目录，一般进入命令行的默认目录<br>&#x2F;opt：可选的第三方软件包<br>&#x2F;tmp：临时文件<br>&#x2F;usr：用户程序<br>&#x2F;dev：设备文件<br>&#x2F;boot：启动加载器文件<br>&#x2F;root：root用户的home目录<br>&#x2F;lib：系统库文件<br>&#x2F;proc：进程信息<br>&#x2F;sys：系统文件<br>&#x2F;var：可变文件，如日志等</p></blockquote><p>显示当前目录结构可以借助<code>du</code>显示文件大小的命令附带的展示目录结构</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">du</span></span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">du</span> -h</span></span><br></pre></td></tr></table></figure><p>或者使用专业的目录结构展示工具以树状图形式显示目录结构</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tree</span></span><br></pre></td></tr></table></figure><p>这个tree命令并不是Linux系统自带的命令，需要使用包管理器来安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo apt install tree</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>IDEA常用快捷键</title>
      <link href="/2024/09/03/IDEA%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2024/09/03/IDEA%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="IDEA常用快捷键"><a href="#IDEA常用快捷键" class="headerlink" title="IDEA常用快捷键"></a>IDEA常用快捷键</h2><ul><li>SHIFT+SHIFT：打开查找工具，可以查找文件、方法、界面、设置等。</li><li>CTRL+TAB：在已打开的多个窗口间切换。</li><li>CTRL+滚轮：在调整代码字体大小。</li><li>SHIFT+滚轮：代码横向滚动。</li><li>CTRL+ALT+SPACE：显示内容提示功能。</li><li>psvm+TAB：创建main函数。</li><li>SHIFT+ENTER：创建下一行并且光标调到新建行的开头。</li><li>CTRL+Y：删除光标所在行。</li><li>CTRL+D：将本行复制到下一行。</li><li>CTRL+ALT+L：格式化代码，整理代码格式。</li><li>CTRL+&#x2F;：单行注释，再按取消注释。</li><li>CTRL+SHIFT+&#x2F;：将所选内容多行注释。</li><li>CTRL+SHIFT+UP&#x2F;DOWN：将光标所在行上下移动。</li><li>ALT+INSERT：自动生成代码，Constructor，getter，setter，Override等方法。</li><li>ALT+ENTER：快速提示解决方案，用于导入包，自动修正代码，智能提示。</li><li>CTRL+SHIFT+ENTER9自动补全函数括号、分号、行缩进、自动补全后续代码。</li><li>SHIFT+F6：统一修改方法中变量名。<br>鼠标中键拖动选中：方形框选，批量操作。</li><li>CTRL+ALT+T ：给框选部分包裹代码，if，while，for，try-catch等。</li><li>CTRL+J：提示代码模板。</li><li>CTRL+I：实现接口的方法。</li><li>CTRL+0：重写父类的方法。</li><li>CTRL+W：按一下选中所在单词，再按一下继续选中附近单词，一直按一直增加扩选范围直至选中整行。</li><li>CTRL+Q：查看光标所在方法名的方法文档说明。</li><li>CTRL+ALT+U：查看类的UML关系图。</li><li>CTRL+F：当前文件查找内容。</li><li>CTRL+R：当前文件替换内容。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具使用笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git教程</title>
      <link href="/2024/08/12/Git%E6%95%99%E7%A8%8B/"/>
      <url>/2024/08/12/Git%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在阅读本篇博文前，请确认自己有对版本管理的基本概念，下面的内容会默认读者已经了解过版本管理相关内容，或者在代码编写中曾经使用过GitHub、Git等工具。</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>版本管理是软件开发过程中不可缺少的一环，市面上常见的版本管理软件一般分为两种：</p><ul><li>集中式管理：代表产品 SVN<br>优点：简单，server-client一对多模式，使用时对client来说只需将修改内容推送和拉取。<br>缺点：存在单体故障问题，当server故障时，所有的client服务崩溃。</li><li>分布式管理：代表产品 Git<br>优点：使用者本地保存完整版本库，当远端仓库故障时不影响本地仓库，需要共享时同步进度即可。<br>缺点：当拉取和推送时需要同步进度，手动处理内容冲突情况。<br>实际的开发中Git用的更多一点，因此下面的内容只针对Git做相关介绍。</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Git是一款客户端软件，需要安装在使用者的电脑上，并配置好环境才能使用：</p><ol><li><a href="https://git-scm.com/">官网</a>下载并安装，安装过程很简单。</li><li>安装完成后配置环境变量，将git的路径添加到环境变量Path，添加环境变量不会的可以搜教程，很多的。</li><li>验证安装和环境是否配置成功：在文件夹或桌面空白处右键，选择菜单中的<code>Open git bash here</code>打开git命令行窗口，这个窗口也是我们之后使用git工具常用的窗口，下文说的命令行统一指的是这个git bash窗口。</li><li>在命令行中输入<code>git -v</code>命令查看git版本，当回显包含git版本信息时说明git已经安装完成。<div class="note info flat"><p>这里说的使用git bash命令行不是必须的，如果你习惯使用cmd或PowerShell你当然可以直接用他们的命令行来做git的相关操作，因为我们已经将git添加到环境变量中了。</p></div></li></ol><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>Git的使用方式很多样：</p><ul><li>命令行：包括cmd命令行，git bash命令行，IDE中的terminal终端命令行都可直接使用。</li><li>GUI：图形化界面的Git，需要的话可以在官网下载(<em>Download那里</em>)。</li><li>IDE插件：将git作为插件集成在IDE上使用，例如VSCode、IDEA的git插件。<br>可以根据自己的喜好选择，建议使用命令行方式，能熟悉git命令的同时，对于Shell命令也了解一些，在一些只支持命令行的服务器上也能使用。<br>可以安装posh-Git模块美化命令行，高亮显示当前目录和分支及分支状态，安装教程参考 <a href="https://github.com/dahlbyk/posh-git">地址1</a>或 <a href="https://gitcode.com/gh_mirrors/po/posh-git">地址2</a>，地址1是项目github地址，访问不了的可以访问地址2，是CSDN对github地址访问加速后的地址。</li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ol><li>配置用户名<br>打开命令行终端，运行如下命令<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name exampleName # exampleName是自定义的用户名</span><br></pre></td></tr></table></figure>如果名字中包含空格则名字必须加上双引号，加上双引号是为了区分空格的作用，下面的邮箱同理。<br>参数说明：</li></ol><ul><li>省略(<code>Local</code>): 本地配置，只对本地仓库有效</li><li><code>--global</code>：全局配置，所有仓库生效</li><li><code>--system</code>：系统配置，对所有用户生效(不太用)</li></ul><ol start="2"><li>配置邮箱<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email example@example.com # example@example.com是自定义邮箱</span><br></pre></td></tr></table></figure>下面两条命令也是比较常用的：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper store   # 保存用户名和密码</span><br><span class="line">git config --global --list # 查看配置信息</span><br></pre></td></tr></table></figure></li></ol><h2 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h2><p>git配置完成后就可以在本地新建自己的仓库并开始Git版本管理了。</p><ol><li>方式1：本地创建仓库<br>创建一个文件夹，命名为自己想要的仓库名，进入命令行进入文件夹目录，使用下面的命令初始化仓库：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init # 本地直接创建仓库</span><br></pre></td></tr></table></figure>或者不创建文件夹，在工作目录使用下面命令创建仓库，自动生成仓库文件夹<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init exampleRepoName</span><br></pre></td></tr></table></figure></li></ol><p><code>git init</code>与<code>git init exampleRepoName</code>的区别：前者是以当前目录初始化仓库，当前目录为仓库根目录，后者是在当前目录下创建仓库，名字为exampleRepoName，exampleRepoName文件夹才是仓库根目录，可以通过看<code>.git</code>目录在哪来快速判断仓库根目录所在。</p><p>上面两条命令都会初始化仓库，生成<code>.git</code>目录用来保存仓库的相关信息。<code>.git</code>目录默认是隐藏的，要查看可通过下面命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看所有文件信息，包含隐藏文件</span></span><br><span class="line">ls -a</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更详细查看命令</span></span><br><span class="line">ls -altr</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>当你不了解此目录中文件内容作用时，不要私自修改这个目录中内容，可能会导致仓库不可用。</p></div><ol start="2"><li>方式2：从远端仓库克隆<br>在git配置完成后，使用下面命令将远端仓库拉取到本地称为本地仓库。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone exampleURL # exampleURL为远端仓库的clone地址</span><br></pre></td></tr></table></figure>拉取完成后，进入仓库目录也可以找到<code>.git</code>目录，同样是隐藏的。<br>注意：要成功执行git clone前提是配置好用户名和密码或者SSH密钥。</li></ol><h2 id="仓库结构"><a href="#仓库结构" class="headerlink" title="仓库结构"></a>仓库结构</h2><p>仓库可以分为三个部分：工作区，暂存区，版本库。</p><ul><li>工作区：<code>.git</code>所在目录为工作区，工作目录，主要存放开发的代码。</li><li>暂存区：<code>.git/index</code> 文件为暂存区，临时保存修改文件的地方。</li><li>版本库：<code>.git/objects</code> 版本库，<code>.git/</code>目录保存配置信息，日志信息和文件版本信息等。</li></ul><p>数据流：</p><ul><li>工作区 — git add —&gt; 暂存区 — git commit —&gt; 版本库</li></ul><p>整个过程并不像表面看起来的“提交”过程，更像是“同步”的过程，<code>git add</code>是让暂存区同工作区同步，<code>commit</code>是让版本库和暂存区同步。</p><h2 id="文件状态"><a href="#文件状态" class="headerlink" title="文件状态"></a>文件状态</h2><p>在工作目录使用下面命令可以查看目录下文件的状态，此命令非常常用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git status # 查看状态</span><br><span class="line">git status -s # 查看状态的简略模式，第一个?表示暂存区状态，第二个?表示工作区状态，M表示文件被修改了</span><br></pre></td></tr></table></figure><p>文件的几个状态：</p><ul><li>untracked： 新创建未被Git仓库进行版本控制，红色字体显示。</li><li>unmodified：文件已被Git进行版本控制，且版本库中文件与工作区文件内容一致。</li><li>Modified：文件在工作区被修改了，但还未将修改内容提交到暂存区。</li><li>Staged：文件已被提交到暂存区，但还未将修改内容提交到版本库。</li><li>Deleted：文件已被从工作区删除，但还没有将删除操作提交。</li></ul><h2 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h2><p>将工作区的文件修改提交到暂存区可以使用下面的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add exampleFile</span><br></pre></td></tr></table></figure><p>提交完成后使用<code>git status</code>命令查看文件状态可以看到文件名变为绿色，此时此文件就已被Git纳入版本控制。<br>如果想撤销刚才的<code>git add</code>操作，可以使用这条命令（本质上是将修改的内容从暂存区删除）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached exampleFile</span><br></pre></td></tr></table></figure><p>同时git add还有更多快捷用法，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add .  # 添加当前目录所有文件 </span><br><span class="line">git add *.txt # 添加所有.txt后缀文件，可以搭配通配符`*`实现更多操作</span><br></pre></td></tr></table></figure><p>在仓库目录中使用下面命令可以查看工作区和暂存区文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls # 查看工作区文件</span><br><span class="line">git ls-files # 查看暂存区文件</span><br></pre></td></tr></table></figure><h2 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h2><p>文件的修改经过<code>git add</code>从工作区提交到暂存区，接下来应该将修改内容添加到版本库中，通过<code>git commit</code>命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;commit discription&quot;  # 注意：只能提交已经进入暂存区的文件</span><br></pre></td></tr></table></figure><p>如果不加 <code>-m</code> 参数则Git会自动进入一个交互式文本编辑界面，默认使用 vim，在vim界面中方向键移动光标，<code>i</code>键进入编辑模式，编辑完commit描述信息后，<code>esc</code>键回到命令模式，<code>:wq</code>保存退出，提交就完成了。<br>你也可以在文件修改后直接使用下面的命令，同时完成提交暂存和提交commit的工作:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git commit -a -m &quot;commit discription&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或</span></span><br><span class="line">git commit -am &quot;commit disctiption&quot;</span><br></pre></td></tr></table></figure><p>Git的版本控制是通过回退到指定commit版本来实现的，根据回退时不同的工作区暂存区保留策略分为三种模式：</p><ul><li><code>--soft</code>： 回退到指定版本，保留当前工作区和暂存区内容。</li><li><code>--hard</code>：回退到指定版本，不保留当前工作区和暂存区内容。</li><li><code>--mixed</code>：回退到指定版本，不保留当前暂存区内容，只保留当前工作区内容。<br>使用方式：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset --soft &lt;commit版本id&gt;` # 回退到指定的commit版本，保留当前工作区和暂存区内容。</span><br><span class="line">git reset --hard HEAD^   # HEAD^表示上一个commit版本 回退到上一个commit版本，不保留当前工作区和暂存区内容。 </span><br></pre></td></tr></table></figure><div class="note info flat"><p>Git中所有操作都是可以回溯的，如果不小心使用了<code>git reset --hard</code>模式清空了工作区和暂存区，可以通过<code>git reflog</code>查看操作的历史记录找到误操作之前的版本号，再通过<code>git reset</code>命令回退到指定版本即可。</p></div>commit版本id可以通过这俩命令来查看：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git log # 查看commit历史记录</span><br><span class="line">git log --oneline # 查看缩略commit历史记录，显示出的第一个参数是commit版本id，第二个参数是commit描述 </span><br></pre></td></tr></table></figure></li></ul><h2 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h2><p>在Git使用过程中由于我们是通过同步的方式来共享仓库，因此当一个仓库被多个人共享的时候就会出现文件冲突的场景，这时候就需要使用<code>git diff</code>命令来查看差异后处理冲突。<br><code>git diff</code>可以查看不同版本差异，查看工作区、暂存区、版本库间的差异，查看不同分支的差异，一般通过可视化工具来看更为直观，不过掌握<code>git diff</code>命令行方式能帮助我们在一些不支持可视化工具的场景来使用。<br><code>git diff</code>的也是平时较为常用的一个命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git diff # 无参数时是查看工作区和暂存区间的差异，红字表示删除的内容，绿色表示添加的内容</span><br><span class="line">git diff HEAD # 比较工作区和版本库的差异</span><br><span class="line">git diff --cached # 比较暂存区和版本库的差异</span><br><span class="line">git diff &lt;版本号&gt; &lt;版本号&gt; # 比较两个提交版本的差异</span><br><span class="line">git diff HEAD~ HEAD # 比较上一个提交的版本与最新提交的版本差异，HEAD~或HEAD^都可表示上一个版本，HEAD指向分支的最新提交节点</span><br><span class="line">git diff HEAD~ HEAD example.txt # 比较最新提交版本和上一个提交版本中example.txt的差异</span><br><span class="line">git diff &lt;分支名&gt; &lt;分支名&gt; # 比较两个分支的差异</span><br></pre></td></tr></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>本地仓库中的删除操作不是简单的删除文件，要根据文件所在空间来分情况：</p><ol><li>要删除的文件在工作区，且没有通过<code>git add</code>命令提交暂存区，即文件还没有被Git纳入版本管理，此时文件的删除最简单，linux上直接使用<code>rm example.txt</code>命令删除即可，windows上直接右键删除放回收站即可。</li><li>要删除的文件已经通过<code>git add</code>命令提交到过暂存区，此时文件已被Git纳入版本管理，要删除此文件就需要先在工作区删除（删除后使用<code>git status</code>可看到被删除的文件显示为红色），之后使用<code>git add example.txt</code>将删除操作提交到暂存区，暂存区就会自动清理暂存区中相应的这个文件（使用 <code>git ls-files</code> 可以查看暂存区的文件）。这个过程也可以使用下面命令来代替，直接完成了从工作区和暂存区中删除的操作：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm example.txt</span><br></pre></td></tr></table></figure></li><li>commit提交删除操作到版本库中。</li></ol><p>git rm的命令还有其他的用法，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached example.txt # 从暂存区中删除，但是保留在工作区中</span><br><span class="line">git rm -r * # 递归删除某个目录下的所有子目录和文件</span><br></pre></td></tr></table></figure><h2 id="忽略"><a href="#忽略" class="headerlink" title="忽略"></a>忽略</h2><p>我们的项目中不会完全都是代码文件，有时会有这样一些文件我们不想让其被Git追踪纳入版本管理：</p><ul><li>系统或软件自动生成的文件。</li><li>编译产生的中间文件和结果文件。</li><li>运行时生成的日志、缓存、临时文件。</li><li>涉及身份密码口令密钥等敏感信息文件。<br>Git针对我们的这个需求提供了一种忽略策略，即使用<code>.gitignore</code>文件。<br><code>.gitignore</code>文件是一个文本文件，位于仓库根目录。<br>Git不会对<code>.gitignore</code>中声明的文件或目录进行版本控制。<br>举个例子：我们有两个文件<code>example.txt</code>和<code>example.log</code>，我们想要Git忽略<code>example.log</code>不对其进行版本控制，那么我们就要在<code>example.log</code>提交版本库之前将<code>example.log</code>信息添加到<code>.gitignore</code>中，这样Git在进行版本控制时只会追踪<code>example.txt</code>而忽略<code>example.log</code>，之后对<code>example.log</code>的修改都不会被Git追踪。<br>这里需要注意的是<code>.gitignore</code>忽略生效的前提是，要忽略的文件还没有被添加到版本库中，如果已经添加到版本库中的文件，再添加到<code>.gitignore</code>是没有作用的，如果想放弃Git对此文件的追踪，就应该使用 <code>git rm --cached example.log</code>命令将此文件从版本库中删除，但保留在工作区中，此时将<code>example.log</code>信息添加到<code>.gitignore</code>中就会生效，之后此文件的修改就不会被跟踪了。</li></ul><p>git版本控制中不会跟踪空文件夹，只有当文件夹中包含文件时才会被跟踪纳入版本控制。</p><p>说了这么多修改<code>.gitignore</code>的操作，那么到底应该如何修改，在其中添加规则的语法是怎样？<br><code>.gitignore</code>文件匹配规则：</p><ul><li>从上至下逐行匹配，每一行表示一个忽略模式。</li><li><code>#</code> 开头的行表示注释行。</li><li>使用标准的Blob模式匹配(即简化版的正则表达式)。</li><li>两个<code>*</code>，即<code>**</code>表示匹配任意的中间目录。</li><li>感叹号<code>!</code>表示取反。<br>举个例子<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 忽略所有.a文件</span></span><br><span class="line"><span class="operator">*</span>.a</span><br><span class="line"><span class="comment"># 忽略所有的.a文件，但lib.a例外</span></span><br><span class="line"><span class="operator">!</span>lib.a</span><br><span class="line"><span class="comment"># 忽略当前目录下的TODO文件，不包含子目录下的TODO文件</span></span><br><span class="line"><span class="operator">/</span>TODO</span><br><span class="line"><span class="comment"># 忽略任何目录下名为build的文件夹</span></span><br><span class="line">build<span class="operator">/</span></span><br><span class="line"><span class="comment"># 忽略 doc目录下的txt文件 但不忽略 doc的子目录中的txt文件</span></span><br><span class="line">doc<span class="operator">/</span><span class="operator">*</span>.txt</span><br><span class="line"><span class="comment"># 忽略 doc/目录及其子目录下的所有.pdf文件</span></span><br><span class="line">doc<span class="operator">/</span><span class="operator">*</span><span class="operator">*</span><span class="operator">/</span><span class="operator">*</span>.pdf</span><br></pre></td></tr></table></figure>Github上提供了各种常用语言的<code>.gitignore</code>文件模板，在初建仓库的时候会让你选择是否添加，也可以在使用过程中自行修改。</li></ul><h2 id="SSH配置"><a href="#SSH配置" class="headerlink" title="SSH配置"></a>SSH配置</h2><p>Github代码托管平台不用说了吧，大名鼎鼎，“全球最大同性交友平台”（手动狗头）。<br>Github进入想要拉取到本地的仓库页面，点击绿色的Code按钮，他会提供多种拉取方式，可以直接下载压缩包，在本地解压打开就是仓库，也可以通过给出的https方式或ssh方式从命令行使用<code>git clone url</code>方式拉取远程仓库到本地。<br>https方式在每次推送代码到远程仓库时需要输入用户名和密码来登录，而ssh方式需要在本地生成ssh密钥，将ssh公钥添加到GithubSSH配置里。<br>更推荐SSH方式，安全快捷，区分这两个的区别是看url是以https开头的还是以git开头的。<br>在没有配置SSH时，直接在命令行<code>git clone url</code>拉取时会提示<code>Permission denied</code>没有访问权限，这就是提示你要先去配置SSH密钥。<br>如何配置SSH密钥?</p><ol><li>进入用户根目录，windows上就是<code>users/你的用户名/</code> linux就是<code>~</code>。 </li><li>进入<code>.ssh</code>目录，此目录一般会隐藏，如果没有此目录就新建一个，可以在命令用<code>mkdir .ssh</code>来建立。</li><li>使用<code>ssh-keygen -t rsa -b 4096 -C &quot;youremail&quot;</code>设置密钥规则，<code>-t rsa</code>表示指定加密方式为<code>rsa</code>，<code>-b 4096</code>表示指定大小为<code>4096</code>。<br>如果提示ssh-keygen不是内部命令什么的，这是因为没有将ssh-keygen所在目录添加到环境变量中，找到Git安装路径，找不到的可以在命令行用下面命令找到：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">where git</span><br></pre></td></tr></table></figure>进入Git安装目录，以我的Git安装目录为例，我的Git装在<code>D:\Git</code>，则将<code>D:\Git\usr\bin</code>路径添加到环境变量中，ssh-keygen文件就在此路径中，添加到环境变量中就能在命令行直接启动了。</li><li>这一步是生成密钥文件 如果是第一次生成SSH密钥文件，就直接三次回车，会在<code>.ssh</code>目录下生成id_rsa密钥文件，如果不是第一次生成密钥文件，即你的<code>.ssh</code>目录下已经有id_rsa密钥文件，那么直接回车的操作就会覆盖掉我们之前的密钥，此过程不可逆，我们需要输入新的密钥文件名称，回车后输入密码，再确认输入一次密码，输入密码时为了保密不会显示密码，所以当你看到敲密码时命令行没变化时不要乱按，就正常输入完成敲回车确认就行。</li><li>完成上一步后会生成两个密钥文件，没有扩展名的是你的私钥谁都不能给，<code>.pub</code>扩展名的是公钥文件，打开公钥文件全选复制公钥密钥。</li><li>进入github -&gt; settings -&gt; SSH and GPG keys -&gt; New SSH Key，将复制的内容内容粘贴到key下的选项框中，title的内容就是给这个ssh密钥起个名字方便区分记忆即可。</li><li>如果你是第一次创建SSH密钥，在密钥配置那一步直接回车没有指定文件名的话，生成的密钥文件是id_rsa，那到这一步就配置完成了，如果是刚指定了新的密钥文件名，生成了新的密钥文件，那么我们需要在<code>.ssh</code>目录下创建一个config文件，并将下面的内容加入其中：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">github</span></span><br><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/test</span><br></pre></td></tr></table></figure>解释一下内容：</li></ol><ul><li><code># github</code>是注释。</li><li><code>Host github.com</code>说的是目标网站地址。</li><li><code>HostName github.com</code> 说的是目标网站名称。</li><li><code>IdentityFile ~/.ssh/test</code> 指定使用的密钥文件，参数<code>~/.ssh/test</code>修改为自己的密钥文件路径。</li></ul><ol start="8"><li>这时候配置已经完成，此时去命令行<code>git clone url</code>就可以了，SSH配置好初次使用clone和push时可能会让你输入一次SSH密码，就是生成SSH密钥时输入的密码，直接三次回车的就直接回车。</li></ol><h2 id="关联远端仓库"><a href="#关联远端仓库" class="headerlink" title="关联远端仓库"></a>关联远端仓库</h2><p>远端仓库与本地仓库关联<br>先明确远程仓库与本地仓库的关系，这是两个不同的仓库，本地仓库与远程仓库是分离的，各自内容的修改是不会相互影响的，如何建立这两者的联系，就需要借助pull和push这个两个命令，将更新内容拉取和推送。<br>如何将远端仓库和本地已有仓库关联？</p><ol><li>进入远端仓库界面点击Code查看远端仓库地址，就可上面<code>git clone</code>那个操作一样。</li><li>进入本地仓库根目录，使用命令：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin url</span><br></pre></td></tr></table></figure></li></ol><ul><li><code>origin</code>是你给远程仓库起的名字。</li><li><code>url</code>是远程仓库的地址， 注意不要将remote敲成remove。</li></ul><ol start="3"><li>在本地仓库根目录使用命令查看当前本地仓库关联的远程仓库配置信息:<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v </span><br></pre></td></tr></table></figure>前一个信息就是远程仓库的别名，后面信息就是远程仓库的地址。<br>如果你是直接通过<code>git clone url</code>的方式将远程仓库克隆到本地作为你的本地仓库，那就不用做关联这一步操作，直接在克隆下来的仓库中进行你的工作即可。<br>下面介绍几个关联远端仓库后可以进行的操作：</li></ol><ul><li>指定分支名称为main，我们如果没修改过的话默认名称就是main，这条指令不用执行：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -M main</span><br></pre></td></tr></table></figure></li><li>向远端仓库分支推送更新<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure></li><li><code>-u</code> ：-upstream。</li><li><code>origin</code>：我们给远程仓库的别名。</li><li><code>main</code>：全称是<code>main:main</code>表示将本地main分支推送到origin的main分支，如果两个分支名称不相同则要用完整格式：<code>git push -u origin branch_local:branch_remote</code></li><li>从远端仓库拉取<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull &lt;远端仓库名&gt; &lt;分支名&gt; # 省略参数则采用默认参数`git pull origin main`</span><br></pre></td></tr></table></figure><code>git pull</code> 命令会在拉取修改后尝试进行合并，如果远端仓库与本地仓库内容产生冲突会导致合并失败，就需要手动处理冲突，用<code>git fetch</code>来拉取远端修改但不会尝试合并，后面分支部分有详细介绍冲突产生时如何处理。</li></ul><p>建议在仓库中添加一个README.md文件，用来说明仓库项目的介绍，在访问仓库时会展示在仓库首页，其中使用Markdown轻量级标记语言，建议都学一下。</p><h2 id="其他可选代码托管平台"><a href="#其他可选代码托管平台" class="headerlink" title="其他可选代码托管平台"></a>其他可选代码托管平台</h2><p>Github虽然在代码托管平台是大名鼎鼎，但是在国内其访问难度大，访问速度慢也是名气不小。因此也就有了替代品：<br><code>gitee.com</code> 码云，国内平台，如果你的业务都是国内的话，用这个速度很快。<br><code>gitlab.com</code> 特点是私有化部署，搭建自己的gitlab服务器，在服务器上进行代码管理，对代码安全性要求较高的场景使用。</p><h2 id="Git图形化工具"><a href="#Git图形化工具" class="headerlink" title="Git图形化工具"></a>Git图形化工具</h2><p>在Git官网上Downloads部分点击CUI client选项能看到提供的几款Git的图形化工具，下面简单介绍一下：</p><ul><li>GitHub Desktop: 界面简洁，功能较为单一，只能用于Github上托管的代码管理。</li><li>SourceTree：支持多种代码托管平台。</li></ul><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><h3 id="分支创建和切换"><a href="#分支创建和切换" class="headerlink" title="分支创建和切换"></a>分支创建和切换</h3><p>Branch分支，多用于团队协作开发，减少错误冲突影响。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git branch # 查看分支列表</span><br><span class="line">git branch exampleName # 创建名为exampleName的分支</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建分支后是不会自动切换的，需要使用checkout命令来切换</span></span><br><span class="line">git checkout exampleName # 切换到exampleName分支上</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">git checkout name 命令也可用于恢复name文件，因此为了避免歧义，git在2.23版本后提供了一个专门用于切换分支的命令</span></span><br><span class="line">git switch exampleName</span><br></pre></td></tr></table></figure><p>切换分支操作时也会同时切换工作区，举个例子：在develop分支上做了修改，还没有合并到main分支，此时将当前分支从develop切换到mian分支，则工作区中不显示在develop分支上做的修改内容。</p><h3 id="分支合并"><a href="#分支合并" class="headerlink" title="分支合并"></a>分支合并</h3><p>开发过程中我们在自己的分支上开发完成后，需要合并到主分支上才行，合并分支要经过一下步骤：</p><ol><li>切换到主分支，一般为main分支，具体看自己的团队的主分支名称是什么。</li><li>在主分支上使用合并命令发起合并请求，例如：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge develop # 注意此时工作分支应该切换为目标分支，merge后的参数为要被合并的分支名，这条命令的效果是发起将develop分支合并到当前分支的请求</span><br></pre></td></tr></table></figure></li><li>使用图形化界面可以清晰地看到合并过程，当然在命令行也可以通过下面的命令查看简易的分支图：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --graph --oneline --decorate --all</span><br></pre></td></tr></table></figure></li><li>合并完成后，被合并的分支是仍然存在的，要删除被合并过的分支可以使用下面的命令：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git branch -d develop # -d参数含义是删除已经被合并过的分支</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果想要强制删除还没有合并的分支，可以使用-D参数</span></span><br><span class="line">git branch -D develop</span><br></pre></td></tr></table></figure></li></ol><p>有时候合并并不是这么顺利，特别是在团队开发的过程中，合并步骤时常会发生冲突，发生冲突是因为多个人同时修改了同一个文件的同一部分内容，导致Git在自动合并时不知道保留哪一部分，这是就需要手动处理冲突问题：</p><ol><li>在发生冲突后，使用<code>git status</code>可以看到发生冲突的文件。</li><li>使用<code>git diff</code>命令可以看到发生冲突文件中冲突的具体内容，比对差异。</li><li>在发生冲突后自动进入处理冲突过程，这时在当前分支编辑发生冲突的文件内容，手动合并，之后添加暂存区，提交commit，Git就会自动保留现在手动合并后的版本，完成合并过程。</li><li>如果在发生冲突后，不想处理这次冲突，而是想直接放弃此次合并，也可以使用下面的命令：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge --abort # 放弃此次合并</span><br></pre></td></tr></table></figure></li></ol><h2 id="GitFlow模型"><a href="#GitFlow模型" class="headerlink" title="GitFlow模型"></a>GitFlow模型</h2><h3 id="分支类型"><a href="#分支类型" class="headerlink" title="分支类型"></a>分支类型</h3><ol><li>主线分支<br>main或master，项目的核心分支，包含了项目最新稳定版本的代码，应随时保证main分支的代码是可发布的，主线分支的代码一般会被部署到生产环境中，主线分支代码不允许直接修改，只能通过合并分支来更新。</li><li>问题修复分支<br>hotfix，一般是从主分支上分出来的，在修复完成后，合并到主分支和开发分支上，完成合并后一般会删除此分支。</li><li>开发分支<br>develop，从主线分支分出来的，是长期存在的分支。</li><li>功能分支<br>feature，从开发分支中分出来的，针对特定的功能开发，最终合并在开发分支。</li><li>预发布分支<br>release，一般是从开发分支分出来的，预发布完成后一般会合并到主分支和开发分支中，合并完成后会删除此分支。</li></ol><p>主分支和开发分支是核心分支，长期存在，其他分支是辅助分支，完成任务后一般会删除分支。</p><h3 id="版本号"><a href="#版本号" class="headerlink" title="版本号"></a>版本号</h3><p>建议每次合并分支生成一个版本号，方便追踪和回溯，版本号的生成可以通过打标签的方式记录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag # 打标签</span><br></pre></td></tr></table></figure><p>版本号的规则：<br>主版本(major version)：主要的功能变化或重大更新<br>次版本：新的功能、改进和更新，通常不会影响现有功能<br>修订版本：一些小的bug修复，安全漏洞补丁等，通常不会更改现有功能和接口</p><h2 id="GitHubFlow模型"><a href="#GitHubFlow模型" class="headerlink" title="GitHubFlow模型"></a>GitHubFlow模型</h2><p>一个主分支，长期存在，主分支上的代码可以直接部署在生产环境，开发成员从主分支上分出Feature分支，进行开发，提交commit，完成后发起合并请求(Pull Request)，如果没有冲突问题就会进行分支合并。<br>发起合并请求在Gitlab中称为MergeRequest。  </p><h2 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h2><ol><li>命名规范<br>分支命名，一般应使用带有意义描述性名称来命名分支，例如：</li></ol><ul><li>版本发布分支&#x2F;Tag分支示例：v1.0.0</li><li>功能分支示例：feature-login-page</li><li>修复分支示例：hotfix-#issueid-desc</li></ul><ol start="2"><li>分支管理</li></ol><ul><li>定期合并已经成功验证的分支，及时删除已经合并的分支</li><li>保持合适的分支数量</li><li>为分支设置合适的管理权限</li></ul>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表结构与算法</title>
      <link href="/2024/07/17/%E9%93%BE%E8%A1%A8%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
      <url>/2024/07/17/%E9%93%BE%E8%A1%A8%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><ul><li>哈希表可以认为是一种集合结构，键值对中的key作为集合的元素保证唯一性，键值对中的value理解为集合元素key的附加值，HashSet与HashMap的区别仅在于是否有value，底层实现都一样</li><li>在Java中有key无value可使用HashSet结构存储</li><li>在Java中有key有value可使用HashMap结构存储</li></ul><p>HashSet和HashMap的使用举例：</p><figure class="highlight java"><figcaption><span>HashSet和HashMap</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashTable</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">HashSet&lt;Integer&gt; hashset = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;Integer&gt;();</span><br><span class="line">hashset.add(<span class="number">1</span>);</span><br><span class="line">hashset.add(<span class="number">2</span>);</span><br><span class="line">hashset.add(<span class="number">3</span>);</span><br><span class="line">hashset.remove(<span class="number">2</span>);</span><br><span class="line">System.out.println(hashset.size());</span><br><span class="line">System.out.println(hashset.contains(<span class="number">2</span>));</span><br><span class="line">System.out.println(hashset.contains(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">HashMap&lt;Integer, String&gt; hashmap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, String&gt;();</span><br><span class="line">hashmap.put(<span class="number">1</span>, <span class="string">&quot;this is 1&quot;</span>);</span><br><span class="line">hashmap.put(<span class="number">2</span>, <span class="string">&quot;this is 2&quot;</span>);</span><br><span class="line">hashmap.put(<span class="number">3</span>, <span class="string">&quot;this is 3&quot;</span>);</span><br><span class="line">hashmap.remove(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">for</span> (Integer key : hashmap.keySet()) &#123; <span class="comment">// 遍历key常用的一种方式</span></span><br><span class="line">System.out.println(hashmap.get(key));</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(hashmap.containsKey(<span class="number">3</span>));</span><br><span class="line">System.out.println(hashmap.containsValue(<span class="string">&quot;this is 1&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在哈希表中使用增(<code>put</code>)、删(<code>remove</code>)、改(<code>put</code>)、查(<code>get</code>)的时间复杂度都是O(1)，但是在常数时间中比较大</li><li>放入哈希表的东西不论是<code>key</code>还是<code>value</code>，是基础数据类型则内部用的是值传递，内存占用的就是这个值的大小；非基础数据类型则是引用传递，内存占用的是这个值的内存地址的大小，内存地址的大小一般是一样大的，都是位数相同的地址。</li></ul><h2 id="有序表"><a href="#有序表" class="headerlink" title="有序表"></a>有序表</h2><ul><li>有序表在使用层面上也可以认为是集合结构，这里集合概念说的是key作为元素保持唯一性。</li><li>在Java中，有key无value，使用TreeSet结构</li><li>在Java中，有key有value，使用TreeMap结构</li><li>HashSet、HashMap与TreeSet、TreeMap的区别在于后者是在前者的基础上根据key有序组织的，即有序表能实现哈希表的功能同时还能根据key有序组织，不过性能有序表稍低于哈希表，一般的增删改查操作哈希表O(1),有序表O(logN)。</li><li>因为有序表有排序的需求，因此存储在有序表中的数据结构要求必须是可比较可排序的，这就要求元素在放入有序表时必须指定比较方法。</li><li>有序表比哈希表也就相应多了几个与排序有关的方法，如: <code>.firstKey()</code>、<code>.lastKey()</code>、<code>.floorKey(key)</code>、<code>ceilingKey(key)</code></li><li>放入有序表的东西，是基础数据类型则内部用的是值传递，内存占用的就是这个值的大小；非基础数据类型则是引用传递，内存占用的是这个值的内存地址的大小，这一点与哈希表是一样的。</li><li>在哈希表中使用增(<code>put</code>)、删(<code>remove</code>)、改(<code>put</code>)、查(<code>get</code>)等操作的时间复杂度都是O(logN)，</li></ul><div class="note info flat"><p>当放入有序表中的key如果不是基本数据类型，则必须定义比较器，提供数据之间的比较方式，否则有序表会报错</p></div><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="链表的结构"><a href="#链表的结构" class="headerlink" title="链表的结构"></a>链表的结构</h3><h4 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h4><p>单链表&#x2F;单向链表，单个节点中只指向下一个元素的位置，因此只支持单向遍历。<br>单向链表实现时：插入方面只提供头插法，删除方面提供头删法和指定元素删法，查找方面提供指定元素查找，删除指定元素和查找指定元素都是将数据区比对，操作第一个数据区相同的节点。</p><figure class="highlight java"><figcaption><span>单链表实现举例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单链表</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleLinkedList</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"><span class="keyword">private</span> Node head;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">SingleLinkedList</span><span class="params">()</span> &#123;</span><br><span class="line">size = <span class="number">0</span>;</span><br><span class="line">head = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 节点定义</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line"><span class="keyword">private</span> Object data;</span><br><span class="line"><span class="keyword">private</span> Node next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">data = obj;</span><br><span class="line">next = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 头插入,单链表只提供头插入</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">headAdd</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line"><span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(obj);</span><br><span class="line">node.next = size==<span class="number">0</span> ? <span class="literal">null</span> : head;</span><br><span class="line">head = node;</span><br><span class="line">size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除头节点,单链表只提供头节点的无参删除</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">removeHead</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(size==<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Object</span> <span class="variable">data</span> <span class="operator">=</span> head.data;</span><br><span class="line">head = head.next;</span><br><span class="line">size--;</span><br><span class="line"><span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除指定元素,单链表删除指定元素需提供参数</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(size == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(head.data.equals(obj)) &#123;</span><br><span class="line">head = head.next;</span><br><span class="line">size--;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Node</span> <span class="variable">current</span> <span class="operator">=</span> head;</span><br><span class="line"><span class="type">Node</span> <span class="variable">previous</span> <span class="operator">=</span> head;</span><br><span class="line"><span class="keyword">while</span>(current != <span class="literal">null</span> &amp;&amp; !current.data.equals(obj)) &#123;</span><br><span class="line">previous = current;</span><br><span class="line">current = current.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(current == <span class="literal">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;no found&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">previous.next = current.next;</span><br><span class="line">size--;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找头节点,返回头节点,没找到返回null</span></span><br><span class="line"><span class="keyword">public</span> Node <span class="title function_">findHead</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据节点数据查找,返回节点,没找到返回null</span></span><br><span class="line"><span class="keyword">public</span> Node <span class="title function_">find</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line"><span class="type">Node</span> <span class="variable">current</span> <span class="operator">=</span> head;</span><br><span class="line"><span class="keyword">while</span>(current!=<span class="literal">null</span> &amp;&amp; !current.data.equals(obj)) &#123;</span><br><span class="line">current = current.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> current;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> (size==<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printAll</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">Node</span> <span class="variable">current</span> <span class="operator">=</span> head;</span><br><span class="line"><span class="keyword">while</span>(current!=<span class="literal">null</span>) &#123;</span><br><span class="line">System.out.println(current.data);</span><br><span class="line">current = current.next;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;size=&quot;</span>+size);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//SingleLinkedList linkedList = new SingleLinkedList();</span></span><br><span class="line"><span class="comment">//linkedList.headAdd(1);</span></span><br><span class="line"><span class="comment">//linkedList.headAdd(2);</span></span><br><span class="line"><span class="comment">//linkedList.headAdd(&quot;3&quot;);</span></span><br><span class="line"><span class="comment">//linkedList.headAdd(true);</span></span><br><span class="line"><span class="comment">//linkedList.headAdd(5.0);</span></span><br><span class="line"><span class="comment">//linkedList.headAdd(-1);</span></span><br><span class="line"><span class="comment">//linkedList.printAll();</span></span><br><span class="line"><span class="comment">//linkedList.removeHead();</span></span><br><span class="line"><span class="comment">//linkedList.remove(&quot;3&quot;);</span></span><br><span class="line"><span class="comment">//linkedList.printAll();</span></span><br><span class="line"><span class="comment">//linkedList.remove(&quot;3&quot;);</span></span><br><span class="line"><span class="comment">//linkedList.printAll();</span></span><br><span class="line"><span class="comment">//linkedList.headAdd(&quot;3&quot;);</span></span><br><span class="line"><span class="comment">//linkedList.printAll();</span></span><br><span class="line"><span class="comment">//System.out.println(linkedList.find(&quot;3&quot;).data);</span></span><br><span class="line"><span class="comment">//System.out.println(linkedList.find(true).data);</span></span><br><span class="line"><span class="comment">//System.out.println(linkedList.find(&quot;2&quot;));</span></span><br><span class="line"><span class="comment">//Node head = linkedList.findHead();</span></span><br><span class="line"><span class="comment">//if(head!=null) &#123;</span></span><br><span class="line"><span class="comment">//System.out.println(head.data);</span></span><br><span class="line"><span class="comment">//&#125;else &#123;</span></span><br><span class="line"><span class="comment">//System.out.println(&quot;empty linkedList&quot;);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="双端链表"><a href="#双端链表" class="headerlink" title="双端链表"></a>双端链表</h4><p>双端链表相比单链表在类的成员变量中多了个对尾节点的引用，因此多了尾插入的功能，其他与单链表无差别，只能从头节点删除，只能单向遍历</p><figure class="highlight java"><figcaption><span>双端链表</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 双端链表相较单向链表只多了个尾部插入的功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoubleEndLinkedList</span> &#123;</span><br><span class="line"><span class="keyword">private</span> Node head;</span><br><span class="line"><span class="keyword">private</span> Node tail;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">DoubleEndLinkedList</span><span class="params">()</span> &#123;</span><br><span class="line">head = <span class="literal">null</span>;</span><br><span class="line">tail = <span class="literal">null</span>;</span><br><span class="line">size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 节点类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line"><span class="keyword">private</span> Object data;</span><br><span class="line"><span class="keyword">private</span> Node next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">data = obj;</span><br><span class="line">next = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向链表头添加节点</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">headAdd</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line"><span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(obj);</span><br><span class="line"><span class="keyword">if</span>(size == <span class="number">0</span>) &#123;</span><br><span class="line">head = newNode;</span><br><span class="line">tail = newNode;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">newNode.next = head;</span><br><span class="line">head= newNode;</span><br><span class="line">&#125;</span><br><span class="line">size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向链表尾添加节点</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tailAdd</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line"><span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(obj);</span><br><span class="line"><span class="keyword">if</span>(size == <span class="number">0</span>) &#123;</span><br><span class="line">head= newNode;</span><br><span class="line">tail = newNode;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">Node</span> <span class="variable">temp</span> <span class="operator">=</span> tail;</span><br><span class="line">temp.next = newNode;</span><br><span class="line">tail = newNode;</span><br><span class="line">&#125;</span><br><span class="line">size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除头节点并返回头节点数据</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">removeHead</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(size == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Object</span> <span class="variable">ret</span> <span class="operator">=</span> head.data;</span><br><span class="line">head = head.next;</span><br><span class="line">size--;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得链表节点数量</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSize</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断链表是否为空</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> size==<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printAll</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">Node</span> <span class="variable">current</span> <span class="operator">=</span> head;</span><br><span class="line"><span class="keyword">while</span>(current!=<span class="literal">null</span>) &#123;</span><br><span class="line">System.out.println(current.data);</span><br><span class="line">current = current.next;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;size=&quot;</span>+size);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">DoubleEndLinkedList</span> <span class="variable">linkedList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DoubleEndLinkedList</span>();</span><br><span class="line">linkedList.headAdd(<span class="number">1</span>);</span><br><span class="line">linkedList.tailAdd(<span class="number">2</span>);</span><br><span class="line">linkedList.headAdd(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">linkedList.headAdd(<span class="literal">true</span>);</span><br><span class="line">linkedList.tailAdd(<span class="number">5.0</span>);</span><br><span class="line">linkedList.headAdd(-<span class="number">1</span>);</span><br><span class="line">linkedList.printAll();</span><br><span class="line">linkedList.removeHead();</span><br><span class="line">linkedList.printAll();</span><br><span class="line">linkedList.headAdd(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">linkedList.printAll();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>利用双端链表可实现队列，进队列通过尾插入，出队列通过头删除。</p><h4 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h4><p>双向链表每个节点分为三部分<code>data</code>,<code>next</code>,<code>prev</code>，双向链表可从头尾插入，从头尾删除，从头尾两个方向都可遍历。</p><figure class="highlight java"><figcaption><span>双链表结构</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoubleLinkedList</span> &#123;</span><br><span class="line"><span class="keyword">private</span> Node head;</span><br><span class="line"><span class="keyword">private</span> Node tail;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">DoubleLinkedList</span><span class="params">()</span> &#123;</span><br><span class="line">head = <span class="literal">null</span>;</span><br><span class="line">tail = <span class="literal">null</span>;</span><br><span class="line">size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line"><span class="keyword">public</span> Object data;</span><br><span class="line"><span class="keyword">public</span> Node prev;</span><br><span class="line"><span class="keyword">public</span> Node next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">data = obj;</span><br><span class="line">prev = <span class="literal">null</span>;</span><br><span class="line">next = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">headAdd</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line"><span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(obj);</span><br><span class="line"><span class="keyword">if</span>(size==<span class="number">0</span>) &#123;</span><br><span class="line">head = newNode;</span><br><span class="line">tail = newNode;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">newNode.next = head;</span><br><span class="line">head.prev = newNode;</span><br><span class="line">head = newNode;</span><br><span class="line">&#125;</span><br><span class="line">size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tailAdd</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line"><span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(obj);</span><br><span class="line"><span class="keyword">if</span>(size==<span class="number">0</span>) &#123;</span><br><span class="line">head = newNode;</span><br><span class="line">tail = newNode;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">tail.next = newNode;</span><br><span class="line">newNode.prev = tail;</span><br><span class="line">tail = newNode;</span><br><span class="line">&#125;</span><br><span class="line">size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">removeHead</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(size==<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Object</span> <span class="variable">ret</span> <span class="operator">=</span> head.data;</span><br><span class="line">head = head.next;</span><br><span class="line"><span class="keyword">if</span>(head!=<span class="literal">null</span>) &#123;</span><br><span class="line">head.prev = <span class="literal">null</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">tail = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">size--;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">removeTail</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(size == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Object</span> <span class="variable">ret</span> <span class="operator">=</span> tail.data;</span><br><span class="line">tail = tail.prev;</span><br><span class="line"><span class="keyword">if</span>(tail!=<span class="literal">null</span>) &#123;</span><br><span class="line">tail.next = <span class="literal">null</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">head = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">size--;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> size==<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSize</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printAll</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">Node</span> <span class="variable">current</span> <span class="operator">=</span> head;</span><br><span class="line"><span class="keyword">while</span>(current!=<span class="literal">null</span>) &#123;</span><br><span class="line">System.out.println(current.data);</span><br><span class="line">current = current.next;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;size=&quot;</span>+size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">DoubleLinkedList</span> <span class="variable">linkedList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DoubleLinkedList</span>();</span><br><span class="line">linkedList.headAdd(<span class="number">1</span>);</span><br><span class="line">linkedList.tailAdd(<span class="number">2</span>);</span><br><span class="line">linkedList.headAdd(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">linkedList.tailAdd(<span class="literal">true</span>);</span><br><span class="line">linkedList.printAll();<span class="comment">// &quot;3&quot;,1,2,true</span></span><br><span class="line">linkedList.removeHead();</span><br><span class="line">linkedList.removeTail();</span><br><span class="line">linkedList.printAll();<span class="comment">// 1,2</span></span><br><span class="line">linkedList.headAdd(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">linkedList.tailAdd(<span class="number">3</span>);</span><br><span class="line">linkedList.printAll();<span class="comment">// &quot;3&quot;,1,2,3</span></span><br><span class="line">linkedList.removeHead();</span><br><span class="line">linkedList.removeHead();</span><br><span class="line">linkedList.removeHead();</span><br><span class="line">linkedList.removeHead();</span><br><span class="line">linkedList.printAll(); <span class="comment">// null</span></span><br><span class="line">linkedList.tailAdd(<span class="number">3</span>);</span><br><span class="line">linkedList.headAdd(<span class="number">1</span>);</span><br><span class="line">linkedList.printAll(); <span class="comment">// 1,3</span></span><br><span class="line">linkedList.removeTail();</span><br><span class="line">linkedList.removeTail();</span><br><span class="line">linkedList.printAll(); <span class="comment">// null</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链表的操作"><a href="#链表的操作" class="headerlink" title="链表的操作"></a>链表的操作</h3><h4 id="单向链表的反向"><a href="#单向链表的反向" class="headerlink" title="单向链表的反向"></a>单向链表的反向</h4><p>单向链表的反向是基本操作，在更复杂的链表算法中单向链表的反向作为基本操作还是经常出现的。</p><figure class="highlight java"><figcaption><span>单向链表的反向</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单向链表反向</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverse</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(size&lt;=<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">current</span> <span class="operator">=</span> head.next;</span><br><span class="line">    head.next = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">while</span>(current!=<span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">temp</span> <span class="operator">=</span> current.next;</span><br><span class="line">        current.next = head;</span><br><span class="line">        head = current;</span><br><span class="line">        current = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="双向链表的反向"><a href="#双向链表的反向" class="headerlink" title="双向链表的反向"></a>双向链表的反向</h4><p>由于双向链表每个节点保留前一个节点和后一个节点，因此双向链表反向就更加简单，将每个节点的前后指向交换，最后将头节点和尾节点交换即可</p><figure class="highlight java"><figcaption><span>双向链表的反向</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverse</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(size&lt;=<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">current</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="keyword">while</span>(current!=<span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">i</span> <span class="operator">=</span> current.next;</span><br><span class="line">        current.next = current.prev;</span><br><span class="line">        current.prev = i;</span><br><span class="line">        current = current.prev;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line">    head = tail;</span><br><span class="line">    tail = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="打印公共部分"><a href="#打印公共部分" class="headerlink" title="打印公共部分"></a>打印公共部分</h4><p>给定两个有序链表的头部，打印公共部分。</p><figure class="highlight java"><figcaption><span>打印有序链表公共部分</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrintPublic</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Node head;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">PrintPublic</span><span class="params">()</span> &#123;</span><br><span class="line">head = <span class="literal">null</span>;</span><br><span class="line">size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line"><span class="keyword">private</span> Integer data;</span><br><span class="line"><span class="keyword">private</span> Node next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(Integer obj)</span> &#123;</span><br><span class="line">data = obj;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单链表头插节点</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Integer obj)</span> &#123;</span><br><span class="line"><span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(obj);</span><br><span class="line">newNode.next = size==<span class="number">0</span> ? <span class="literal">null</span> : head;</span><br><span class="line">head = newNode;</span><br><span class="line">size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printPublic</span><span class="params">(Node head1, Node head2)</span> &#123;</span><br><span class="line"><span class="type">Node</span> <span class="variable">current1</span> <span class="operator">=</span> head1;</span><br><span class="line"><span class="type">Node</span> <span class="variable">current2</span> <span class="operator">=</span> head2;</span><br><span class="line"><span class="keyword">while</span>(current1!=<span class="literal">null</span> &amp;&amp; current2!=<span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(current1.data&gt;current2.data) &#123;</span><br><span class="line">current1 = current1.next;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(current1.data==current2.data)&#123;</span><br><span class="line">System.out.println(current1.data);</span><br><span class="line">current1 = current1.next;</span><br><span class="line">current2 = current2.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">current2 = current2.next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">PrintPublic</span> <span class="variable">linkedList1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintPublic</span>();</span><br><span class="line"><span class="type">PrintPublic</span> <span class="variable">linkedList2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintPublic</span>();</span><br><span class="line"></span><br><span class="line">linkedList1.add(<span class="number">1</span>);</span><br><span class="line">linkedList1.add(<span class="number">2</span>);</span><br><span class="line">linkedList1.add(<span class="number">4</span>);</span><br><span class="line">linkedList1.add(<span class="number">5</span>);</span><br><span class="line">linkedList1.add(<span class="number">7</span>);</span><br><span class="line">linkedList1.add(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">linkedList2.add(<span class="number">3</span>);</span><br><span class="line">linkedList2.add(<span class="number">4</span>);</span><br><span class="line">linkedList2.add(<span class="number">5</span>);</span><br><span class="line">linkedList2.add(<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">printPublic(linkedList1.head, linkedList2.head); <span class="comment">// 7,5,4</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="链表回文判断"><a href="#链表回文判断" class="headerlink" title="链表回文判断"></a>链表回文判断</h4><p>根据实际场合选用实现方法，例如在过答题系统测试时，如果没有对空间复杂度做要求，就采用更简单的代码，借用额外的数据结构来实现；如果是在面试现场要求实现就采用更高级一点的方法，空间复杂度O(1)，显示出自己的技术高度。</p><ol><li><p>代码简单点，利用栈数据结构，将链表逆序与原链表依次比较，时间复杂度O(N)，空间复杂度O(N)。</p><figure class="highlight java"><figcaption><span>利用栈结构逆序</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过栈将链表逆序并与原链表依次比较,时间复杂度O(N),空间复杂度O(N)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPalindrome1</span><span class="params">(Node head)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="literal">null</span> || head.next == <span class="literal">null</span>) &#123; <span class="comment">// size&lt;=1 true</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">current</span> <span class="operator">=</span> head;</span><br><span class="line">    Stack&lt;Node&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;Node&gt;();</span><br><span class="line">    <span class="keyword">while</span>(current != <span class="literal">null</span>) &#123;</span><br><span class="line">        stack.push(current);</span><br><span class="line">        current = current.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(head != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!head.data.equals(stack.pop().data)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        head = head.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>利用栈数据结构，将一半链表入栈逆序与原链表依次比较，时间复杂度O(N)，空间复杂度O(N&#x2F;2)。</p><figure class="highlight java"><figcaption><span>利用快慢指针和栈结构</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 快慢指针的方式将后一半链表放入栈中再与前半部分依次比较,时间复杂度O(N),空间复杂度O(N/2)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPalindrome2</span><span class="params">(Node head)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="literal">null</span> || head.next == <span class="literal">null</span>) &#123;<span class="comment">// size&lt;=1 true</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 123456 F落到5,S落到3  12345 F落到5,S落到3 </span></span><br><span class="line">    <span class="type">Node</span> <span class="variable">S</span> <span class="operator">=</span> head;<span class="comment">// 快慢指针</span></span><br><span class="line">    <span class="type">Node</span> <span class="variable">F</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="keyword">while</span>(F.next != <span class="literal">null</span> &amp;&amp; F.next.next != <span class="literal">null</span>) &#123; <span class="comment">// F.next!=null在前保证了F.next.next能访问</span></span><br><span class="line">        S = S.next;</span><br><span class="line">        F = F.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">    S = S.next; <span class="comment">// S此时指向右段首位</span></span><br><span class="line">    Stack&lt;Node&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;Node&gt;();</span><br><span class="line">    <span class="keyword">while</span>(S != <span class="literal">null</span>) &#123;</span><br><span class="line">        stack.push(S);</span><br><span class="line">        S = S.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!stack.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!head.data.equals(stack.pop().data)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        head = head.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>代码复杂点，利用快慢指针找中间位置，将右半边链表逆序形成新链表结构，不利用额外数据结构空间，时间复杂度O(N)，空间复杂度O(1)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 快慢指针,时间复杂度O(N),空间复杂度O(1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPalindrome3</span><span class="params">(Node head)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="literal">null</span> || head.next == <span class="literal">null</span>) &#123; <span class="comment">// size&lt;=1 true</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">n1</span> <span class="operator">=</span> head; <span class="comment">// 快慢指针n1为慢指针，n2为快指针</span></span><br><span class="line">    <span class="type">Node</span> <span class="variable">n2</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="comment">// 1,2,3,4,5 </span></span><br><span class="line">    <span class="comment">// 1,2,3,4,5,6</span></span><br><span class="line">    <span class="keyword">while</span>(n2.next != <span class="literal">null</span> &amp;&amp; n2.next.next != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// while条件保证size为奇数时，n1指向中间元素，size为偶数时n1指向最中间两元素中的左元素</span></span><br><span class="line">        n1 = n1.next;</span><br><span class="line">        n2 = n2.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">    n2 = n1.next; <span class="comment">// 在确定中间位置后n1,n2就不再作为快慢指针起作用了，n2指向右边链表首位</span></span><br><span class="line">    n1.next = <span class="literal">null</span>; <span class="comment">// 准备借助n1指针将链表右半部分反序，n1准备作为右半部分的头指针</span></span><br><span class="line">    <span class="type">Node</span> <span class="variable">n3</span> <span class="operator">=</span> <span class="literal">null</span>; <span class="comment">// 临时变量，保存n2的下个元素</span></span><br><span class="line">    <span class="comment">// 将右半部分链表反序</span></span><br><span class="line">    <span class="keyword">while</span>(n2 != <span class="literal">null</span>) &#123;</span><br><span class="line">        n3 = n2.next;</span><br><span class="line">        n2.next = n1; <span class="comment">// 右边链表逆序后最后一位指向左边链表最后一位，左边链表最后一位指向null</span></span><br><span class="line">        n1 = n2; <span class="comment">// n1作为右边逆序后链表的头部，更新</span></span><br><span class="line">        n2 = n3;</span><br><span class="line">    &#125;</span><br><span class="line">    n3 = n1; <span class="comment">// 保存右边逆序后的链表头部</span></span><br><span class="line">    n2 = head; <span class="comment">// n2指向左边链表的头部</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">ret</span> <span class="operator">=</span> <span class="literal">true</span>; <span class="comment">// 用变量保存返回值在最后返回是为了将还原链表的操作统一进行</span></span><br><span class="line">    <span class="keyword">while</span>(n1 != <span class="literal">null</span> &amp;&amp; n2 != <span class="literal">null</span>) &#123; <span class="comment">// n1,n2现在分别是两段链表的头部</span></span><br><span class="line">        <span class="keyword">if</span>(!n1.data.equals(n2.data)) &#123;</span><br><span class="line">            ret = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        n1 = n1.next;</span><br><span class="line">        n2 = n2.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 链表还原</span></span><br><span class="line">    n1 = n3.next; <span class="comment">// n1为当前要操作的元素</span></span><br><span class="line">    n3.next = <span class="literal">null</span>; <span class="comment">// 右边链表head的指向</span></span><br><span class="line">    <span class="keyword">while</span>(n1 != <span class="literal">null</span>) &#123;</span><br><span class="line">        n2 = n1.next;</span><br><span class="line">        n1.next = n3;</span><br><span class="line">        n3 = n1;</span><br><span class="line">        n1 = n2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此部分在代码设计过程中涉及到了快慢指针的概念，快慢指针是链表相关算法中相当重要的一个工具，应该熟练掌握快慢指针的使用方法，根据场合让慢指针停在不同的位置。</p></li></ol><h4 id="链表分段"><a href="#链表分段" class="headerlink" title="链表分段"></a>链表分段</h4><p>链表分段类似于快排那里介绍的荷兰国旗问题，区别仅在于将数据结构从数组换为了链表。<br>链表分段也可分为两种实现方式，借助额外数据结构的方式和单纯利用自身数据结构两种。</p><ol><li><p>借助数组数据结构，将链表入数组，利用快排的方式对数组排序后，将数组还原为链表返回</p><figure class="highlight java"><figcaption><span>利用快排思想</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将链表放数组里partition完再装回链表</span></span><br><span class="line"><span class="keyword">public</span> Node <span class="title function_">partitionLinkedList1</span><span class="params">(Node head, Integer threshold)</span> &#123;</span><br><span class="line">    <span class="comment">// 链表长度&lt;=1时不用partition，天然分区</span></span><br><span class="line">    <span class="keyword">if</span>(size &lt;= <span class="number">1</span>) &#123; <span class="keyword">return</span> head;&#125;</span><br><span class="line">    Node[] partitionArray = <span class="keyword">new</span> <span class="title class_">Node</span>[size];</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> size;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123; <span class="comment">// 链表放到数组中进行partition</span></span><br><span class="line">        partitionArray[i] = cur;</span><br><span class="line">        cur = cur.getNext();</span><br><span class="line">    &#125;</span><br><span class="line">    partition(partitionArray, threshold);</span><br><span class="line">    <span class="comment">// partition后将数组还原到链表</span></span><br><span class="line">    cur = <span class="literal">null</span>;</span><br><span class="line">    len = size;</span><br><span class="line">    <span class="keyword">while</span>(len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        partitionArray[--len].setNext(cur);</span><br><span class="line">        cur = partitionArray[len];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> partitionArray[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">partition</span><span class="params">(Node[] partitionArray, Integer threshold)</span> &#123;</span><br><span class="line">    <span class="comment">// partition操作</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">sP</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// smallPointer 小于区的右边界</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">lP</span> <span class="operator">=</span> size-<span class="number">1</span>; <span class="comment">// largePointer 大于区的左边界</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= lP) &#123;</span><br><span class="line">        <span class="keyword">if</span>(partitionArray[i].getData() &lt; threshold) &#123;</span><br><span class="line">            swap(partitionArray, i++, sP++);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(partitionArray[i].getData() &gt; threshold) &#123;</span><br><span class="line">            swap(partitionArray, i, lP--);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(Node[] array, <span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">temp</span> <span class="operator">=</span> array[a];</span><br><span class="line">    array[a] = array[b];</span><br><span class="line">    array[b] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>不借助格外数据结构，只利用有限个指针变量分别指向各段头尾，</p><figure class="highlight java"><figcaption><span>利用多个指针变量</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接在链表中进行，借助多个指针完成partition</span></span><br><span class="line"><span class="keyword">public</span> Node <span class="title function_">partitionLinkedList2</span><span class="params">(Node head, Integer threshold)</span> &#123;</span><br><span class="line">    <span class="comment">// 链表长度&lt;=1时不用partition，天然分区</span></span><br><span class="line">    <span class="keyword">if</span>(size &lt;= <span class="number">1</span>) &#123;<span class="keyword">return</span> head;&#125;</span><br><span class="line">    <span class="comment">// 用6个指针建立小于区，等于区，大于区三个链表</span></span><br><span class="line">    <span class="type">Node</span> <span class="variable">sHead</span> <span class="operator">=</span> <span class="literal">null</span>; <span class="comment">// small部分头尾</span></span><br><span class="line">    <span class="type">Node</span> <span class="variable">sTail</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">eHead</span> <span class="operator">=</span> <span class="literal">null</span>; <span class="comment">// equal部分头尾</span></span><br><span class="line">    <span class="type">Node</span> <span class="variable">eTail</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">lHead</span> <span class="operator">=</span> <span class="literal">null</span>; <span class="comment">// large部分头尾</span></span><br><span class="line">    <span class="type">Node</span> <span class="variable">lTail</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">nextNode</span> <span class="operator">=</span> <span class="literal">null</span>; <span class="comment">// 保存当前节点的下一个节点 </span></span><br><span class="line">    <span class="keyword">while</span>(head != <span class="literal">null</span>) &#123;</span><br><span class="line">        nextNode = head.getNext();</span><br><span class="line">        head.setNext(<span class="literal">null</span>); <span class="comment">// 只使用当前节点</span></span><br><span class="line">        <span class="comment">// 新加入的节点都加在区域的尾端</span></span><br><span class="line">        <span class="keyword">if</span>(head.getData() &lt; threshold) &#123; <span class="comment">// 小于区域</span></span><br><span class="line">            <span class="keyword">if</span>(sHead == <span class="literal">null</span>) &#123; <span class="comment">// 小于区域为空时</span></span><br><span class="line">                sHead = head;</span><br><span class="line">                sTail = head;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123; <span class="comment">// 将新节点加入到小于区链表中</span></span><br><span class="line">                sTail.setNext(head);</span><br><span class="line">                sTail = head;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(head.getData() &gt; threshold) &#123; <span class="comment">// 大于区域</span></span><br><span class="line">            <span class="keyword">if</span>(lHead == <span class="literal">null</span>) &#123; <span class="comment">// 大于区域为空时</span></span><br><span class="line">                lHead = head;</span><br><span class="line">                lTail = head;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123; <span class="comment">// 新节点加入</span></span><br><span class="line">                lTail.setNext(head);</span><br><span class="line">                lTail = head;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123; <span class="comment">// 等于区域</span></span><br><span class="line">            <span class="keyword">if</span>(eHead == <span class="literal">null</span>) &#123; <span class="comment">// 等于区域为空时</span></span><br><span class="line">                eHead = head;</span><br><span class="line">                eTail = head;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123; <span class="comment">// 新节点加入</span></span><br><span class="line">                eTail.setNext(head);</span><br><span class="line">                eTail = head;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        head = nextNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将三部分连接</span></span><br><span class="line">    <span class="keyword">if</span>(sTail != <span class="literal">null</span>) &#123; <span class="comment">// 小于区域存在,将小于区域和等于区域连接</span></span><br><span class="line">        sTail.setNext(eHead);</span><br><span class="line">        eTail = eTail == <span class="literal">null</span> ? sTail : eTail; <span class="comment">// 谁和大于区域头连接谁就是eTail</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(eTail != <span class="literal">null</span>) &#123; <span class="comment">// 将等于区域与大于区域连接 </span></span><br><span class="line">        eTail.setNext(lHead);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sHead != <span class="literal">null</span> ? sHead : (eHead != <span class="literal">null</span> ? eHead : lHead); <span class="comment">// 小于区域不存在或等于区域不存在时</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><p>方式1利用了数组数据结构，额外空间复杂度O(N)，利用的是快排的思想，而方法2利用了链表长度可扩展的特性，直接使用6个指针来划定区域，只需对链表做一次遍历，根据判断结果将节点连接在相应区域后，最终将不同区域连接即可。<br>方法1的实现重点在快排<code>partition()</code>方法的实现，方法2重点在各种特殊情况下不同区域的连接设计上。</p><h4 id="包含随机成员变量的链表的复制"><a href="#包含随机成员变量的链表的复制" class="headerlink" title="包含随机成员变量的链表的复制"></a>包含随机成员变量的链表的复制</h4><p>随即成员变量指的是：链表的节点中数据区包含引用类型的成员变量，它的指向是随机的，并不像节点的指针区的那个成员变量一样规定它指向下一个元素。。</p><ol><li><p>借助额外数据结构哈希表完成复制，时间复杂度O(N)，空间复杂度O(N)。</p><figure class="highlight java"><figcaption><span>借助额外数据结构</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 借助额外的数据结构哈希表完成复制</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title function_">copyRandom1</span><span class="params">(Node head)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="literal">null</span>) &#123; <span class="keyword">return</span> head; &#125;</span><br><span class="line">    <span class="comment">// 借助hashmap结构，先复制出原链表的结构，再对照原链表结构从hashmap中查找对应值，将新链表对应关系完成</span></span><br><span class="line">    HashMap&lt;Node, Node&gt; hashmap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Node, Node&gt;();</span><br><span class="line">    <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="keyword">while</span>(cur != <span class="literal">null</span>) &#123;</span><br><span class="line">        hashmap.put(cur, <span class="keyword">new</span> <span class="title class_">Node</span>(cur.data)); <span class="comment">// 创建新链表的节点，先复制链表的结构和data成员变量</span></span><br><span class="line">        cur = cur.next;</span><br><span class="line">    &#125;</span><br><span class="line">    cur = head;</span><br><span class="line">    <span class="keyword">while</span>(cur != <span class="literal">null</span>) &#123;</span><br><span class="line">        hashmap.get(cur).next = hashmap.get(cur.next); <span class="comment">// 逐次查找复制next和rand成员变量</span></span><br><span class="line">        hashmap.get(cur).rand = hashmap.get(cur.rand);</span><br><span class="line">        cur = cur.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hashmap.get(head);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>不借助额外数据结构，在原链表基础上扩展链表，利用相对位置信息来复制，时间复杂度O(N)，空间复杂度O(1)。<br>其思路是很巧妙的：将每个新节点放在要复制的旧节点后，然后将所有节点连接起来，这样就形成一个位置关系，使用此位置关系加上链表指针好修改指向的特点来完成复制，不需要多余数据结构。</p><figure class="highlight java"><figcaption><span>不借助格外数据结构</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不借助额外数据结构，单纯靠相对位置和链表的长度可变特性来完成复制</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title function_">copyRandom2</span><span class="params">(Node head)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="literal">null</span>) &#123; <span class="keyword">return</span> head; &#125;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">nextNode</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">while</span>(cur != <span class="literal">null</span>) &#123; <span class="comment">// 在原来的链表中每个节点后添加一个新节点，这两节点就是原链表和复制链表中对应位置的两个节点</span></span><br><span class="line">        nextNode = cur.next; <span class="comment">// 保存原链表的下一个节点</span></span><br><span class="line">        cur.next = <span class="keyword">new</span> <span class="title class_">Node</span>(cur.data); <span class="comment">// 原节点后加复制节点</span></span><br><span class="line">        cur.next.next = nextNode; <span class="comment">// 将复制节点与原节点的后一个节点连接</span></span><br><span class="line">        cur = nextNode; <span class="comment">// 指针移向原链表的下一个节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    cur = head;</span><br><span class="line">    <span class="keyword">while</span>(cur != <span class="literal">null</span>) &#123;</span><br><span class="line">        cur.next.rand = cur.rand == <span class="literal">null</span> ? <span class="literal">null</span> : cur.rand.next;</span><br><span class="line">        cur = cur.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">    cur = head;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">ret</span> <span class="operator">=</span> head.next; <span class="comment">// 提前记录新链表的头节点</span></span><br><span class="line">    <span class="keyword">while</span>(cur != <span class="literal">null</span>) &#123;</span><br><span class="line">        nextNode = cur.next.next;</span><br><span class="line">        cur.next.next = cur.next.next == <span class="literal">null</span> ? <span class="literal">null</span> : cur.next.next.next; <span class="comment">// 将新链表各节点连接</span></span><br><span class="line">        cur.next = cur.next.next; <span class="comment">// 将原链表也还原，连接各节点</span></span><br><span class="line">        cur = nextNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><div class="note warning flat"><p>注意：方法2中由于是借助引用传递在原链表结构上进行修改，所以经过复制操作后，在连接新链表各节点时也要将原链表各节点连接还原。</p></div><h4 id="判断链表中是否包含环结构"><a href="#判断链表中是否包含环结构" class="headerlink" title="判断链表中是否包含环结构"></a>判断链表中是否包含环结构</h4><ol><li>借助数据结构HashSet的集合特性，时间复杂度O(N)，空间复杂度O(N)<ol><li>遍历链表将每个节点加入HashSet，加入前利用HashSet提供的方法判断节点是否已在HashSet中。</li><li>若当前节点在HashSet中查找到相同，则此链表包含环结构，且此节点为入环节点。</li><li>若遍历完链表也没有相同节点出现，则认为此链表不包含环结构。</li></ol></li></ol><figure class="highlight java"><figcaption><span>利用HashSet</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Node <span class="title function_">containCycle1</span><span class="params">(Node head)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="literal">null</span>) &#123; <span class="keyword">return</span> <span class="literal">null</span>; &#125;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="comment">// 利用数据结构HashSet的集合特性，当出现第一个重复时重复的节点即是环入口，如果遍历到null，则无环</span></span><br><span class="line">    HashSet&lt;Node&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;Node&gt;();</span><br><span class="line">    <span class="keyword">while</span>(node != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(set.contains(node)) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        set.add(node);</span><br><span class="line">        node = node.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>借助快慢指针的特殊算法来判断，时间复杂度O(N)，空间复杂度O(1)。<ol><li>快慢指针初始化都指向头节点。</li><li>快指针步长2，慢指针步长1，向后遍历链表。</li><li>若快指针的下一位或下下一位指向null，则认为链表不包含环结构。</li><li>若在遍历过程中慢指针等于快指针，则认为链表包含环结构。</li><li>慢指针在相遇的位置不变，快指针指向头节点，快慢指针重新都以1为步长向后遍历。</li><li>当快慢指针相遇时就是入环节点。</li></ol></li></ol><figure class="highlight java"><figcaption><span>利用快慢指针</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用快慢指针</span></span><br><span class="line"><span class="keyword">public</span> Node <span class="title function_">containCycle2</span><span class="params">(Node head)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="literal">null</span>) &#123; <span class="keyword">return</span> <span class="literal">null</span>; &#125;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">S</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">F</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="keyword">while</span>(F.next != <span class="literal">null</span> &amp;&amp; F.next.next != <span class="literal">null</span>) &#123;</span><br><span class="line">        S = S.next;</span><br><span class="line">        F = F.next.next;</span><br><span class="line">        <span class="keyword">if</span>(S == F) &#123; <span class="comment">// 快慢指针第一次相遇，说明存在环结构</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(F.next == <span class="literal">null</span> || F.next.next == <span class="literal">null</span>) &#123; <span class="comment">// 不存在环结构</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    F = head; <span class="comment">// 判断存在环结构时，快指针指向头节点，慢指针在相遇点</span></span><br><span class="line">    <span class="keyword">while</span>(F != S) &#123; <span class="comment">// 快慢指针同时以1为步长向后遍历，直到相遇</span></span><br><span class="line">        F = F.next;</span><br><span class="line">        S = S.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> F; <span class="comment">// 相遇点即为入环节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="无环链表相交判断"><a href="#无环链表相交判断" class="headerlink" title="无环链表相交判断"></a>无环链表相交判断</h4><p>两个链表都没有环结构，即链表最后一个节点指向<code>null</code>，要判断链表是否相交只需看最后一个节点是否相同，若最后一个节点不同则两链表不相交，反之链表相交，但最后一个节点并不一定是相交开始的那个节点，要找到相交起始节点，需要从尾部向头部统一两链表的长度后，将节点逐一比对找到起始节点。下面是一个示例代码：</p><figure class="highlight java"><figcaption><span>无环链表相交</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 两个都无环的情况，相交返回交点，否则返回null</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Node <span class="title function_">noCycleFindCrossNode</span><span class="params">(Node head1, Node head2)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(head1 == <span class="literal">null</span> || head2 == <span class="literal">null</span>) &#123;<span class="keyword">return</span> <span class="literal">null</span>;&#125;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">cur1</span> <span class="operator">=</span> head1;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">cur2</span> <span class="operator">=</span> head2;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len1</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len2</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(cur1.next != <span class="literal">null</span>) &#123;</span><br><span class="line">        cur1 = cur1.next;</span><br><span class="line">        len1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(cur2.next != <span class="literal">null</span>) &#123;</span><br><span class="line">        cur2 = cur2.next;</span><br><span class="line">        len2++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cur1 != cur2) &#123;<span class="keyword">return</span> <span class="literal">null</span>;&#125; <span class="comment">// 经过遍历链表后指针停在最后一个节点，比较两链表最后节点不相同则无相交</span></span><br><span class="line">    cur1 = head1;</span><br><span class="line">    cur2 = head2;</span><br><span class="line">    <span class="comment">// 统一两链表长度后同步长遍历找到首次相交节点</span></span><br><span class="line">    <span class="keyword">if</span>(len1 &gt; len2) &#123;</span><br><span class="line">        <span class="keyword">while</span>(len1-- &gt; len2) &#123;</span><br><span class="line">            cur1 = cur1.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(len1 &lt; len2)&#123;</span><br><span class="line">        <span class="keyword">while</span>(len1 &lt; len2--) &#123;</span><br><span class="line">            cur2 = cur2.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(len1-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(cur1 == cur2) &#123;<span class="keyword">break</span>;&#125;</span><br><span class="line">        cur1 = cur1.next;</span><br><span class="line">        cur2 = cur2.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cur1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="有环链表相交判断"><a href="#有环链表相交判断" class="headerlink" title="有环链表相交判断"></a>有环链表相交判断</h4><p>如果相交分为三种相交情况，每个情况中找相交节点的方法不一样。</p><ol><li><p>共用一个环一个入口<br>这种情况，可以看作是无环链表相交的特殊情况，区别仅在于无环链表相交中我们认为最后一个节点相同则一定相交，在共用一个环和一个入口的情况中，我们可以将环入口看作无环链表相交中的最后一个节点，其计算相交起始节点的方法也基本类似。</p><figure class="highlight java"><figcaption><span>共用一个环一个入口</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 共用一个环且一个入口</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Node <span class="title function_">oneEntryCycle</span><span class="params">(Node head1, Node head2, Node entry1)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 链表1比链表2从头节点到入口节点 多的节点数</span></span><br><span class="line">    <span class="keyword">while</span>(head1 != entry1) &#123;</span><br><span class="line">        len++;</span><br><span class="line">        head1 = head1.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(head2 != entry1) &#123;</span><br><span class="line">        len--;</span><br><span class="line">        head2 = head2.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span>(len-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            head1 = head1.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(len &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        len = Math.abs(len);</span><br><span class="line">        <span class="keyword">while</span>(len-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            head2 = head2.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// head1,head2此时距离入口长度相同</span></span><br><span class="line">    <span class="keyword">while</span>(head1 != head2) &#123; <span class="comment">// 当找到交点时停止</span></span><br><span class="line">        head1 = head1.next;</span><br><span class="line">        head2 = head2.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>共用一个环两个入口<br>判断是这种情况时这两个入口都可认为是相交的起始节点。</p></li><li><p>两个链表两个环<br>当一个链表从环入口向后遍历时，如果在第二次走到环入口的过程中没有遇到另一个链表的环入口节点，就认为这两个环是独立的，两个链表不相交。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅拷贝与深拷贝</title>
      <link href="/2024/07/10/%E6%B5%85%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
      <url>/2024/07/10/%E6%B5%85%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B7%B1%E6%8B%B7%E8%B4%9D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="引语"><a href="#引语" class="headerlink" title="引语"></a>引语</h2><p>在 “值传递和引用传递” 这篇文章中我们提到了直接使用引用传递在方法中修改所指向对象的内容时实际是在修改实参，当我们想要复制对象进行修改而不影响原始对象时，我们就应根据实际需求选择浅拷贝或深拷贝。</p><p>深拷贝是指不仅复制对象本身，还递归复制对象中的所有引用类型成员变量所指向的对象，从而创建一个全新的、独立的对象。这样可以确保原始对象和克隆对象完全独立，对其中一个对象的修改不会影响到另一个对象。</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>理解拷贝的概念前我们先做一个判断：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">MyClass</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line">MyClass b;</span><br><span class="line">b = a;</span><br></pre></td></tr></table></figure><p>这种方式中<code>b</code>是不是<code>a</code>的拷贝？<br>答案：否，<code>b</code>其实是指向<code>a</code>的一个引用，两个都对应内存中的同一个位置，因此修改<code>b</code>的值也会改动<code>a</code>的值。<br>在Java中拷贝对象(也称为克隆对象)有两种方式：浅拷贝和深拷贝。<br>拷贝要求拷贝出来的对象与原对象是独立的，浅拷贝和深拷贝与原对象都是独立的，区别仅在于：</p><ul><li>浅拷贝：只复制对象本身和基本数据类型成员变量，而不复制对象中引用类型的成员变量所指向的对象。</li><li>深拷贝：不仅复制对象本身和基本数据类型成员变量，还递归复制对象中引用类型的成员变量所指向的对象。</li></ul><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>浅拷贝：只复制对象本身和基本数据类型成员变量，不复制对象中引用类型成员变量所指向的对象，修改克隆对象的基本数据类型成员变量不改变原对象，而克隆对象和原对象的引用类型成员变量所指向的对象是相同的。</li><li>深拷贝：不仅复制对象本身和基本数据类型成员变量，还递归复制对象中引用类型的成员变量所指向的对象，从而产生一个全新的独立于原对象的新对象。在新对象上做的所有修改都与原对象独立。</li></ul><p>浅拷贝与深拷贝的主要区别只在对引用数据类型成员变量的处理上。<br>形象一点理解就是：</p><ul><li>浅拷贝只复制对象的当前层，引用类型成员变量所指向的对象就属于更深一层的内容了，因此在浅拷贝中不复制此内容</li><li>深拷贝中会用递归的方式将所指向的对象也进行复制，从而产生完全一样完全独立的新对象。</li></ul><h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><p>要完成浅拷贝，需要实现下面两个要求：</p><ol><li>让自定义类实现<code>Cloneable</code>接口。</li><li>重写<code>.clone()</code>方法，返回值为<code>Object</code>类型。</li><li><code>.clone()</code>方法捕获或抛出<code>CloneNotSupportedException</code>异常<br>下面是使用例子：</li><li>示例1：在<code>.clone()</code>方法中捕获处理异常。<figure class="highlight java"><figcaption><span>浅拷贝示例1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Class1</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span>&#123;</span><br><span class="line"><span class="keyword">private</span> Integer data;</span><br><span class="line"><span class="keyword">private</span> Class2 next;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">clone</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">Class1</span> <span class="variable">cloned</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">cloned = (Class1)<span class="built_in">super</span>.clone();</span><br><span class="line">&#125;<span class="keyword">catch</span>(CloneNotSupportedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cloned;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>示例2：在<code>.clone()</code>方法抛出异常，在使用处捕获处理异常。<figure class="highlight java"><figcaption><span>浅拷贝示例2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Class1</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span> <span class="keyword">throws</span> CloneNotSupportedException&#123;</span><br><span class="line"><span class="keyword">private</span> Integer data;</span><br><span class="line"><span class="keyword">private</span> Class2 next;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">clone</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (Class1)<span class="built_in">super</span>.clone();</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 使用.clone()时用try-catch捕获并处理异常</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><p>深拷贝相比浅拷贝多了一个手动完成引用类型成员变量的克隆操作。<br>如果想给对象提供浅拷贝和深拷贝两种方式，就需要单独书写一个深拷贝方法，示例：</p><figure class="highlight java"><figcaption><span>深拷贝示例1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Class1</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span>&#123;</span><br><span class="line"><span class="keyword">private</span> Integer data;</span><br><span class="line"><span class="keyword">private</span> Class2 next;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">clone</span><span class="params">()</span> &#123; <span class="comment">// 浅拷贝方式通过`.clone()`方式调用</span></span><br><span class="line"><span class="type">Class1</span> <span class="variable">cloned</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">cloned = (Class1) <span class="built_in">super</span>.clone();</span><br><span class="line">&#125;<span class="keyword">catch</span>(CloneNotSupportedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cloned;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义方法省略</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Class1 <span class="title function_">deepClone</span><span class="params">()</span> &#123; <span class="comment">// 深拷贝方式通过`.deepClone()`方式调用</span></span><br><span class="line"><span class="type">Class1</span> <span class="variable">cloned</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">cloned = (Class1)<span class="built_in">super</span>.clone();</span><br><span class="line">cloned.next = (Class2)next.clone(); <span class="comment">// 深拷贝需要手动完成引用类型成员变量的递归复制</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(CloneNotSupportedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cloned;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有时候我们针对一个对象只需要深拷贝这一种拷贝方法，那么就可以直接在.clone()方法中实现深拷贝，示例：</p><figure class="highlight java"><figcaption><span>深拷贝示例2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Class1</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span>&#123;</span><br><span class="line"><span class="keyword">private</span> Integer data;</span><br><span class="line"><span class="keyword">private</span> Class2 next; <span class="comment">// Class2也要实现Cloneable接口，并重写.clone()方法</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">clone</span><span class="params">()</span> &#123; <span class="comment">// 深拷贝通过`.clone()`方式调用</span></span><br><span class="line"><span class="type">Class1</span> <span class="variable">cloned</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">cloned = (Class1)<span class="built_in">super</span>.clone();</span><br><span class="line">cloned.next = (Class2)next.clone();</span><br><span class="line">&#125;<span class="keyword">catch</span>(CloneNotSupportedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cloned;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 自定义方法省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两种深拷贝方式都是可以的，根据场景选择适合的。上面介绍的深拷贝都是通过克隆实现的，即实现<code>Cloneable</code>接口，还有一种方式是通过序列化和反序列化来完成深拷贝，需要实现&#96;&#96;接口</p><div class="note info flat"><p>注意：要实现深拷贝，引用类型成员变量的这个类(例如前文代码中的Class2)也要实现<code>Cloneable</code>接口，并重写<code>.clone()</code>方法。</p></div><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>有的场景下类中含有多个引用类型，或者引用类型内层还包含很多引用类型，那这种场景下如果还是用<code>Cloneable</code>接口的<code>.clone()</code>方式来书写就会特别麻烦，这时候可以考虑使用序列化来完成深度拷贝。<br>序列化(Serialization)就是将对象写到流的过程，写入完成后流中的对象是原有对象的一份拷贝，原对象仍然存在内存中，两者相互独立。对象序列化时不仅复制对象本身，还递归复制其引用的成员对象，因此通过序列化和反序列化过程就可以实现深拷贝。要完成深拷贝有下面的要求：</p><ol><li>要实现序列化的对象类必须实现 <code>Serializable</code> 接口。</li><li>要实现序列化的对象中要复制的成员变量的对象类必须实现 <code>Serializable</code> 接口。</li><li>在深拷贝方法中包含对象的序列化和反序列化</li></ol><p>具体实现示例：</p><figure class="highlight java"><figcaption><span>序列化深拷贝</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义类 要实现序列化的对象中要复制的成员变量的对象类也必须实现`Serializable`接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Class4</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="comment">// setter 和 getter 方法省略</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 自定义类 要实现序列化的对象类必须实现`Serializable`接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Class3</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line"><span class="keyword">private</span> Integer data;</span><br><span class="line"><span class="keyword">private</span> Class4 next; <span class="comment">// 引用类型成员变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Class3 <span class="title function_">deepClone</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">Class3</span> <span class="variable">cloned</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123; <span class="comment">// 在深拷贝方法中捕获并处理异常</span></span><br><span class="line"><span class="comment">// 序列化</span></span><br><span class="line"><span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">oos.writeObject(<span class="built_in">this</span>); </span><br><span class="line"><span class="comment">// 反序列化</span></span><br><span class="line"><span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(baos.toByteArray());</span><br><span class="line"><span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);</span><br><span class="line">cloned = (Class3)ois.readObject();</span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">catch</span>(ClassNotFoundException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cloned;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 自定义 setter 和 getter 方法省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>采用序列化实现的深拷贝与实现<code>Cloneable</code>接口的深拷贝有什么区别？<br>通过序列化和反序列化实现的深拷贝相比另一种深拷贝，多了“泛型限定”这一优势，编译器会在运行前检查待克隆的对象是否支持序列化，从而避免在运行时抛出异常。</p><div class="note info flat"><p>tips: 当你想要让类中的某个成员变量不被深拷贝，也就是说不被序列化和反序列化，那就用<code>transient</code>关键字修饰该成员变量，或者将此成员变量加<code>static</code>修饰变为静态变量，因为静态变量归属于类，不会进入对象的序列化和反序列化过程。</p></div><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>浅拷贝和深拷贝都可通过实现<code>Cloneable</code>接口，并重写<code>.clone()</code>来定义，两者区别在于深拷贝的引用成员变量的复制要手动完成。</li><li>深拷贝还可通过对象的序列化和反序列化来实现，相应的需要被拷贝的对象实现<code>Serializable</code>接口。</li><li>通过对象的序列化和反序列化实现的深拷贝能更好处理“引用嵌套，多个引用”这种情况，同时具备“泛型限定”的优势，在实现深拷贝时应优先采用这种方式。</li></ol><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>贴上完整测试代码：</p><figure class="highlight java"><figcaption><span>完整测试代码</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Class2</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">clone</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">Class2</span> <span class="variable">cloned</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">cloned = (Class2)<span class="built_in">super</span>.clone();</span><br><span class="line">&#125;<span class="keyword">catch</span>(CloneNotSupportedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cloned;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String str)</span> &#123;</span><br><span class="line">name = str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Class1</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span>&#123;</span><br><span class="line"><span class="keyword">private</span> Integer data;</span><br><span class="line"><span class="keyword">private</span> Class2 next;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">clone</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">Class1</span> <span class="variable">cloned</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">cloned = (Class1) <span class="built_in">super</span>.clone();</span><br><span class="line">&#125;<span class="keyword">catch</span>(CloneNotSupportedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cloned;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 自定义方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(Integer value)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.data = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNext</span><span class="params">(Class2 myclass)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.next = myclass;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Class2 <span class="title function_">getNext</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (Class2) <span class="built_in">this</span>.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;data = &quot;</span> + data);</span><br><span class="line">System.out.println(<span class="string">&quot;next address = &quot;</span> + next);</span><br><span class="line">System.out.println(<span class="string">&quot;next value = &quot;</span> + next.getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Class1 <span class="title function_">deepClone</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">Class1</span> <span class="variable">cloned</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">cloned = (Class1)<span class="built_in">super</span>.clone();</span><br><span class="line">cloned.next = (Class2)next.clone();</span><br><span class="line">&#125;<span class="keyword">catch</span>(CloneNotSupportedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cloned;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 自定义类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Class4</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="comment">// setter 和 getter 方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String str)</span> &#123;</span><br><span class="line">name = str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Class3</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line"><span class="keyword">private</span> Integer data;</span><br><span class="line"><span class="keyword">private</span> Class4 next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Class3 <span class="title function_">deepClone</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">Class3</span> <span class="variable">cloned</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 序列化</span></span><br><span class="line"><span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">oos.writeObject(<span class="built_in">this</span>); </span><br><span class="line"><span class="comment">// 反序列化</span></span><br><span class="line"><span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(baos.toByteArray());</span><br><span class="line"><span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);</span><br><span class="line">cloned = (Class3)ois.readObject();</span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">catch</span>(ClassNotFoundException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cloned;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义方法 setter和getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(Integer value)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.data = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNext</span><span class="params">(Class4 myclass)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.next = myclass;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Class4 <span class="title function_">getNext</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (Class4) <span class="built_in">this</span>.next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;data = &quot;</span> + data);</span><br><span class="line">System.out.println(<span class="string">&quot;next address = &quot;</span> + next);</span><br><span class="line">System.out.println(<span class="string">&quot;next value = &quot;</span> + next.getName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CopyMethod</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">(Class1 origin, Class1 cloned)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Origin: &quot;</span>);</span><br><span class="line">origin.display(); <span class="comment">// 1, address1</span></span><br><span class="line">System.out.println(<span class="string">&quot;Cloned: &quot;</span>);</span><br><span class="line">cloned.display(); <span class="comment">// 1, address1</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;--- Cloneable after change --- &quot;</span>);</span><br><span class="line"></span><br><span class="line">cloned.setData(<span class="number">2</span>); <span class="comment">// set clone.data = 2</span></span><br><span class="line">cloned.getNext().setName(<span class="string">&quot;XiaoMing&quot;</span>); <span class="comment">// set clone.next.name = XiaoMing</span></span><br><span class="line">System.out.println(<span class="string">&quot;Origin: &quot;</span>);</span><br><span class="line">origin.display(); <span class="comment">// 1, address1, origin.next.name = XiaoMing 可见next.data已经被修改了</span></span><br><span class="line">System.out.println(<span class="string">&quot;Cloned: &quot;</span>);</span><br><span class="line">cloned.display(); <span class="comment">// 2, address1, cloned.next.name = XiaoMing </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">(Class3 origin, Class3 cloned)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Origin: &quot;</span>);</span><br><span class="line">origin.display(); <span class="comment">// 1, address1</span></span><br><span class="line">System.out.println(<span class="string">&quot;Cloned: &quot;</span>);</span><br><span class="line">cloned.display(); <span class="comment">// 1, address1</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;--- after change --- &quot;</span>);</span><br><span class="line"></span><br><span class="line">cloned.setData(<span class="number">2</span>); <span class="comment">// set clone.data = 2</span></span><br><span class="line">cloned.getNext().setName(<span class="string">&quot;XiaoMing&quot;</span>); <span class="comment">// set clone.next.name = XiaoMing</span></span><br><span class="line">System.out.println(<span class="string">&quot;Origin: &quot;</span>);</span><br><span class="line">origin.display(); <span class="comment">// 1, address1, origin.next.name = XiaoMing 可见next.data已经被修改了</span></span><br><span class="line">System.out.println(<span class="string">&quot;Cloned: &quot;</span>);</span><br><span class="line">cloned.display(); <span class="comment">// 2, address1, cloned.next.name = XiaoMing </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Class1</span> <span class="variable">origin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Class1</span>(); <span class="comment">// origin</span></span><br><span class="line">origin.setData(<span class="number">1</span>); <span class="comment">// set origin.data = 1</span></span><br><span class="line"><span class="type">Class2</span> <span class="variable">next</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Class2</span>(); <span class="comment">// next</span></span><br><span class="line">next.setName(<span class="string">&quot;LiHua&quot;</span>);</span><br><span class="line">origin.setNext(next); <span class="comment">// origin.next.name = LiHua</span></span><br><span class="line"></span><br><span class="line"><span class="type">Class1</span> <span class="variable">shallowCloned</span> <span class="operator">=</span> (Class1) origin.clone(); <span class="comment">// 浅拷贝对象</span></span><br><span class="line">System.out.println(<span class="string">&quot;\n===== Shallow copy Test =====\n&quot;</span>);</span><br><span class="line">test1(origin, shallowCloned);</span><br><span class="line"></span><br><span class="line">origin.getNext().setName(<span class="string">&quot;LiHua&quot;</span>); <span class="comment">// 还原origin的值</span></span><br><span class="line"></span><br><span class="line"><span class="type">Class1</span> <span class="variable">deepCloned</span> <span class="operator">=</span> (Class1) origin.deepClone();</span><br><span class="line">System.out.println(<span class="string">&quot;\n=====Cloneable Deep copy Test =====\n&quot;</span>);</span><br><span class="line">test1(origin, deepCloned);</span><br><span class="line"></span><br><span class="line"><span class="type">Class3</span> <span class="variable">origin2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Class3</span>();</span><br><span class="line">origin2.setData(<span class="number">1</span>);</span><br><span class="line"><span class="type">Class4</span> <span class="variable">next2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Class4</span>(); <span class="comment">// next</span></span><br><span class="line">next2.setName(<span class="string">&quot;LiHua&quot;</span>);</span><br><span class="line">origin2.setNext(next2); <span class="comment">// origin.next.name = LiHua</span></span><br><span class="line"><span class="type">Class3</span> <span class="variable">deepCloned2</span> <span class="operator">=</span> (Class3)origin2.deepClone();</span><br><span class="line">System.out.println(<span class="string">&quot;\n=====Serializable Deep copy Test =====\n&quot;</span>);</span><br><span class="line">test2(origin2, deepCloned2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 拷贝 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>值传递和引用传递</title>
      <link href="/2024/07/09/%E5%80%BC%E4%BC%A0%E9%80%92%E5%92%8C%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92/"/>
      <url>/2024/07/09/%E5%80%BC%E4%BC%A0%E9%80%92%E5%92%8C%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="引语"><a href="#引语" class="headerlink" title="引语"></a>引语</h2><p>在使用链表时，笔者发现有时候在方法中通过头节点对链表内容做修改，此修改有时能反映到原链表中，有时候做出的修改作用域只在函数中，或者函数返回值中，并不会影响到原链表。为探究此现象的原因，笔者查询了相关资料并用代码做了一些测试，在这里将分析过程和结果分享给大家。<br>不想看分析测试过程可直接跳转结论：<a href="#%E6%80%BB%E7%BB%93">结论直达车</a></p><p>先给出结论，出现引语中的现象的原因是：没有正确理解Java中值传递和引用传递的概念。</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>这里说的是在Java语言中参数传递的方式，对别的编程语言中的传递方式感兴趣的可以在网上自行查找。</p><ul><li>值传递：当我们将基本数据类型作为方法参数时，参数传递过程是值传递。</li><li>引用传递：当我们将数组、对象等数据类型作为方法参数时，参数传递过程是引用传递。</li></ul><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>值传递：值传递的参数是实参的一份拷贝或副本，因此在方法内对此参数做的修改与方法外的实参是隔离的。</li><li>引用传递：引用传递的参数是实参对象的引用副本，通过引用对实参做的修改会在方法结束后仍然保留，也就是说与实参不隔离。</li></ul><p>浅显一点地解释：值传递的形参是实参的一份拷贝，是个数，与实参相等，那么在拷贝上的修改就对实参不会有影响；而引用传递的形参是实参对象的一份引用拷贝，内容是实参对象的地址，因此在形参地址访问的对象上做修改就是在修改实参，那么在方法结束后此修改会保留，实参也被改变了。</p><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><p>通过上面特点部分的分析，可以看到引用传递实际上保存的是实参对象的地址拷贝，而这刚好也符合值传递的定义，因此也有 “Java中不存在引用传递，都是值传递” 这种说法，也是有道理的，当然在这种说法中就要区分这两种值传递了。但是无论是哪种说法，两种传递方式的特点是一致的，只要掌握各自的特点就能灵活使用了。<br>上面特点部分中提到引用传递不隔离，但要注意这个结论是有前提的，其前提是“通过引用修改实参内容”，如果只是通过引用访问实参对象，并不做修改，那么这些访问操作并不会对实参对象有影响。</p><h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><p>通过概念性的解释理解起来并不直观，我这里放几个测试的代码，结合代码更好理解。<br>基本数据类型作参数的值传递：</p><figure class="highlight java"><figcaption><span>值传递</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 值传递测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">changeInt</span><span class="params">(<span class="type">int</span> value)</span> &#123; <span class="comment">// 值传递，形参value是实参a的副本，与形参名字无关，即使形参起名为a也一样</span></span><br><span class="line">    value++;</span><br><span class="line">    System.out.println(<span class="string">&quot;Inside method: a = &quot;</span> + value); <span class="comment">// 2，与外界实参隔离</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    System.out.println(<span class="string">&quot;Outside method: a = &quot;</span> + a); <span class="comment">// 1</span></span><br><span class="line">    changeInt(a); <span class="comment">// 值传递</span></span><br><span class="line">    System.out.println(<span class="string">&quot;Outside method: a = &quot;</span> + a); <span class="comment">// 1，值传递方法内修改后回到主函数实参a不受修改影响，实现隔离</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对象作为参数的引用传递：</p><figure class="highlight java"><figcaption><span>引用传递</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个Node类</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">     <span class="comment">// 每个Node类型的对象具有成员变量</span></span><br><span class="line">    <span class="keyword">private</span> Integer data;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(Integer value)</span> &#123;</span><br><span class="line">        data = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试只访问形参引用指向的对象，不修改对象值的情况</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Integer <span class="title function_">getNodeData</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> node == <span class="literal">null</span>? <span class="literal">null</span> : node.data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试修改通过引用指向的对象的情况</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Integer <span class="title function_">changeNodeData</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">    node.data = node == <span class="literal">null</span> ? <span class="literal">null</span> : <span class="number">0</span>; <span class="comment">// 修改参数node的数据为0</span></span><br><span class="line">    <span class="keyword">return</span> node.data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 引用类型测试</span></span><br><span class="line">    <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">1</span>); </span><br><span class="line">    System.out.println(node.data); <span class="comment">// 1，直接访问实参node的数据</span></span><br><span class="line">    System.out.println(getNodeData(node)); <span class="comment">// 1，对象作为参数是引用传递</span></span><br><span class="line">    System.out.println(node.data); <span class="comment">// 1，在方法中只访问不修改引用指向的对象时，实参不变</span></span><br><span class="line">    System.out.println(changeNodeData(node)); <span class="comment">// 0</span></span><br><span class="line">    System.out.println(node.data); <span class="comment">// 0，在方法中修改了形参引用指向的对象内容，实参会变</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的例子中可以看到值传递会隔离，引用传递的隔离分情况，只访问则隔离，修改则不隔离。<br>再细分的话，这里说的修改也要分为两种情况，修改形参引用的指向隔离，修改形参引用指向的对象内容则不隔离。<br>具体一点，在链表这种数据结构中，遍历链表时存在改变形参的情况：</p><figure class="highlight java"><figcaption><span>修改引用指向</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Node <span class="title function_">getTail</span><span class="params">(Node head)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="literal">null</span>) &#123;<span class="keyword">return</span> head;&#125;</span><br><span class="line">    <span class="keyword">while</span>(head.next != <span class="literal">null</span>) &#123;</span><br><span class="line">        head = head.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>形参<code>head</code>被改变，但是改变的仅是形参<code>head</code>的指向为<code>head.next</code>的地址，并没有修改原来<code>head</code>指向的对象，因此此修改作用域只在方法内部，不会影响原来的实参对象。<br>理解这一点后再看下面的代码：</p><figure class="highlight java"><figcaption><span>修改引用指向对象内容</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeNode</span><span class="params">(Node head)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="literal">null</span>) &#123;<span class="keyword">return</span>;&#125;</span><br><span class="line">    Node[] nodeArray = <span class="keyword">new</span> <span class="title class_">Node</span>[size];</span><br><span class="line">    <span class="comment">// 将原链表逆序赋值给nodeArray</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> size-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>( ;head != <span class="literal">null</span>; head = head.next, i--) &#123;</span><br><span class="line">        nodeArray[i] = head;<span class="comment">// 此方式就是数组的每个元素都是一个引用，每个引用指向实参的每个Node节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; size; i++) &#123;</span><br><span class="line">        nodeArray[i-<span class="number">1</span>].next = nodeArray[i]; <span class="comment">// 将节点连接，修改节点的next值，这就是修改了引用指向的对象内容，因此不隔离</span></span><br><span class="line">    &#125;</span><br><span class="line">    nodeArray[i-<span class="number">1</span>].next = <span class="literal">null</span>; <span class="comment">// nodeArray: 1-&gt;2-&gt;3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即使<code>nodeArray[]</code>是在方法中新创建的变量，因为给予了其指向实参对象的引用，相当于给了他访问修改实参内容的钥匙，那么通过<code>nodeArray</code>引用修改实参内容的操作也就会被保留下来，对于上述代码来说，最终以<code>nodeArray[0]</code>为头节点的链表成功实现了原实参链表的逆序，但是在方法结束后实参的顺序已经被逆序操作给打乱了。如果想要让实参对象不受影响，那就应该在方法前对实参对象使用深拷贝，在拷贝出来的副本上做修改。关于浅拷贝和深拷贝可以看 “浅拷贝和深拷贝” 这篇文章。<br>在理解了值传递和引用传递后就可以对编程语言中的<code>=</code>符号有另一种更方便的理解方式，例如<code>int a = b;</code>中<code>=</code>表达了将基本数据类型<code>b</code>的拷贝给<code>a</code>，那么<code>a</code>的修改就不会影响到<code>b</code>；相应的<code>Class1 newNode = node;</code>表达了将<code>Class1</code>类型的<code>newNode</code>对象的地址给<code>node</code>，因此修改<code>node</code>引用地址指向的对象会对<code>newNode</code>造成影响。用值传递和引用传递来理解在我看来是一种不错的方式。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>值传递：基本数据类型作为形参，保存实参的副本，对形参的修改与实参隔离，作用域在方法内。</li><li>引用传递：数组、对象数据类型作为形参，保存实参的引用(地址)副本，通过此引用修改指向的对象内容会影响实参；通过此形参引用只访问指向的对象内容或者改变形参引用的指向时，与实参隔离，作用域在方法内。</li></ul><p>这种隔离性的设计使得方法无法直接修改调用者的变量，它只能修改传递进来的副本，灵活使用值传递和引用传递，有助于确保数据的安全性和一致性。</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>贴上完整测试代码：</p><figure class="highlight java"><figcaption><span>测试代码</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParameterPassing</span> &#123;</span><br><span class="line"><span class="keyword">private</span> Node head;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ParameterPassing</span><span class="params">()</span> &#123;</span><br><span class="line">size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 值传递测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">changeInt</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">value++;</span><br><span class="line">System.out.println(<span class="string">&quot;Inside method: a = &quot;</span> + value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line"><span class="keyword">private</span> Integer data;</span><br><span class="line"><span class="keyword">private</span> Node next;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(Integer value)</span> &#123;</span><br><span class="line">data = value;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Integer value)</span> &#123;</span><br><span class="line"><span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(value);</span><br><span class="line">newNode.next = size == <span class="number">0</span> ? <span class="literal">null</span> : head;</span><br><span class="line">head = newNode;</span><br><span class="line">size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Node <span class="title function_">getTail</span><span class="params">(Node head)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(head == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(head.next != <span class="literal">null</span>) &#123;</span><br><span class="line">head = head.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> head; <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeNode</span><span class="params">(Node head)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(head == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">Node[] nodeArray = <span class="keyword">new</span> <span class="title class_">Node</span>[size];</span><br><span class="line"><span class="comment">// 将原链表逆序赋值给nodeArray</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> size-<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>( ;head != <span class="literal">null</span>; head = head.next, i--) &#123;</span><br><span class="line">nodeArray[i] = head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; size; i++) &#123;</span><br><span class="line">nodeArray[i-<span class="number">1</span>].next = nodeArray[i]; <span class="comment">// 将节点连接，注意此处是修改节点的next值，因此不隔离</span></span><br><span class="line">&#125;</span><br><span class="line">nodeArray[i-<span class="number">1</span>].next = <span class="literal">null</span>; <span class="comment">// nodeArray: 1-&gt;2-&gt;3</span></span><br><span class="line">System.out.println(<span class="string">&quot;--- after changeNode ---&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;nodeArray: &quot;</span>);</span><br><span class="line">display(nodeArray[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">(Node head)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(head == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">System.out.print(<span class="string">&quot;[&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>( ; head.next != <span class="literal">null</span>; head = head.next) &#123;</span><br><span class="line">System.out.print(head.data + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(head.data + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Integer <span class="title function_">getNodeData</span><span class="params">(Node node)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> node == <span class="literal">null</span>? <span class="literal">null</span> : node.data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Integer <span class="title function_">changeNodeData</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">node.data = node == <span class="literal">null</span> ? <span class="literal">null</span> : <span class="number">0</span>; <span class="comment">// 修改参数node的数据为0</span></span><br><span class="line"><span class="keyword">return</span> node.data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//// 值传递测试</span></span><br><span class="line"><span class="comment">//int a = 1;</span></span><br><span class="line"><span class="comment">//System.out.println(&quot;Outside method: a = &quot; + a);</span></span><br><span class="line"><span class="comment">//changeInt(a);</span></span><br><span class="line"><span class="comment">//System.out.println(&quot;Outside method: a = &quot; + a);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//// 引用类型测试</span></span><br><span class="line"><span class="comment">//Node node = new Node(1); </span></span><br><span class="line"><span class="comment">//System.out.println(node.data); // 1，直接访问实参node的数据</span></span><br><span class="line"><span class="comment">//System.out.println(getNodeData(node)); // 1，对象作为参数是引用传递</span></span><br><span class="line"><span class="comment">//System.out.println(node.data); // 1，在方法中只访问不修改引用指向的对象时，实参不变</span></span><br><span class="line"><span class="comment">//System.out.println(changeNodeData(node)); // 0</span></span><br><span class="line"><span class="comment">//System.out.println(node.data); // 0，在方法中修改了形参引用指向的对象内容，实参会变</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//// 只访问不修改的引用传递</span></span><br><span class="line"><span class="comment">//ParameterPassing linkedList = new ParameterPassing();</span></span><br><span class="line"><span class="comment">//linkedList.add(1);</span></span><br><span class="line"><span class="comment">//linkedList.add(2);</span></span><br><span class="line"><span class="comment">//linkedList.add(3);</span></span><br><span class="line"><span class="comment">//System.out.println(&quot;--- before getTail ---&quot;);</span></span><br><span class="line"><span class="comment">//linkedList.display(linkedList.head);</span></span><br><span class="line"><span class="comment">//linkedList.getTail(linkedList.head);</span></span><br><span class="line"><span class="comment">//System.out.println(&quot;--- after getTail ---&quot;);</span></span><br><span class="line"><span class="comment">//linkedList.display(linkedList.head);</span></span><br><span class="line"><span class="comment">//// 修改引用所指对象的引用传递</span></span><br><span class="line"><span class="comment">//System.out.println(&quot;--- before changeNode ---&quot;);</span></span><br><span class="line"><span class="comment">//linkedList.display(linkedList.head);</span></span><br><span class="line"><span class="comment">//linkedList.changeNode(linkedList.head);</span></span><br><span class="line"><span class="comment">//System.out.println(&quot;outside linkedList:&quot;);</span></span><br><span class="line"><span class="comment">//linkedList.display(linkedList.head);</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 参数传递 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Photoshop教程</title>
      <link href="/2024/06/27/Photoshop%E6%95%99%E7%A8%8B/"/>
      <url>/2024/06/27/Photoshop%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇是笔者在使用Photoshop过程中记录一些工具的使用方法和技巧。</p><h2 id="工具与环境"><a href="#工具与环境" class="headerlink" title="工具与环境"></a>工具与环境</h2><p>软件: Photoshop<br>操作系统: Windows 10</p><h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><p><code>Ctrl+J</code>: 点击一个图层后使用快捷键<code>Ctrl+J</code>复制一个新的图层，双击新的图层名给图层重命名，这个操作建议在一个每个大步骤之后进行，例如去除图像上污点后就新建一个图层，之后的操作在新图层上进行，这样后续修改就不会造成干扰。<br><code>Ctrl+T</code>: 点击图层后使用快捷键<code>Ctrl+T</code>能直接让当前图层的图像进入尺寸修改的状态，可以通过拖动改变图像的尺寸。<br><code>Shift</code>: 在拖动改变图像尺寸时按住<code>Shift</code>能维持图像的比例不变。<br><code>Ctrl+鼠标滚轮</code>: 图像在当前界面左右移动。<br><code>Alt+鼠标滚轮</code>: 图像在当前界面放大缩小。<br><code>Ctrl+Alt+Z</code>: 撤销操作，返回上一步。</p><h2 id="污点修复工具"><a href="#污点修复工具" class="headerlink" title="污点修复工具"></a>污点修复工具</h2><p>用于去除画面上污点，例如去除脸部上的雀斑。使用方法如下：</p><ol><li>点击右边原图层，使用快捷键<code>Ctrl+J</code>新建一个图层，在新的图层上进行处理，可以双击图层名自定义图层名字。</li><li>点击选中右边新建的图层，注意图层后面不能有锁标识，否则不能对图层进行修改。</li><li>在左侧工具栏选择<code>污点修复画笔工具</code>，按住<code>Alt</code>键和<code>鼠标右键</code>，移动鼠标能改变画笔大小，注意不要把画笔调得太大，会导致画面扭曲。</li><li>在要去掉的污点上左键点击或者拖动就能根据周围环境只能消除污点，用于去除雀斑挺好的。</li><li>按住<code>Alt</code>键滑动<code>鼠标滚轮</code>，能对画面进行缩放。按住<code>Ctrl</code>键滑动<code>鼠标滚轮</code>能左右移动画面。</li></ol><h2 id="修复画笔工具"><a href="#修复画笔工具" class="headerlink" title="修复画笔工具"></a>修复画笔工具</h2><p>修复画笔工具与污点修复工具功能上差不多，修复画笔工具的工作原理是使用选中区域特征替代当前区域特征，用具体例子来说明更容易理解：</p><ol><li>选中图层，选中修复画笔工具，按住<code>Alt</code>键，在要作为模板的区域<code>鼠标左键</code>点击提取特征。</li><li>松开<code>Alt</code>键，在要应用的区域点击<code>鼠标左键</code>应用特征。</li></ol><div class="note info flat"><p>注意：污点修复工具和修复画笔工具都是根据周围环境对选中区域进行修复，因此在图形边界处或明暗分界处要小心使用。可以使用<code>Ctrl+Alt+Z</code>撤销上一步操作。</p></div><h2 id="修补工具"><a href="#修补工具" class="headerlink" title="修补工具"></a>修补工具</h2><p>修补工具的作用与前面两个基本类似，使用方法如下：</p><ol><li>按住<code>鼠标左键</code>拖动来绘制要修补的封闭区域，绘制完成后松开<code>鼠标左键</code>。</li><li>拖动封闭区域到要采纳的区域完成替换，例如将污点区域选中后拖动到无污点区域。</li></ol><h2 id="仿制图章工具"><a href="#仿制图章工具" class="headerlink" title="仿制图章工具"></a>仿制图章工具</h2><p>仿制图章工具主要用在水印的添加和删除上，他是用选中区域填充另一个区域，这个填充不会适配环境，是直接的复制粘贴，具体步骤如下：</p><ol><li>按住<code>Alt</code>键，按住<code>鼠标右键</code>拖动调整画笔大小，画笔的大小就是复制区域的大小。</li><li>在要复制的区域上按住<code>Alt</code>键，同时点击<code>鼠标左键</code>完成复制。</li><li>在要粘贴的地方点击<code>鼠标左键</code>完成粘贴。</li><li>也可以在要覆盖的区域拖动，那么会用第2步选用区域的对应位置来填充</li></ol><h2 id="红眼工具"><a href="#红眼工具" class="headerlink" title="红眼工具"></a>红眼工具</h2><p>在使用照相机拍摄人脸时，有时人眼睛会在闪光灯下呈现出红色，如果想去除红眼效果，可以使用红眼工具，直接在瞳孔点击<code>鼠标左键</code>即可<br>还有另一种方法：使用画笔工具，先选中画笔工具，涂抹瞳孔，在右侧设置图层的混合模式那里选择 <code>颜色</code> 选项即可。</p><h2 id="液化"><a href="#液化" class="headerlink" title="液化"></a>液化</h2><p>在上方菜单栏中选择<code>滤镜</code>后在下拉菜单中选择<code>液化</code>，可以理解为图像变成一滩水了，形状任你拿捏</p><ol><li>左边是菜单栏，选择<code>向前变形工具</code>，按住<code>Alt</code>键和<code>鼠标右键</code>，拖动改变画笔大小，可以用来瘦脸，在使用<code>向前变形工具</code>时画笔更大比较好，这时候拖拽调整时不显得太突兀，瘦脸虽好也要注意度，太过了就成”蛇妖”了🐍</li><li>重建工具，选中重建工具后框选的区域会重建恢复为最初的样子。</li><li>褶皱工具，平滑地缩小某个部位，注意调整画笔大小，可以用来缩小鼻子。</li><li>膨胀工具，平滑地放大某个部位，注意调整画笔大小，可以用来放大眼睛。</li><li>冻结蒙版工具，选中区域不会再被修改。</li><li>放大工具，<code>鼠标左键</code>点击放大，按住<code>Alt</code>再使用<code>鼠标左键</code>点击缩小画面。<br>不同的Photoshop版本所具有的液化功能也不尽相同，当你找不到你需要的功能时在网上查询一下确认自己的软件版本是否具有此功能。</li></ol><div class="note info warning flat"><p>液化工具谨慎使用，特别是脸型的放大缩小拖拽都会影响面容，出来的效果可能与原图差距挺大的，特别是制作证件照，小心P图太过了人脸识别识别不出来。</p></div><h2 id="Camera-Raw"><a href="#Camera-Raw" class="headerlink" title="Camera Raw"></a>Camera Raw</h2><p>Camera Raw工具能方便调整图像信息，包括曝光、对比度、高光、阴影等信息。<br>曝光：画面中亮色部分占比，增加曝光度会让画面所有部分更亮，一般不动。<br>对比度：根据色彩直方图调整对比度能让色彩分布更加均匀。<br>高光：增加高光可以让图片的白色部分更白，黑色部分不变。<br>阴影：调低阴影可以让图片的黑色部分更黑，白色部分不变。<br>清晰度：增加清晰度能使图片更清晰，但会出现更多噪点。</p><h2 id="抠图"><a href="#抠图" class="headerlink" title="抠图"></a>抠图</h2><p>抠图可以使用快速选择工具或魔棒工具，或者钢笔工具。<br>快速选择工具和魔棒工具适合背景色区分较大，有明显边界的图形，比如衣领。<br>钢笔工具适合细致的图案，比如头发丝。</p><h2 id="曲线"><a href="#曲线" class="headerlink" title="曲线"></a>曲线</h2><p>在右下角菜单点击<code>创建新的填充或调整图层</code>选项，选择<code>曲线</code>工具，在曲线调整窗口通过拖动曲线调整图片属性信息，包括亮度等。<br>同时右下角菜单点击<code>创建新的填充或调整图层</code>选项后，在上拉菜单中还有对比度、曝光等信息也可以调整。</p><h2 id="红唇"><a href="#红唇" class="headerlink" title="红唇"></a>红唇</h2><p>在涉及到人像的PS时，经常遇到唇色太淡的情况，为了看起来更有活力往往会将唇色调红润一点，步骤如下：</p><ol><li><code>Ctrl+J</code>复制一个图层。</li><li>新图层上使用套索工具或者钢笔选中嘴唇区域，最好不要选择到缝子，只包含嘴唇最好。</li><li>点击右侧面板中调整选项卡，选择<code>可选颜色</code>按钮(倒数第二个图标)。</li><li>颜色选择红色，具体的颜色可以参考<code>青色-88% 红色+44% 黄色+44%</code> ，下面图层不透明度调整为<code>37%</code>，数值可根据自己喜好具体调整，调整到感觉自然就好。</li><li>如果来回调整颜色还是不满意，可以尝试加曲线调整整幅图的亮度。</li></ol><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>选中图层后修改：有时候发现工具用在图上没效果，请在右侧检查是否选中当前要修改的图层。</li><li>调整不要过度：过度的调整会让图像失真，比例失调或者颜色不协调，反而失去了原来的真实感。</li><li>新操作在新图层进行：新的操作应该在新图层上进行，每当完成单个阶段的PS任务后将原图层加锁，之后使用<code>Ctrl+J</code>新建图层，在新图层上操作方便修改。</li><li>及时保存文件：在单个阶段的修改完成后最好以PS文件专用格式 <code>.psd</code> 保存当前项目，防止外界因素导致PS软件意外关闭造成文件修改丢失。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Photoshop教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法原理与实现</title>
      <link href="/2024/06/22/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0/"/>
      <url>/2024/06/22/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><ol><li>排序原理</li></ol><ul><li>如其名：每轮选择出最小的元素，与待排序区间最左边元素交换位置。</li><li>待排序区间的左边是排好序的区间</li><li>每轮能排好一个数，待排序区间长度每轮减小1</li></ul><ol start="2"><li>代码实现<figure class="highlight java"><figcaption><span>选择排序Java实现</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sort_SelectionSort</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">selectionSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;arr.length-<span class="number">1</span>; i++) &#123;<span class="comment">// 寻找arr.length-1轮</span></span><br><span class="line"><span class="type">int</span> <span class="variable">minIndex</span> <span class="operator">=</span> i; <span class="comment">// minIndex保存最小元素的位置，初始化为i，每轮排序后随着i++向右移1位</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>; j&lt;arr.length; j++) &#123;</span><br><span class="line">minIndex = arr[j]&lt;arr[minIndex]?j:minIndex;<span class="comment">// 更新最小元素的位置</span></span><br><span class="line">&#125;</span><br><span class="line">swap(arr,i,minIndex);<span class="comment">// 每轮将最小的元素找到，将其与待排序的最左端元素交换</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;<span class="comment">// 元素交换</span></span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">arr[i] = arr[j];</span><br><span class="line">arr[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] array = &#123;<span class="number">2</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">2</span>&#125;;</span><br><span class="line">selectionSort(array);</span><br><span class="line">System.out.println(Arrays.toString(array));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>性能分析<br>时间复杂度：<code>O(N^2)</code> ，空间复杂度：<code>O(1)</code></li></ol><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><ol><li>排序原理</li></ol><ul><li>如其名：每轮从左至右依次将相邻元素比较，比较的这俩元素的顺序和期望顺序不一致时交换他俩位置，比较区间从左移到右，形似冒泡。</li><li>冒泡排序每轮通过多个交换位置操作，最终确定一个最大值放在待排序区间的最右边。</li><li>冒泡排序待排序区间右边是排好序的区间</li><li>每轮排好一个数，待排序区间长度每轮减小1</li></ul><ol start="2"><li>代码实现<figure class="highlight java"><figcaption><span>冒泡排序Java实现</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sort_BubbleSort</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> arr.length-<span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;<span class="comment">// 执行arr.length-1轮</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++) &#123;<span class="comment">// 要排序的区间[j, i]</span></span><br><span class="line"><span class="keyword">if</span>(arr[j] &gt; arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">swap(arr, j, j+<span class="number">1</span>);<span class="comment">// 相邻元素比较，如果左边元素比右边元素更大则交换俩元素位置</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;<span class="comment">// 交换i,j位置的元素</span></span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">arr[i] = arr[j];</span><br><span class="line">arr[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] array = &#123;<span class="number">2</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">2</span>&#125;;</span><br><span class="line">bubbleSort(array);</span><br><span class="line">System.out.println(Arrays.toString(array));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>性能分析<br>时间复杂度：<code>O(N^2)</code> ，空间复杂度：<code>O(1)</code></li></ol><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><ol><li>排序原理</li></ol><ul><li>如其名：从左至右依次对前i位完成排序，新加入的这1位就好像被插入到前i位中适合他的位置。</li><li>每轮只给1位找到最合适的位置，这1位后面的数在本轮中既不移动，也不参与比较或运算。</li><li>由于从左至右依次对前i位完成排序，因此不用多次重排，例如：先完成了前2位有序，则下一步要满足前三位有序就只需要将第三位与第二位比较，顺序不合适就交换继续往左比较插入到合适的位置就满足了前三位有序，若是顺序合适就直接满足了前三位有序，可以进行下一步操作了</li><li>插入排序的时间复杂度与数据分布有关，原数据逆序时时间复杂度为 <code>O(N^2)</code>，原数据顺序时时间复杂度为 <code>O(N)</code></li></ul><ol start="2"><li>代码实现<figure class="highlight java"><figcaption><span>插入排序Java实现</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sort_InsertSort</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">insertSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;<span class="comment">// 从左至右依次对前i位完成排序，排序采用插入的方式</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i-<span class="number">1</span>; j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; arr[j+<span class="number">1</span>]; j--) &#123;<span class="comment">// 对要排序的端从最右边开始向左插入</span></span><br><span class="line">swap(arr,j,j+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">arr[i] = arr[j];</span><br><span class="line">arr[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] array = &#123;<span class="number">2</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">2</span>&#125;;</span><br><span class="line">insertSort(array);</span><br><span class="line">System.out.println(Arrays.toString(array));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>性能分析<br>插入排序的时间复杂度与数据的分布有关，最差情况为 <code>O(N^2)</code> ，最好情况为 <code>O(N)</code> ，一般采用最差情况 <code>O(N^2)</code> 作为插入排序的时间复杂度估计，因此虽然和选择排序和冒泡排序时间复杂度都是 <code>O(N^2)</code> ，但实际运行时插入排序性能是更好一点的</li></ol><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><h3 id="递归过程"><a href="#递归过程" class="headerlink" title="递归过程"></a>递归过程</h3><p>递归是一种解决问题的思路，要完成递归过程要求以下几点特征：</p><ol><li>要通过递归解决的问题是可分的，可将大问题拆分为多个可分的小问题</li><li>每一级递归中需要调用递归方法</li><li>递归方法中需要包含原子问题的解决办法</li><li>递归方法中需要包含大问题划分为小问题的步骤</li></ol><p>例子，求数组最大值问题递归解决</p><figure class="highlight java"><figcaption><span>递归求数组最大值</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Recursion_getMax</span> &#123;<span class="comment">// 递归求数组最大值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">recursionGetMax</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> startIndex, <span class="type">int</span> endIndex)</span> &#123;<span class="comment">// 求数组指定区间最大值</span></span><br><span class="line"><span class="keyword">if</span>(startIndex==endIndex) &#123;<span class="comment">// 原子问题的处理办法</span></span><br><span class="line"><span class="keyword">return</span> arr[startIndex];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> startIndex + ((endIndex-startIndex) &gt;&gt; <span class="number">2</span>);<span class="comment">// 问题拆解，求中点mid=start+(end-start)/2</span></span><br><span class="line"><span class="type">int</span> <span class="variable">leftMax</span> <span class="operator">=</span> recursionGetMax(arr, startIndex, mid);<span class="comment">// 递归中调用递归</span></span><br><span class="line"><span class="type">int</span> <span class="variable">rightMax</span> <span class="operator">=</span> recursionGetMax(arr, mid+<span class="number">1</span>, endIndex);</span><br><span class="line"><span class="keyword">return</span> Math.max(leftMax, rightMax);<span class="comment">// 最终的问题解决</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] array = &#123;<span class="number">2</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">2</span>&#125;;</span><br><span class="line">System.out.println(recursionGetMax(array,<span class="number">0</span>,array.length-<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>递归的过程其实是个二叉树遍历、压栈出栈的过程，当本级问题还有分支没求出来就将本级问题压栈，对下一级问题进行求解，下一级如果还有分支没有求出来就继续压栈，直到叶子节点求出答案后一步步出栈，一层层出嵌套，最终将原始问题求解出来。因此递归中要实现原子问题的求解，原始问题到原子问题的划分方法，每级中调用递归方法。</p><div class="note info flat"><p>上面递归求数组最大值中中间值mid用 <code>mid = start + ((end-start) &gt;&gt; 2)</code> 的方式其实相当于 <code>mid=start+(end-start)/2</code> ，而采用此方式是为了避免直接使用 <code>mid=(start+end)/2</code> 当 <code>start</code> , <code>end</code> 值过大时可能造成的溢出问题。</p></div><h3 id="归并排序原理和实现"><a href="#归并排序原理和实现" class="headerlink" title="归并排序原理和实现"></a>归并排序原理和实现</h3><ol><li>排序原理</li></ol><ul><li>归并排序主要使用了递归的思路</li><li>排序过程就是将要排序的部分划分为等分的左右两段，分别对两段进行归并排序，构成递归基本要求中的分段</li><li>在每级递归将排好序的两段合并，构成递归基本要求中的问题求解</li><li>同时还要定义原子问题的处理方式</li></ul><ol start="2"><li><p>代码实现</p><figure class="highlight java"><figcaption><span>归并排序Java实现</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sort_MergeSort</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mergeSort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> L, <span class="type">int</span> R)</span> &#123;<span class="comment">// 归并排序，数组arr从L到R区间</span></span><br><span class="line"><span class="keyword">if</span>(L==R) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="variable">M</span> <span class="operator">=</span> L + ((R-L)&gt;&gt;<span class="number">2</span>);<span class="comment">// 中间index，二分归并排序</span></span><br><span class="line">mergeSort(arr, L, M);</span><br><span class="line">mergeSort(arr, M+<span class="number">1</span>, R);</span><br><span class="line">merge(arr, L, M, R);<span class="comment">// 排好序的左边和排好序的右边合并</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> L, <span class="type">int</span> M, <span class="type">int</span> R)</span> &#123;<span class="comment">// 排好序的左边和排好序的右边合并</span></span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> R-L+<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span>[] temp = <span class="keyword">new</span> <span class="title class_">int</span>[len]; <span class="comment">// 辅助数组，长度同要排序的区间长度</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">// 辅助数组中的指针，指向要放置的位置</span></span><br><span class="line"><span class="type">int</span> <span class="variable">leftPointer</span> <span class="operator">=</span> L;<span class="comment">// 定义一个左指针起始时指向左边区间起点</span></span><br><span class="line"><span class="type">int</span> <span class="variable">rightPointer</span> <span class="operator">=</span> M+<span class="number">1</span>; <span class="comment">// 定义一个右指针起始时指向右边区间起点</span></span><br><span class="line"><span class="keyword">while</span>(leftPointer&lt;=M &amp;&amp; rightPointer&lt;=R) &#123;<span class="comment">// 指针都没有超出两边区间时哪边小那边放在辅助数组里，并且指针后移</span></span><br><span class="line">temp[i++] = (arr[leftPointer] &lt;= arr[rightPointer]) ? arr[leftPointer++] : arr[rightPointer++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(rightPointer&lt;=R) &#123;<span class="comment">// 左边指针超界了说明左边区间已经放置完成了，则将右侧区间依次放入辅助数组</span></span><br><span class="line">temp[i++] = arr[rightPointer++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(leftPointer&lt;=M) &#123;<span class="comment">// 右边指针超界了说明右边区间已经放置完成了，则将左侧区间依次放入辅助数组</span></span><br><span class="line">temp[i++] = arr[leftPointer++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将辅助数组赋值给原数组待排序区间</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;len; i++) &#123;</span><br><span class="line">arr[i+L] = temp[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] array = &#123;<span class="number">2</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">2</span>&#125;;</span><br><span class="line">mergeSort(array, <span class="number">0</span> , array.length-<span class="number">1</span>);</span><br><span class="line">System.out.println(Arrays.toString(array));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>性能分析<br>归并排序采用递归的方式完成，时间复杂度应按照<a href="#%E9%80%92%E5%BD%92%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6">递归时间复杂度计算方法</a>来计算，为 <code>O(N*logN)</code>，空间复杂度是 <code>O(N)</code>，因为在将排好序的两段合并时利用了与待排序部分等长的辅助数组</p></li></ol><h3 id="拓展-小数求和"><a href="#拓展-小数求和" class="headerlink" title="拓展-小数求和"></a>拓展-小数求和</h3><p>题目：一个数组中，一个元素左边所有比该元素小的元素称为该元素的小数，每个元素的小数求和成为该数组的小数和，要求设计一个求数组小数和的方法。<br>解决思路：当然可以采用遍历的方式对每个元素求小数和，最后汇总，我们在这里思考如何利用归并思想来解决此题目降低时间复杂度，这里我提供两种思路</p><ol><li>利用归并排序中的递归思想</li><li>利用归并排序中的排序和递归思想<br>下面是我自己的实现代码，两种实现方式的代码差别仅在于 <code>merge()</code> 部分实现方式不同，下面代码中 <code>merge1()</code> 对应思路1， <code>merge2()</code> 对应思路2<figure class="highlight java"><figcaption><span>递归排序求小数和</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Merge_smallNum</span> &#123;<span class="comment">// 求小数和</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">smallNum</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> L, <span class="type">int</span> R)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(L==R) &#123;<span class="comment">// 叶子节点处理</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="variable">M</span> <span class="operator">=</span> L+((R-L)&gt;&gt;<span class="number">2</span>);<span class="comment">// 中点</span></span><br><span class="line"><span class="comment">//return smallNum(arr, L, M)+smallNum(arr, M+1, R)+merge1(arr, L, M, R);// 在归并过程中通过遍历完成小数求和</span></span><br><span class="line"><span class="keyword">return</span> smallNum(arr, L, M)+smallNum(arr, M+<span class="number">1</span>, R)+merge2(arr, L, M, R);<span class="comment">// 在归并过程中通过下标完成小数求和</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// merge1通过在归并过程中遍历求和，merge2通过在归并过程中同时进行排序并用下标计算小数求和</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">merge1</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> L, <span class="type">int</span> M, <span class="type">int</span> R)</span> &#123;<span class="comment">// 左右两部分无序，通过遍历方式</span></span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> pl= L;</span><br><span class="line"><span class="type">int</span> <span class="variable">pr</span> <span class="operator">=</span> M+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(pr&lt;=R) &#123;</span><br><span class="line"><span class="keyword">while</span>(pl&lt;=M) &#123;</span><br><span class="line">temp += (arr[pl]&lt;arr[pr]) ? arr[pl] : <span class="number">0</span>;<span class="comment">// 注意此处要严格 &lt; ，而不是归并排序中&lt;或&lt;=的情况</span></span><br><span class="line">pl++;</span><br><span class="line">&#125;</span><br><span class="line">pr++;</span><br><span class="line">pl=L;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">merge2</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> L, <span class="type">int</span> M, <span class="type">int</span> R)</span> &#123;<span class="comment">// 左右两部分有序，通过下标</span></span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> helper[] = <span class="keyword">new</span> <span class="title class_">int</span>[R-L+<span class="number">1</span>];<span class="comment">// 用来归并排序的辅助数组</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">pl</span> <span class="operator">=</span> L;<span class="comment">// 左指针指向左区间最左边</span></span><br><span class="line"><span class="type">int</span> <span class="variable">pr</span> <span class="operator">=</span> M+<span class="number">1</span>;<span class="comment">// 右指针指向有区间最左边</span></span><br><span class="line"><span class="keyword">while</span>(pl&lt;=M &amp;&amp; pr&lt;=R) &#123;</span><br><span class="line">            <span class="comment">// helper[i++] = (arr[pl] &lt;= arr[pr]) ? arr[pl++] : arr[pr++];// 原归并排序的内容</span></span><br><span class="line"><span class="comment">// 注意此处要严格 &lt; ，而不是归并排序中&lt;或&lt;=的情况</span></span><br><span class="line">temp += (arr[pl] &lt; arr[pr]) ? arr[pl]*(R-pr+<span class="number">1</span>) : <span class="number">0</span>;</span><br><span class="line">helper[i++] = (arr[pl] &lt; arr[pr]) ? arr[pl++] : arr[pr++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(pl&lt;=M) &#123;</span><br><span class="line">helper[i++] = arr[pl++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(pr&lt;=R) &#123;</span><br><span class="line">helper[i++] = arr[pr++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;helper.length; i++) &#123;</span><br><span class="line">arr[i+L] = helper[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] array = &#123;<span class="number">2</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">2</span>&#125;;</span><br><span class="line">System.out.println(smallNum(array, <span class="number">0</span>, array.length-<span class="number">1</span>));</span><br><span class="line">System.out.println(Arrays.toString(array));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>思路1利用了归并排序中的递归思想，并没有对数组进行排序，只是在递归部分将原来的排序改成了小数求和<br>思路2利用了归并排序中的递归思想同时也对数组进行了排序，并且递归部分的小数求和也用到了排好的顺序，小数求和部分直接用下标差计算小数求和，而不是遍历，但相对遍历方法多了对数组的排序操作</li></ol><h3 id="拓展-求逆序对"><a href="#拓展-求逆序对" class="headerlink" title="拓展-求逆序对"></a>拓展-求逆序对</h3><p>题目：一个数组中，左边元素如果比右边元素大，则这俩元素组成一个逆序对，要求打印所有逆序对。<br>解决思路：同样采用遍历的方式也是可行的，我们在这里思考如何利用归并思想来解决此题目降低时间复杂度，同上面求小数和类似，在原归并排序的基础上添加求逆序对的部分即可，<em><strong>注意逆序对题目要求左边比右边大，所有排序应该为从大到小排序</strong></em></p><figure class="highlight java"><figcaption><span>归并排序求逆序对</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Merge_InversePair</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">inversePair</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> L, <span class="type">int</span> R)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(L==R) &#123;<span class="comment">// 原子问题的处理</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="variable">M</span> <span class="operator">=</span> L + ((R-L)&gt;&gt;<span class="number">2</span>);<span class="comment">// 中间点</span></span><br><span class="line">inversePair(arr, L, M);</span><br><span class="line">inversePair(arr, M+<span class="number">1</span>, R);</span><br><span class="line">merge(arr, L, M, R);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> L, <span class="type">int</span> M, <span class="type">int</span> R)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] helper = <span class="keyword">new</span> <span class="title class_">int</span>[R-L+<span class="number">1</span>];<span class="comment">// 归并的辅助数组</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">pl</span> <span class="operator">=</span> L;</span><br><span class="line"><span class="type">int</span> <span class="variable">pr</span> <span class="operator">=</span> M+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(pl &lt;= M &amp;&amp; pr &lt;= R) &#123;</span><br><span class="line"><span class="keyword">if</span>(arr[pl] &gt; arr[pr]) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;(R-pr+<span class="number">1</span>);j++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;&lt;&quot;</span>+arr[pl]+<span class="string">&quot;-&quot;</span>+arr[pr+j]+<span class="string">&quot;&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">helper[i++] = (arr[pl] &gt; arr[pr]) ? arr[pl++] : arr[pr++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(pl&lt;=M) &#123;</span><br><span class="line">helper[i++] = arr[pl++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(pr&lt;=R) &#123;</span><br><span class="line">helper[i++] = arr[pr++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i&lt;helper.length; i++) &#123;</span><br><span class="line">arr[L+i] = helper[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] array = &#123;<span class="number">2</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">2</span>&#125;;</span><br><span class="line">inversePair(array, <span class="number">0</span>, array.length-<span class="number">1</span>);</span><br><span class="line">System.out.println(Arrays.toString(array));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>快速排序，常称为快排，在介绍快排之前，先通过<code>荷兰国旗问题</code>引入一种排序思路</p><h3 id="荷兰国旗问题"><a href="#荷兰国旗问题" class="headerlink" title="荷兰国旗问题"></a>荷兰国旗问题</h3><p><code>荷兰国旗问题1.0</code>：给一个阈值，将数组中数按照左边数都小于或等于阈值，右边数都大于阈值重新排列，要求时间复杂度O(N)<br><code>荷兰国旗问题2.0</code>：给一个阈值，将数组中数划分为三部分，从左至右依次为小于区，等于区，大于区，要求时间复杂度O(N)<br>这里提供一种荷兰国旗问题的求解思路：将数组看成三部分，小于区在左，大于区在右，中间是等于区，用两个指针分别指向小于区的最右端，大于区的最左端，如此便能将三个区域定位并划分，然后用第三个指针指向要检验的数，从最左边开始依次向右，根据比较结果将元素分配到对应区域，下面是一种实现方式：</p><figure class="highlight java"><figcaption><span>荷兰国旗问题</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DutchFlagProblem</span> &#123;</span><br><span class="line"><span class="comment">// 简化荷兰国旗问题，要求阈值左边是小于或等于阈值，右边是大于阈值即可</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dutchFlag1</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> threshold)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">pl</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">// 定义一个指向小于等于区域的指针，起始为区间最左侧</span></span><br><span class="line"><span class="type">int</span> <span class="variable">pr</span> <span class="operator">=</span> arr.length-<span class="number">1</span>;<span class="comment">// 定义一个大于区域的指针，起始为区间最右侧</span></span><br><span class="line"><span class="keyword">while</span>(pl&lt;pr) &#123;<span class="comment">// 当pl=pr时就将数组中所有元素都和阈值比较过了，因此这里不取到等号</span></span><br><span class="line"><span class="keyword">if</span>(arr[pl]&lt;=threshold) &#123;<span class="comment">// 比较元素满足小于等于阈值</span></span><br><span class="line">pl++;<span class="comment">// 落在小于等于区域时，直接将小于等于区域指针后移</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;<span class="comment">// 比较元素满足大于阈值</span></span><br><span class="line">swap(arr, pl, pr);<span class="comment">// 落在大于区域时，将大于区域指针同当前元素交换位置</span></span><br><span class="line">pr--;<span class="comment">// 让大于区域指针前移,原来的大于区域指针指向的位置已经被大于阈值的元素占据</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 原版的荷兰国旗问题，与简化版差别在于要求等于阈值的元素要位于小于区域和大于区域的中间</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dutchFlag2</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> threshold)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">pl</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">pr</span> <span class="operator">=</span> arr.length-<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">equalCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(pl&lt;pr-equalCount) &#123;</span><br><span class="line"><span class="keyword">if</span>(arr[pl]&lt;threshold) &#123;</span><br><span class="line">pl++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(arr[pl] == threshold) &#123;</span><br><span class="line">swap(arr, pl, pr-equalCount++);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;<span class="comment">// 实现方式上完整的荷兰国旗问题同简化版相比多了相等区域，因此当出现大于阈值时，要通过两次swap完成</span></span><br><span class="line">swap(arr, pr, pr-equalCount);<span class="comment">// 第一次swap将相等区域最右端的元素前移到相等区域最左端，给新的大于区域留出位置</span></span><br><span class="line">swap(arr, pl, pr--);<span class="comment">// 大于元素放置在刚留出的位置</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(pl == pr-equalCount) &#123;<span class="comment">// 这里多加个判断是为了避免两次交换时将pl位置的元素转移了</span></span><br><span class="line"><span class="keyword">if</span>(arr[pl]&gt;threshold) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[pl];</span><br><span class="line">swap(arr, pr, pr-equalCount);</span><br><span class="line">arr[pr] = temp;</span><br><span class="line">&#125;</span><br><span class="line">pl++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">arr[i] = arr[j];</span><br><span class="line">arr[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] array = &#123;<span class="number">2</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="type">int</span> <span class="variable">threshold</span> <span class="operator">=</span> <span class="number">7</span>;</span><br><span class="line">dutchFlag1(array, threshold);</span><br><span class="line"><span class="comment">//dutchFlag2(array, threshold);</span></span><br><span class="line">System.out.println(Arrays.toString(array));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快排原理和实现"><a href="#快排原理和实现" class="headerlink" title="快排原理和实现"></a>快排原理和实现</h3><p>在解决 <code>荷兰国旗问题</code> 后我们看到了根据阈值划分数组的方法，那如果将此过程放在递归中，每一层递归中对区间进行大小划分，能否实现一种排序？<br>基于此思路实现的就是快速排序，快速排序中不再是指定一个阈值，而是采用数组的最后一个元素作为阈值，此元素不参与排序，在其余部分排好序后直接与大于区域第一位交换位置即可，快速排序也有多种实现方式</p><ol><li>每个区间只划分为小于等于区和大于区两个部分<figure class="highlight java"><figcaption><span>快排1.0</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sort_quickSort_1</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> L, <span class="type">int</span> R)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(L&gt;=R) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="variable">thresholdLine</span> <span class="operator">=</span> partition(arr, L, R);<span class="comment">// 一次partition将数组根据阈值分为左右两侧</span></span><br><span class="line">quickSort(arr, L, thresholdLine);</span><br><span class="line">quickSort(arr, thresholdLine+<span class="number">1</span>, R);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// partition部分将数组分为小于等于区域和大于区域</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">partition</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> L, <span class="type">int</span> R)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">threshold</span> <span class="operator">=</span> arr[R];<span class="comment">// 以区间最后一位为threshold,partition结束后与大于区域第一位交换位置</span></span><br><span class="line"><span class="type">int</span> <span class="variable">pointerSmall</span> <span class="operator">=</span> L-<span class="number">1</span>;<span class="comment">// pointerSmall指向小于区域第一个元素位置</span></span><br><span class="line"><span class="type">int</span> <span class="variable">pointer</span> <span class="operator">=</span> L;<span class="comment">// pointer指向当前要比较的元素位置</span></span><br><span class="line"><span class="keyword">while</span>(pointer &lt; R) &#123;<span class="comment">// threshold所在的最后一个元素不要参与比较,partition后会直接与大于区域第一个元素交换位置</span></span><br><span class="line"><span class="keyword">if</span>(arr[pointer] &lt;= threshold) &#123;</span><br><span class="line">swap(arr, pointer++, ++pointerSmall);<span class="comment">// 小于等于时与小于区域的下一个元素交换位置，指针后移</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">pointer++;<span class="comment">// 当前位置比threshold大时pointer直接后移</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">swap(arr, R, pointerSmall+<span class="number">1</span>);<span class="comment">// 数组最后一位即阈值与小于区域右边第一位交换位置</span></span><br><span class="line"><span class="keyword">return</span> pointerSmall;<span class="comment">// 返回小于区域的右边界</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">arr[i] = arr[j];</span><br><span class="line">arr[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] array = &#123;<span class="number">2</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">2</span>&#125;;</span><br><span class="line">quickSort(array, <span class="number">0</span>, array.length-<span class="number">1</span>);</span><br><span class="line">System.out.println(Arrays.toString(array));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>方式1只需要两个指针，一个指向小于等于区域最右端，另一个指向当前要检查的位置，小于等于区会推着大于区往后走</li><li>每个区间划分为小于区、等于区和大于区三部分<figure class="highlight java"><figcaption><span>快排2.0</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sort_quickSort_2</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> L, <span class="type">int</span> R)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(L&gt;=R) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span>[] thresholdLine = partition(arr, L, R);<span class="comment">// 一次partition将数组根据阈值分为左中右三部分</span></span><br><span class="line">quickSort(arr, L, thresholdLine[<span class="number">0</span>]);</span><br><span class="line">quickSort(arr, thresholdLine[<span class="number">1</span>], R);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// partition部分将数组分为小于区域、等于区域和大于区域</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] partition(<span class="type">int</span>[] arr, <span class="type">int</span> L, <span class="type">int</span> R) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">threshold</span> <span class="operator">=</span> arr[R];<span class="comment">// 以区间最后一位为threshold,partition结束后与大于区域第一位交换位置</span></span><br><span class="line"><span class="type">int</span> <span class="variable">pointerSmall</span> <span class="operator">=</span> L-<span class="number">1</span>;<span class="comment">// pointerSmall指向小于区域最右端</span></span><br><span class="line"><span class="type">int</span> <span class="variable">pointerBig</span> <span class="operator">=</span> R;<span class="comment">// pointerBig指向大于区域的最左端,因为使用最后一位作为threshold,因此初始化为R,而不是R+1</span></span><br><span class="line"><span class="type">int</span> <span class="variable">pointer</span> <span class="operator">=</span> L;<span class="comment">// pointer指向当前要比较的元素位置</span></span><br><span class="line"><span class="keyword">while</span>(pointer &lt; pointerBig) &#123;<span class="comment">// threshold所在的最后一个元素不要参与比较,partition后会直接与大于区域第一个元素交换位置</span></span><br><span class="line"><span class="keyword">if</span>(arr[pointer] &lt; threshold) &#123;</span><br><span class="line">swap(arr, pointer++, ++pointerSmall);<span class="comment">// 小于等于时与小于区域的下一个元素交换位置，指针后移</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(arr[pointer] &gt; threshold)&#123;</span><br><span class="line">swap(arr, pointer, --pointerBig);<span class="comment">// 当前位置比threshold大时pointer位置与pointerBig位置交换，pointerBig前移</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">pointer++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">swap(arr, R, pointerBig);<span class="comment">// 数组最后一位即阈值与小于区域右边第一位交换位置</span></span><br><span class="line"><span class="type">int</span>[] ret = &#123;pointerSmall, pointerBig&#125;;</span><br><span class="line"><span class="keyword">return</span> ret;<span class="comment">// 返回小于区域的右边界</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">arr[i] = arr[j];</span><br><span class="line">arr[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] array = &#123;<span class="number">2</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">2</span>&#125;;</span><br><span class="line">quickSort(array, <span class="number">0</span>, array.length-<span class="number">1</span>);</span><br><span class="line">System.out.println(Arrays.toString(array));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>方式2划分为三部分，就需要三个指针了，一个指向小于区最右位置，一个指向大于区最左位置，一个指向要检查的位置</li><li>在划分为三部分的基础上，选择随机元素作为阈值<figure class="highlight java"><figcaption><span>快排3.0</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sort_quickSort_3</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> L, <span class="type">int</span> R)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(L&gt;=R) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="variable">randomThre</span> <span class="operator">=</span> (<span class="type">int</span>)(Math.random()*(R-L+<span class="number">1</span>)+L);</span><br><span class="line">swap(arr, randomThre, R);<span class="comment">// 将随机的位置与最后一位交换，partition按照原来采用最后一位为threshold不变</span></span><br><span class="line"><span class="type">int</span>[] thresholdLine = partition(arr, L, R);<span class="comment">// 一次partition将数组根据阈值分为左中右三部分</span></span><br><span class="line">quickSort(arr, L, thresholdLine[<span class="number">0</span>]);</span><br><span class="line">quickSort(arr, thresholdLine[<span class="number">1</span>], R);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// partition部分将数组分为小于区域、等于区域和大于区域</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] partition(<span class="type">int</span>[] arr, <span class="type">int</span> L, <span class="type">int</span> R) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">threshold</span> <span class="operator">=</span> arr[R];<span class="comment">// 以区间最后一位为threshold,partition结束后与大于区域第一位交换位置</span></span><br><span class="line"><span class="type">int</span> <span class="variable">pointerSmall</span> <span class="operator">=</span> L-<span class="number">1</span>;<span class="comment">// pointerSmall指向小于区域最右端</span></span><br><span class="line"><span class="type">int</span> <span class="variable">pointerBig</span> <span class="operator">=</span> R;<span class="comment">// pointerBig指向大于区域的最左端,因为使用最后一位作为threshold,因此初始化为R,而不是R+1</span></span><br><span class="line"><span class="type">int</span> <span class="variable">pointer</span> <span class="operator">=</span> L;<span class="comment">// pointer指向当前要比较的元素位置</span></span><br><span class="line"><span class="keyword">while</span>(pointer &lt; pointerBig) &#123;<span class="comment">// threshold所在的最后一个元素不要参与比较,partition后会直接与大于区域第一个元素交换位置</span></span><br><span class="line"><span class="keyword">if</span>(arr[pointer] &lt; threshold) &#123;</span><br><span class="line">swap(arr, pointer++, ++pointerSmall);<span class="comment">// 小于等于时与小于区域的下一个元素交换位置，指针后移</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(arr[pointer] &gt; threshold)&#123;</span><br><span class="line">swap(arr, pointer, --pointerBig);<span class="comment">// 当前位置比threshold大时pointer位置与pointerBig位置交换，pointerBig前移</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">pointer++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">swap(arr, R, pointerBig);<span class="comment">// 数组最后一位即阈值与小于区域右边第一位交换位置</span></span><br><span class="line"><span class="type">int</span>[] ret = &#123;pointerSmall, pointerBig&#125;;</span><br><span class="line"><span class="keyword">return</span> ret;<span class="comment">// 返回小于区域的右边界</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">arr[i] = arr[j];</span><br><span class="line">arr[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] array = &#123;<span class="number">2</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">2</span>&#125;;</span><br><span class="line">quickSort(array, <span class="number">0</span>, array.length-<span class="number">1</span>);</span><br><span class="line">System.out.println(Arrays.toString(array));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>方式3是在方式2的基础上进行修改，<code>partition</code> 部分直接不变，只在选择阈值时变成随机选择一位，将此位与最后元素交换位置，其余处理同方式2相同</li></ol><h3 id="快排时间复杂度"><a href="#快排时间复杂度" class="headerlink" title="快排时间复杂度"></a>快排时间复杂度</h3><p>快排三种实现方式中，方式1和方式2都存在最差情况-逆序或顺序时时间复杂度为<code>O(N^2)</code>，而方式3随机选择阈值平均时间复杂度<code>O(N*logN)</code>，三种方式空间复杂度都是<code>O(logN)</code></p><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><h3 id="堆结构"><a href="#堆结构" class="headerlink" title="堆结构"></a>堆结构</h3><p>先了解堆结构，堆其实是一棵完全二叉树，他的每个节点都是所在子树的最大值<br><code>[完全二叉树]</code> 定义：</p><ol><li>除最后一层外，每层节点都被填满，即都具有左右子树</li><li>最后一层可以不满，但如果这一层具有子节点，则必须先填满左节点才能填右节点<br>我们用数组存储二叉树来举例：<br>非完全二叉树结构(不满足先左后右)：<figure class="highlight markdown"><figcaption><span>非完全二叉树举例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">数组: [0,1,2,3,4,5]</span><br><span class="line">非完全二叉树:</span><br><span class="line"><span class="code">           0</span></span><br><span class="line"><span class="code">          /\</span></span><br><span class="line"><span class="code">         1  2</span></span><br><span class="line"><span class="code">        /\   \</span></span><br><span class="line"><span class="code">       3 4    5</span></span><br><span class="line"><span class="code"></span></span><br></pre></td></tr></table></figure>完全二叉树结构:<figure class="highlight markdown"><figcaption><span>完全二叉树举例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">数组: [0,1,2,3,4,5]    [0,1,2,3,4]     [0,1,2,3,4,5,6]</span><br><span class="line">完全二叉树: </span><br><span class="line"><span class="code">            0               0                0</span></span><br><span class="line"><span class="code">           /\              /\               /\</span></span><br><span class="line"><span class="code">          1  2            1  2             1  2</span></span><br><span class="line"><span class="code">         /\ /            /\               /\  /\</span></span><br><span class="line"><span class="code">        3 4 5           3  4             3 4  5 6</span></span><br><span class="line"><span class="code">        </span></span><br></pre></td></tr></table></figure></li></ol><p>使用数组来作为堆结构时，如何表示父子节点对应关系？<br>如上图所示顺序对应数组的下标即可，同时有下面的下标计算方式表示父子节点对应关系：</p><ol><li>当前节点下标为 <code>i</code>，则左子节点下标为 <code>2*i+1</code>，右子节点下标为 <code>2*i+2</code></li><li>当前节点下标为 <code>i</code>，则父节点下标为 <code>(i-1)/2</code><br>tips: <code>(i-1)/2</code> 结果取整，因此通过左右节点下标计算父节点下标的方法一样<br>要设计一个堆结构，就必须包含多个操作堆的方法</li></ol><h4 id="上浮"><a href="#上浮" class="headerlink" title="上浮"></a>上浮</h4><p>以大顶堆为例，每个节点都是所在子树的最大值，当要修改或插入元素时就可能涉及上浮操作，即当前节点比父节点大则交换两者位置，直到不满足比父节点大或没有父节点(到达堆顶)时停止</p><figure class="highlight java"><figcaption><span>上浮</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上浮</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">heapInsert</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> index, <span class="type">int</span> heapSize)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span>(arr[index] &gt; arr[(index-<span class="number">1</span>)/<span class="number">2</span>]) &#123;<span class="comment">// 当本节点大于父节点交换位置</span></span><br><span class="line">        swap(arr, index, (index-<span class="number">1</span>)/<span class="number">2</span>);</span><br><span class="line">        index = (index-<span class="number">1</span>)/<span class="number">2</span>;<span class="comment">// 更新位置</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="下沉"><a href="#下沉" class="headerlink" title="下沉"></a>下沉</h4><p>以大顶堆为例，当要修改或插入元素时可能涉及下沉操作，即当前节点比孩子节点小时与孩子节点交换位置，直到不满足比孩子小或没有孩子节点为止</p><figure class="highlight java"><figcaption><span>下沉</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下沉</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">heapify</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> index, <span class="type">int</span> heapSize)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">2</span>*index+<span class="number">1</span> &lt; heapSize) &#123;<span class="comment">// 有孩子时才能进行heapify</span></span><br><span class="line">        <span class="comment">// 记录大孩子位置有右孩子且比左孩子大时maxChild为右孩子，否则为左孩子</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">maxChild</span> <span class="operator">=</span> ((<span class="number">2</span>*index+<span class="number">2</span> &lt; heapSize) &amp;&amp; (arr[<span class="number">2</span>*index+<span class="number">1</span>] &lt; arr[<span class="number">2</span>*index+<span class="number">2</span>])) ? <span class="number">2</span>*index+<span class="number">2</span> : <span class="number">2</span>*index+<span class="number">1</span>;</span><br><span class="line">        maxChild = arr[index] &gt; arr[maxChild] ? index : maxChild;<span class="comment">// 本节点与大孩子比出谁更大</span></span><br><span class="line">        <span class="keyword">if</span>(maxChild == index) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(arr, index, maxChild);<span class="comment">// 当前节点比大孩子小则交换位置下沉</span></span><br><span class="line">        index = maxChild;<span class="comment">// 更新位置</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="堆排序原理和实现"><a href="#堆排序原理和实现" class="headerlink" title="堆排序原理和实现"></a>堆排序原理和实现</h3><p>在掌握堆结构后实现堆排序就非常简单，将数组中元素添加进堆中，逐一弹出最值并更新堆，弹出的值就能构成有序数组，例如下面的从小到大的堆排序：</p><figure class="highlight java"><figcaption><span>堆排序示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sort_HeapSort</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 堆排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">heapSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">heapSize</span> <span class="operator">=</span> arr.length;<span class="comment">// 堆的大小</span></span><br><span class="line"><span class="comment">// 倒序对每个元素heapify完成数组到大顶堆的转换，实际上叶子节点的heapify是没有操作的</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> heapSize-<span class="number">1</span>; i &gt;= <span class="number">0</span>;i--) &#123;</span><br><span class="line">heapify(arr, i, arr.length);</span><br><span class="line">&#125;</span><br><span class="line">swap(arr, --heapSize, <span class="number">0</span>);<span class="comment">// 保存堆顶元素即最大值，到数组末尾</span></span><br><span class="line"><span class="keyword">while</span>(heapSize &gt; <span class="number">0</span>) &#123;</span><br><span class="line">heapify(arr, <span class="number">0</span>, heapSize);<span class="comment">// 更新堆，产生新的最大值在堆顶</span></span><br><span class="line">swap(arr, --heapSize, <span class="number">0</span>);<span class="comment">// 将堆末尾元素移到堆顶后，堆缩小</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上浮</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">heapInsert</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> index, <span class="type">int</span> heapSize)</span> &#123;</span><br><span class="line"><span class="keyword">while</span>(arr[index] &gt; arr[(index-<span class="number">1</span>)/<span class="number">2</span>]) &#123;<span class="comment">// 当本节点大于父节点交换位置</span></span><br><span class="line">swap(arr, index, (index-<span class="number">1</span>)/<span class="number">2</span>);</span><br><span class="line">index = (index-<span class="number">1</span>)/<span class="number">2</span>;<span class="comment">// 更新位置</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下沉</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">heapify</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> index, <span class="type">int</span> heapSize)</span> &#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">2</span>*index+<span class="number">1</span> &lt; heapSize) &#123;<span class="comment">// 有孩子时才能进行heapify</span></span><br><span class="line"><span class="comment">// 记录大孩子位置有右孩子且比左孩子大时maxChild为右孩子，否则为左孩子</span></span><br><span class="line"><span class="type">int</span> <span class="variable">maxChild</span> <span class="operator">=</span> ((<span class="number">2</span>*index+<span class="number">2</span> &lt; heapSize) &amp;&amp; (arr[<span class="number">2</span>*index+<span class="number">1</span>] &lt; arr[<span class="number">2</span>*index+<span class="number">2</span>])) ? <span class="number">2</span>*index+<span class="number">2</span> : <span class="number">2</span>*index+<span class="number">1</span>;</span><br><span class="line">maxChild = arr[index] &gt; arr[maxChild] ? index : maxChild;<span class="comment">// 本节点与大孩子比出谁更大</span></span><br><span class="line"><span class="keyword">if</span>(maxChild == index) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">swap(arr, index, maxChild);<span class="comment">// 当前节点比大孩子小则交换位置下沉</span></span><br><span class="line">index = maxChild;<span class="comment">// 更新位置</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">arr[i] = arr[j];</span><br><span class="line">arr[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] array = &#123;<span class="number">2</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">2</span>&#125;;</span><br><span class="line">heapSort(array);</span><br><span class="line">System.out.println(Arrays.toString(array));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PriorityQueue"><a href="#PriorityQueue" class="headerlink" title="PriorityQueue"></a>PriorityQueue</h3><p><code>PriorityQueue</code> 是java语言中提供的一种容器，其实现方式就是堆，对外提供添加元素的 <code>add()</code> 方法和弹出堆顶元素的 <code>poll()</code> 方法等。<br><code>PriorityQueue</code> 默认创建的是小顶堆，通过 <code>add()</code> 方法添加新元素后会更新堆，维护小顶堆的排列。<br>在功能需求简单的场景就可以利用编程语言自带的堆结构，当有特定的自带数据结构无法解决的需求时再自定义堆结构。<br>各个不同编程语言中基本都有这种自带的数据结构，如果没有使用的时候就必须自定义堆结构了。<br>例如在下面场景中就可以不自定义堆结构，而是直接使用现成的<code>PriorityQueue</code>解决问题：<br><em>题目： 已知未排序的数组中每个元素到正确位置的距离最大为k,对这样的数组采用一个合适的排序算法</em></p><figure class="highlight java"><figcaption><span>自带堆结构的使用</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Heap_SortedDistanceK</span> &#123;</span><br><span class="line"><span class="comment">// 已知未排序的数组中每个元素到正确位置的距离最大为k,对这样的数组采用一个合适的排序算法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">heapSort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> k)</span> &#123;</span><br><span class="line"><span class="comment">// 没有特殊需求可直接使用java中提供的优先队列结构，优先队列的底层实现就是堆</span></span><br><span class="line">PriorityQueue&lt;Integer&gt; heap = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;Integer&gt;();<span class="comment">// 默认为小顶堆</span></span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(; index &lt; Math.min(arr.length, k); index++) &#123;<span class="comment">// 将前k个数放入堆中</span></span><br><span class="line">heap.add(arr[index]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(; index&lt;arr.length; index++, i++) &#123;</span><br><span class="line">heap.add(arr[index]);<span class="comment">// 小顶堆大小维持在k+1保证一定能找到一个真实最小的元素</span></span><br><span class="line">arr[i] = heap.poll();<span class="comment">// 将选出的最小值放在滑动窗口最前端后，窗口向后滑动</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!heap.isEmpty()) &#123;</span><br><span class="line">arr[i++] = heap.poll();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">arr[i] = arr[j];</span><br><span class="line">arr[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] array = &#123;<span class="number">2</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">2</span>&#125;;</span><br><span class="line">heapSort(array, <span class="number">8</span>);</span><br><span class="line">System.out.println(Arrays.toString(array));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其他排序"><a href="#其他排序" class="headerlink" title="其他排序"></a>其他排序</h2><p>之前介绍的排序算法都是基于比较的排序算法，也存在不基于比较的排序算法，这类排序方法一般都需要根据数据状况定制排序算法，例如计数排序、基数排序</p><h3 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h3><ol><li>排序原理：遍历数据，统计出现的频率保存在对应位的数组中</li><li>代码实现<figure class="highlight java"><figcaption><span>计数排序</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sort_CountSort</span> &#123;</span><br><span class="line"><span class="comment">// 计数排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">countSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">maxNum</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line"><span class="type">int</span> <span class="variable">minNum</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line"><span class="comment">// 找到数组中最大的和最小的值</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">maxNum = Math.max(maxNum, arr[i]);</span><br><span class="line">minNum = Math.min(minNum, arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(maxNum == minNum) &#123;<span class="comment">// 数组中数全部相等</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span>[] helper = <span class="keyword">new</span> <span class="title class_">int</span>[maxNum-minNum+<span class="number">1</span>];<span class="comment">// 辅助数组,用于统计词频</span></span><br><span class="line"><span class="comment">// 词频统计</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">helper[arr[i]-minNum]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; helper.length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; helper[i]; j++) &#123;</span><br><span class="line">arr[index++] = i+minNum;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] array = &#123;<span class="number">2</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">2</span>&#125;;</span><br><span class="line">countSort(array);</span><br><span class="line">System.out.println(Arrays.toString(array));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3><ol><li><p>排序原理：基数排序是利用基数数量的桶依次统计每个位的词频，对每个位单独排序的排序方式，步骤如下：</p><blockquote><ol><li>找到要排序的数中最大值</li><li>得到最大值的位数，作为入桶出通的次数</li><li>对所有数的个位统计出现的频率</li><li>将统计的结果数组变成累加数组</li><li>从右向左根据累加数组将原数组分配到辅助数组中</li><li>进行完<code>步骤3</code>后辅助数组中就是按个位排好序的数组，辅助数组替换原数组</li><li>依次对十位、百位等进行<code>1~4</code>步骤</li></ol></blockquote></li><li><p>代码实现</p><figure class="highlight java"><figcaption><span>基数排序</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sort_RadixSort</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">radixSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(arr==<span class="literal">null</span> || arr.length==<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="variable">radix</span> <span class="operator">=</span> <span class="number">10</span>;<span class="comment">// 十进制基数就是10，8进制基数就是8</span></span><br><span class="line"><span class="type">int</span> <span class="variable">maxWidth</span> <span class="operator">=</span> getWidth(arr, radix);<span class="comment">// 得到所有数中最大值的位数,即入桶出通的次数</span></span><br><span class="line"><span class="type">int</span>[] helper = <span class="keyword">new</span> <span class="title class_">int</span>[arr.length];<span class="comment">// 辅助数组长度与原数组相同,负责保存每轮入桶出桶后的新顺序结果</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; maxWidth; i++) &#123;<span class="comment">// 进行maxWidth次入桶和maxWidth次出桶</span></span><br><span class="line"><span class="type">int</span>[] bucket = <span class="keyword">new</span> <span class="title class_">int</span>[radix];<span class="comment">// bucket桶的大小与基数相同,用来统计数字出现频率</span></span><br><span class="line"><span class="comment">// 遍历数组统计本位的词频，入桶</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">bucket[getBitValue(arr[j], radix, i)]++;<span class="comment">// 例：count[2]=3 表示所有数中此位为2的有3个</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将词频数组变成词频累计数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">bucket[j] = bucket[j] + bucket[j-<span class="number">1</span>];<span class="comment">// 例：count[2]=3 表示所有数中此位小于等于2的数有3个</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 出桶,从右向左依次进行</span></span><br><span class="line"><span class="type">int</span> <span class="variable">currentBit</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> arr.length-<span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">currentBit = getBitValue(arr[j], radix, i);<span class="comment">// 当前数的当前位</span></span><br><span class="line">helper[bucket[currentBit]-<span class="number">1</span>] = arr[j];<span class="comment">// count[currentBit]表示所有数中这个位比currentBit小的数有多少个</span></span><br><span class="line">bucket[currentBit]--;<span class="comment">// 更新count[]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 从左向右依次更新</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j&lt;helper.length; j++) &#123;</span><br><span class="line">arr[j] = helper[j];<span class="comment">// 将辅助数组中的数倒出来就是排好的顺序</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 得到数组中最大值的位数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getWidth</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> radix)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">maxNum</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class="line">maxNum = Math.max(maxNum, arr[i]);<span class="comment">// 得到数组最大值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 计算最大值的位数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(maxNum!=<span class="number">0</span>) &#123;</span><br><span class="line">j++;</span><br><span class="line">maxNum = maxNum/radix;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 得到指定数某位的值</span></span><br><span class="line"><span class="comment">// digit为0,1,2...分别代表个位、十位、百位...</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getBitValue</span><span class="params">(<span class="type">int</span> num, <span class="type">int</span> radix, <span class="type">int</span> digit)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(digit-- &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">value = num % radix;</span><br><span class="line">num = num / radix;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] array = &#123;<span class="number">2</span>,<span class="number">17</span>,<span class="number">9</span>,<span class="number">311</span>,<span class="number">2</span>,<span class="number">21</span>,<span class="number">324</span>,<span class="number">73</span>,<span class="number">0</span>,<span class="number">2</span>&#125;;</span><br><span class="line">radixSort(array);</span><br><span class="line">System.out.println(Arrays.toString(array));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="异或运算"><a href="#异或运算" class="headerlink" title="异或运算"></a>异或运算</h2><p>异或运算，运算符号 <code>^</code> ，在交换元素位置时能发挥的作用<br>异或运算的定义：</p><ul><li>两个数异或，不同为<code>1</code>，相同为<code>0</code></li><li>异或运算可理解为无进位的相加<br>异或运算的性质：</li><li><code>0^N</code>&#x3D;<code>N</code>, <code>N^N</code>&#x3D;<code>0</code></li><li>异或具备交换律和结合律</li></ul><h3 id="异或运算实现swap"><a href="#异或运算实现swap" class="headerlink" title="异或运算实现swap()"></a>异或运算实现<code>swap()</code></h3><p>根据上面异或运算的性质就可以得到交换元素位置函数 <code>swap()</code> 可以用下面代码实现：</p><figure class="highlight java"><figcaption><span>异或运算实现两元素交换位置</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;</span><br><span class="line">    arr[i] = arr[i] ^ arr[j];</span><br><span class="line">    arr[j] = arr[i] ^ arr[j];   <span class="comment">// 此时实现了 arr[j] = arr[i]</span></span><br><span class="line">    arr[i] = arr[i] ^ arr[j];   <span class="comment">// 此时实现了 arr[i] = arr[j]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>异或实现的 <code>swap()</code> 看着逼格满满，但是要注意此种方式不能将两个内存指向相同的元素交换位置，否则会将原来的数据洗成 <code>0</code>，例如数组中不能将 <code>arr[1]</code> 和 <code>arr[1]</code> 交换，因此使用此方法的前提就是保证参数 <code>i</code> 和 <code>j</code> 不相等。这是一种很取巧的方法，因为有限制条件所以一般不建议这样做</p></div><h3 id="异或运算找到奇数次数"><a href="#异或运算找到奇数次数" class="headerlink" title="异或运算找到奇数次数"></a>异或运算找到奇数次数</h3><p>这样一个题目用异或运算可以更快速得到解答</p><ol><li>题目1：数组 <code>arr[]</code> 中一个数出现了奇数次，其他数都出现了偶数次，找到出现奇数次的数，要求时间复杂度 <code>O(N)</code> ，空间复杂度 <code>O(1)</code>.<figure class="highlight java"><figcaption><span>异或运算找到出现奇数次的数</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrOperation</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">findOddTimesNum</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> item : arr) &#123;</span><br><span class="line">temp ^= item;<span class="comment">// 将数组中所有元素异或</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(temp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] array = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>&#125;;<span class="comment">// 一个数出现奇数次，其他数都各出现偶数次</span></span><br><span class="line">findOddTimesNum(array);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><em>分析：出现偶数次的数异或结果为 <code>0</code>，<code>0^N = N</code>，因此将数组中所有元素异或就能得到出现奇数次的那个数</em></li><li>题目2：数组 <code>arr[]</code> 中两个数各自出现了奇数次，其他数都出现了偶数次，找到所有出现奇数次的数，要求时间复杂度 <code>O(N)</code> ，空间复杂度 <code>O(1)</code>.<figure class="highlight java"><figcaption><span>异或运算找到两个出现奇数次的数</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrOperation</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">findOddTimesTwoNums</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line"><span class="comment">// 将数组中所有元素异或，得到两个出现奇数次的数a、b的异或结果a^b</span></span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> item : arr) &#123;</span><br><span class="line">temp ^= item;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// a不等于b，否则就不是出现奇数次了，因此a^b结果必不为0</span></span><br><span class="line"><span class="comment">// a和b至少有一位是不同的</span></span><br><span class="line"><span class="comment">// 找到a^b结果中最右边为1的位，例如10010最右边的位的位置就是00010，使用`00010&amp;N`就能提取出数N的那个位的值</span></span><br><span class="line"><span class="comment">// filter就是上述的位置提取器</span></span><br><span class="line"><span class="type">int</span> <span class="variable">filter</span> <span class="operator">=</span> temp &amp; (~temp + <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 将a^b的结果与那一位也为1的数异或，得到的结果aORb就是a或者b</span></span><br><span class="line"><span class="type">int</span> <span class="variable">aORb</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> item : arr) &#123;</span><br><span class="line"><span class="keyword">if</span>((item &amp; filter) == <span class="number">0</span>) &#123;<span class="comment">// item同filter与运算后结果等于0说明筛选的位为0</span></span><br><span class="line">aORb ^= item;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将a^b的结果temp与aORb的结果异或就得到了另一个出现奇数次的数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">anotherNum</span> <span class="operator">=</span> temp ^ aORb;</span><br><span class="line">System.out.println(aORb+<span class="string">&quot; &quot;</span>+anotherNum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] array2 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">7</span>&#125;;<span class="comment">// 一个数出现奇数次，其他数都各出现偶数次</span></span><br><span class="line">findOddTimesTwoNums(array2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><em>分析：要找出两个出现奇数次的数难点在于如何将 <code>a</code> 、 <code>b</code> 从 <code>a^b</code> 中分离出来，上述方法中利用了以下几点：</em></li><li><em><code>a</code>、<code>b</code>两数不相等，因此<code>a^b</code>不为0，必有一个位为 <code>1</code></em></li><li><em><code>a^b</code>为 <code>1</code>的那个位上<code>a</code>、<code>b</code>的值不相等，因此arr中所有那个位为<code>1</code>的数异或的结果就是<code>a</code>或者<code>b</code></em></li><li><em>将 <code>a^b</code> 的值与<code>a</code>或者<code>b</code>的值异或就能得到另一个数的值</em></li></ol><h2 id="排序算法的稳定性"><a href="#排序算法的稳定性" class="headerlink" title="排序算法的稳定性"></a>排序算法的稳定性</h2><p>同样值的个体不因为排序而改变原来的次序称此排序算法具有稳定性<br>具有稳定性的排序算法：冒泡、插入、归并、一切桶排序思想下的排序<br>不具有稳定性的排序算法：选择排序，快速排序，堆排序<br>具有稳定性的算法能保证在二次排序时在排序的内部保留一次排序的顺序，举个例子：<br>给班级学生按照年龄排序后再根据班级排序，如果采用的是具有稳定性的算法，则排序的结果中同一班级的学生会以年龄排序，达到了保留一次排序的效果</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><table><thead><tr><th>排序算法</th><th>时间复杂度</th><th>额外空间复杂度</th><th>稳定性</th></tr></thead><tbody><tr><td>选择排序</td><td><code>O(N^2)</code></td><td><code>O(1)</code></td><td><code>×</code></td></tr><tr><td>冒泡排序</td><td><code>O(N^2)</code></td><td><code>O(1)</code></td><td><code>√</code></td></tr><tr><td>插入排序</td><td><code>O(N^2)</code></td><td><code>O(1)</code></td><td><code>√</code></td></tr><tr><td>归并排序</td><td><code>O(N*logN)</code></td><td><code>O(N)</code></td><td><code>√</code></td></tr><tr><td>快速(随机)排序</td><td><code>O(N*logN)</code></td><td><code>O(logN)</code></td><td><code>×</code></td></tr><tr><td>堆排序</td><td><code>O(N*logN)</code></td><td><code>O(1)</code></td><td><code>×</code></td></tr></tbody></table><div class="note info flat"><p>一般我们都采用快速(随机)排序算法，它的时间复杂度经过实际验证是归并排序、快速(随机)排序、堆排序中常数项最小的一种排序算法；<br>如果对空间复杂度要求比较严格就采用堆排序，空间复杂度只有<code>O(1)</code>；<br>如果对排序算法的稳定性有要求就采用归并排序，在保证时间复杂度为<code>O(N*logN)</code>的同时还具有稳定性；<br>可以说这三种排序算法各有优势和缺陷，实际使用中应根据场合选择。<br>目前还没有找到基于比较的排序算法时间复杂度小于<code>O(N*logN)</code>。<br>目前还没有找到时间复杂度<code>O(N*logN)</code>额外空间复杂度<code>O(1)</code>，又稳定的排序算法。</p></div><h2 id="工程上的改进"><a href="#工程上的改进" class="headerlink" title="工程上的改进"></a>工程上的改进</h2><h3 id="综合排序"><a href="#综合排序" class="headerlink" title="综合排序"></a>综合排序</h3><p>综合排序就是排序算法的拼装，充分利用各个排序算法的优势，在不同场景中将几种排序算法结合使用，例如：<br>进行快速排序时，在数据规模较大时采用快速排序，利用快速排序时间复杂度低的优势，而在小样本时采用插入排序的方式，利用数据规模小时插入排序花费时间更短的优势，从而达到总体的时间消耗较少，例如：在快速排序中加入判断，在大区间仍采用快速排序来调度，而当待排序区间被划分到尺寸小于给定的<code>threshold</code>时，在小区间排序上改用插入排序</p><h3 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h3><p>对不同的应用场景选择不同稳定性的算法，以Java中自带的<code>Arrays.sort()</code>为例，其底层实现是两种方式：</p><ul><li>当待排序数据是基础数据类型，那么稳定性就对这个数据排序没什么用，这时候<code>Arrays.sort()</code>方法就会采用没有稳定性而常数时间复杂度更低的快速排序算法；</li><li>当待排序数据是非基础数据类型，则排序算法的稳定性可能会被用到，为保险起见<code>Arrays.sort()</code>方法就会采用具有稳定性而时间复杂度相比快排更高一点的归并排序；</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 排序算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>复杂度计算</title>
      <link href="/2024/06/22/%E5%A4%8D%E6%9D%82%E5%BA%A6%E8%AE%A1%E7%AE%97/"/>
      <url>/2024/06/22/%E5%A4%8D%E6%9D%82%E5%BA%A6%E8%AE%A1%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>此篇为本系列第一篇，因此在此说明一些有关信息：</p><ol><li>本系列主要总结数据结构与算法相关知识。</li><li>本系列是笔者以B站数据结构与算法课程为学习路线进行学习总结的，有没有讲明白的，可点击 <a href="https://www.bilibili.com/list/watchlater?oid=504917493&bvid=BV13g41157hK">链接</a> 前往B站原视频看看左神是怎么讲的。</li><li>由于笔者平时Java用的比较多，因此此系列中多以Java语言作为代码实现首选语言，当然数据结构与算法在不同语言中是通用的，差别仅在于不同编程语言中数据类型可能不同，同一个数据结构或算法实现代码不同，但思路都是相同的。</li><li>数据结构与算法是重实践的知识，勤加练习手敲代码才能掌握的更快，用的更灵活。</li></ol><hr><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><p>时间复杂度常作为衡量算法性能优劣的一项指标，在数据量N越大时越具有参考性。<br>要理解时间复杂度首先要知道常数操作是什么？</p><h3 id="常数操作"><a href="#常数操作" class="headerlink" title="常数操作"></a>常数操作</h3><p>常数操作指：一项操作的完成时间与数据量没有关系，就称为常数操作。<br>例如：访问数组元素就直接计算偏移量后一次取出数据，而访问链表元素就需要遍历链表元素，从上一个元素中才能找到下一个元素的位置，这就决定了链表访问元素与数据量有关，因此访问数据元素是常数操作，而访问链表元素不是。</p><h3 id="时间复杂度的计算"><a href="#时间复杂度的计算" class="headerlink" title="时间复杂度的计算"></a>时间复杂度的计算</h3><p>要计算算法时间复杂度，首先要了解算法的计算过程，分辨出此算法包含了哪些常数操作，这些常数操作都执行了多少遍，特别注意那些执行了N遍的操作(N表示数据量)，将总的操作次数写成一个表达式，表达式中最高阶除系数之外的部分记为 <code>f(N)</code> ，则称 <code>O(f(N))</code> 为此算法的时间复杂度，例如计算出来常数操作数量表达式为 <code>10N^2+2N+3</code>，则时间复杂度为 <code>O(N^2)</code><br>简单来说，计算时间复杂度就关注算法中哪些部分执行了N次或N的幂次，最高项往往在这些中，关注循环结构，往往循环结构中会产生遍历的操作，很可能与数据量N有关，那些执行次数比较少的与N无关的常数操作就不用管了，不会影响到时间复杂度的计算。</p><h3 id="时间复杂度的比较"><a href="#时间复杂度的比较" class="headerlink" title="时间复杂度的比较"></a>时间复杂度的比较</h3><p>表达式中次方越小时间复杂度越低，理论上算法耗时更少。<br>表达式相同时，时间复杂度表达式就不具有参考价值了，直接比较不同数据样本下实际的运行时间，即 <code>常数项时间</code> ，直接跑代码运行一遍效果最快。</p><h3 id="空间复杂度的计算"><a href="#空间复杂度的计算" class="headerlink" title="空间复杂度的计算"></a>空间复杂度的计算</h3><p>空间复杂度是算法计算过程中需要另外开辟变量的操作复杂度，当算法只需要个别几个变量就能完成算法时认为空间复杂度为 <code>O(1)</code> ，更高复杂度举个例子：需要开辟与数据量等长的数组才能完成计算时空间复杂度为 <code>O(N)</code>。</p><h3 id="递归的时间复杂度"><a href="#递归的时间复杂度" class="headerlink" title="递归的时间复杂度"></a>递归的时间复杂度</h3><p>关于递归时间复杂度的计算与一般的时间复杂度计算有点不一样，可以先跳过这部分，在后面学到<a href="#%E9%80%92%E5%BD%92%E8%BF%87%E7%A8%8B">递归过程</a>后再回过头来看递归的时间复杂度计算能更容易理解。<br>如果用递归解决问题时，原问题拆解为子问题的过程将数据量是等分的(类似二等分、三等分…)，则可以使用 <code>master公式</code> 来辅助递归求解问题的时间复杂度求解问题，<code>master公式</code></p><figure class="highlight shell"><figcaption><span>master公式</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T(N) = a*T(N/b)+O(N^d)</span><br></pre></td></tr></table></figure><p><code>T(N) = a*T(N/b)+O(N^d)</code> 中参数的理解</p><table><thead><tr><th>项</th><th>解释</th></tr></thead><tbody><tr><td><code>N</code></td><td>原问题的数据规模</td></tr><tr><td><code>a</code></td><td>在一层递归中调用递归函数的次数</td></tr><tr><td><code>b</code></td><td>原问题划分的直接子问题数</td></tr><tr><td><code>O(N^d)</code></td><td>在一层递归中除了调用递归函数其他部分的时间复杂度</td></tr></tbody></table><p>举个例子，在上面递归求解数组最大值的问题中，<code>master公式</code>为: <code>T(N)=2*T(N/2)+O(1)</code><br>在得到问题对应的 <code>master公式</code> 后就可以根据规则求解时间复杂度了(<em>tips:<code>log(b,a)</code>指<code>log以b为底的a</code></em>)：</p><blockquote><ol><li><code>log(b,a) &gt; d</code> 则时间复杂度为<code>O(N^log(b,a))</code></li><li><code>log(b,a) &lt; d</code> 则时间复杂度为<code>O(N^d)</code></li><li><code>log(b,a) = d</code> 则时间复杂度为<code>O(N^d*logN)</code></li></ol></blockquote><div class="note info flat"><p><em><strong>注意:master公式是求解时间复杂度过程中的一个工具，而不是最终的时间复杂度</strong></em></p></div><h3 id="二分查找的时间复杂度"><a href="#二分查找的时间复杂度" class="headerlink" title="二分查找的时间复杂度"></a>二分查找的时间复杂度</h3><p>二分查找常用在有序数据中查找数据，时间复杂度是 <code>O(log以2为底的N)</code> 常写作 <code>O(logN)</code>，不特别指出底数在时间复杂度这里就默认是以2为底数<br>但是二分查找并不是不能用在无序数组的查找中，这还要结合题目的要求和数据的分布来看二分查找是否可用，例如无序数组中查找局部最小值就可以用二分查找</p><h2 id="对数器"><a href="#对数器" class="headerlink" title="对数器"></a>对数器</h2><p>在进入排序算法学习之前，先了解一种测试方法，叫做对数器，在后面自己书写排序方法后可以通过对数器验证结果是否正确。<br>原理是：使用同一组数据在两种方法中分别测试，一种方法是要测试的，一种方法是作为对照组标准的，比较结果是否相同，来达到在本地测试方法的目的，例如检查自己写的插入排序是否正确，可以与java语言提供的 <code>Arrays.sort()</code> 方法对比，<em><strong>下面代码中还包含常用的随机数组生成模块</strong></em></p><figure class="highlight java"><figcaption><span>对数器的使用示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="comment">// 生成随机长度随机值的随机数组</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] generateRandomArray(<span class="type">int</span> maxSize, <span class="type">int</span> maxValue) &#123;</span><br><span class="line"><span class="comment">// Math.random() -&gt; [0,1)所有小数等概率返回一个</span></span><br><span class="line"><span class="comment">// Math.random() * N -&gt; [0,N)所有小数等概率返回一个</span></span><br><span class="line"><span class="comment">// (int)(Math.random() * N) -&gt; [0,N-1]所有整数等概率返回一个</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[(<span class="type">int</span>)(Math.random() * (maxSize))+<span class="number">1</span>];<span class="comment">// (int)(Math.random() * (maxSize))表示[0,maxSize-1]所有整数等概率返回一个,加1是考虑到长度不为0，[1,maxSize]</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">arr[i] = (<span class="type">int</span>)(Math.random() * (maxValue+<span class="number">1</span>))-(<span class="type">int</span>)(Math.random() * maxValue);<span class="comment">// 值随机，且有正有负，最大值maxValue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 用于对照的排序方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">comparator</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">Arrays.sort(arr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复制数组方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] copyArray(<span class="type">int</span>[] arr) &#123;</span><br><span class="line"><span class="keyword">if</span>(arr==<span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[arr.length];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">res[i] = arr[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组比较方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isEqual</span><span class="params">(<span class="type">int</span>[] arr1, <span class="type">int</span>[] arr2)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(arr1 == <span class="literal">null</span> || arr2 == <span class="literal">null</span>) &#123;<span class="comment">// 数组为null的情况</span></span><br><span class="line"><span class="keyword">if</span>((arr1 == <span class="literal">null</span> &amp;&amp; arr2 != <span class="literal">null</span>) || (arr1 != <span class="literal">null</span> &amp;&amp; arr2 == <span class="literal">null</span>))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">// 一个null一个不是null</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">// 都是null</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(arr1.length != arr2.length) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr1.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(arr1[i] != arr2[i]) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">testTimes</span> <span class="operator">=</span> <span class="number">100000</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">maxSize</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">maxValue</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;testTimes; i++) &#123;</span><br><span class="line"><span class="type">int</span>[] arr1 = generateRandomArray(maxSize, maxValue);</span><br><span class="line"><span class="type">int</span>[] arr2 = copyArray(arr1);</span><br><span class="line">Sort_InsertSort.insertSort(arr1);</span><br><span class="line">comparator(arr2);</span><br><span class="line"><span class="keyword">if</span>(!isEqual(arr1,arr2)) &#123;</span><br><span class="line">success = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(success ? <span class="string">&quot;good job!&quot;</span> : <span class="string">&quot;there is something wrong!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="比较器"><a href="#比较器" class="headerlink" title="比较器"></a>比较器</h2><p>比较器的使用也能帮助你在编写排序算法时方便测试，比较器的使用能方便比较过程和排序过程，特别是用于自定义对象的比较，在Java中我们称之为比较器，在C++中则称为重载运算符，完成的功能是一样的<br>在Java中要建立一个比较器的步骤如下：</p><ol><li>自定义比较器类，实现<code>java.util.Comparator</code>接口</li><li>在比较器类中要实现<code>compare()</code>方法</li><li>compare()方法默认规则: <blockquote><ul><li>比较结果中先是第一个参数时返回正数</li><li>比较结果中先一个是第二个参数时返回负数</li><li>比较结果为相等时返回0</li></ul></blockquote></li><li>在要排序的函数中，将比较器类的实例化对象作为参数即可</li></ol><p>下面是自定义类的对象比较器，在示例中通过调用不同的比较器实现不同的排序</p><figure class="highlight java"><figcaption><span>比较器示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentCompare</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> studentID;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">StudentCompare</span><span class="params">()</span> &#123;</span><br><span class="line">studentID = <span class="number">0</span>;</span><br><span class="line">age = <span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">StudentCompare</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> age)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.studentID = id;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 比较器类要实现Comparator接口</span></span><br><span class="line"><span class="comment"> * 比较器类要实现compare()方法</span></span><br><span class="line"><span class="comment"> * compare()方法默认规则: </span></span><br><span class="line"><span class="comment"> * * 比较结果中先是第一个参数时返回正数</span></span><br><span class="line"><span class="comment"> * * 比较结果中先一个是第二个参数时返回负数</span></span><br><span class="line"><span class="comment"> * * 比较结果为相等时返回0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// studentID比较器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">IDComparator</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;StudentCompare&gt;&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(StudentCompare student1, StudentCompare student2)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> student1.studentID-student2.studentID;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// age比较器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">AgeComparator</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;StudentCompare&gt;&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(StudentCompare student1, StudentCompare student2)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> student1.age-student2.age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">studentPrint</span><span class="params">(StudentCompare student)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;studentID=&quot;</span>+student.studentID+<span class="string">&quot; &quot;</span>+<span class="string">&quot;age=&quot;</span>+student.age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">studentPrint</span><span class="params">(StudentCompare[] students)</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;students.length; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;studentID=&quot;</span>+students[i].studentID+<span class="string">&quot; &quot;</span>+<span class="string">&quot;age=&quot;</span>+students[i].age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">StudentCompare</span> <span class="variable">student1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StudentCompare</span>(<span class="number">1</span>, <span class="number">18</span>);</span><br><span class="line"><span class="type">StudentCompare</span> <span class="variable">student2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StudentCompare</span>(<span class="number">2</span>, <span class="number">17</span>);</span><br><span class="line">StudentCompare[] students = &#123;student1, student2&#125;;</span><br><span class="line">studentPrint(students);</span><br><span class="line">Arrays.sort(students, <span class="keyword">new</span> <span class="title class_">IDComparator</span>());</span><br><span class="line">studentPrint(students);</span><br><span class="line">Arrays.sort(students, <span class="keyword">new</span> <span class="title class_">AgeComparator</span>());</span><br><span class="line">studentPrint(students);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 复杂度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AirScript教程</title>
      <link href="/2024/06/22/AirScript%E6%95%99%E7%A8%8B/"/>
      <url>/2024/06/22/AirScript%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong><a href="#%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%B7%A5%E5%85%B7%E5%87%86%E5%A4%87">AirScript教程</a>: 通过学习本节内容你可以了解常用的AirScript工具和开发过程，更高级的如：IT自动化测试，办公自动化，App与游戏脚本，数据爬虫等内容请直接阅读参考文档中提供的开发文档资料.</strong></p><p><strong>参考文档:</strong></p><blockquote><ul><li><a href="https://doc.airscript.cn/airapi">AirScript开发文档</a></li></ul></blockquote><hr><h2 id="环境配置与工具准备"><a href="#环境配置与工具准备" class="headerlink" title="环境配置与工具准备"></a>环境配置与工具准备</h2><ul><li>操作系统：Windows10 </li><li>手机端安装APP：AirScript</li></ul><h3 id="移动端安装APP"><a href="#移动端安装APP" class="headerlink" title="移动端安装APP"></a>移动端安装APP</h3><p>在 <a href="https://ascript.cn/">AirScript官网</a> 下载并安装APP到手机上，会提示开启 <code>无障碍选项</code>、<code>投屏</code>、<code>存储</code>等功能，APP内置服务器，供开发者访问，免去开发者的环境配置，极大降低研发成本。移动端的APP相当于一个开发和运行环境，书写的代码就保存在软件中，不过书写代码还是通过PC端开发更方便些。</p><h3 id="移动端连接PC"><a href="#移动端连接PC" class="headerlink" title="移动端连接PC"></a>移动端连接PC</h3><p>两种方式，局域网或者公网，一般局域网开发就可以了。</p><h4 id="局域网"><a href="#局域网" class="headerlink" title="局域网"></a>局域网</h4><ol><li>打开APP后，点击 <code>开发者</code>，在<code>开发地址</code>-&gt;<code>局域网IP</code> 栏目中即可看到局域网IP地址，格式为 <code>192.168....*</code></li><li>在电脑端(windows,mac,linux) 等设备的浏览器地址栏中键入该 <code>IP地址</code> 即可实现连接手机，新建个项目后就可以开始研发。</li></ol><div class="note info flat"><p><em>tips:确认手机和电脑处于同一个局域网(PS:连接同一个WIFI)</em></p></div><h4 id="通过公网"><a href="#通过公网" class="headerlink" title="通过公网"></a>通过公网</h4><ol><li>打开APP后，点击 <code>开发者</code>-&gt;<code>开发地址</code>-&gt;<code>公网IP</code>，点击<code>公网IP</code>开关，给予VPN权限</li><li>在电脑端(windows,mac,linux) 等设备中，在浏览器地址栏键入公网地址即可连接开始研发，格式 <code>http://ide.airscript.cn/.*</code>。</li></ol><hr><h2 id="简单动作"><a href="#简单动作" class="headerlink" title="简单动作"></a>简单动作</h2><h3 id="模拟点击坐标"><a href="#模拟点击坐标" class="headerlink" title="模拟点击坐标"></a>模拟点击坐标</h3><ul><li><code>click(x,y,dur)</code><br><strong><code>dur</code> 参数单位是 <code>ms</code>，默认 <code>20ms</code></strong><figure class="highlight python"><figcaption><span>click(x,y,dur)示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> airscript.action <span class="keyword">import</span> click  <span class="comment"># 依赖</span></span><br><span class="line"></span><br><span class="line">click(<span class="number">100</span>,<span class="number">200</span>)  <span class="comment"># 点击坐标为(100,200)位置20ms</span></span><br><span class="line">click(<span class="number">100</span>,<span class="number">200</span>,<span class="number">3000</span>) <span class="comment"># 点击坐标为(100,200)位置3000ms后释放</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="模拟点击坐标对象"><a href="#模拟点击坐标对象" class="headerlink" title="模拟点击坐标对象"></a>模拟点击坐标对象</h3><ul><li><code>click(point,dur)</code><br><code>point</code>是android.graphics.Point点对象，可以直接将坐标包装为一个Point对象来使用<figure class="highlight python"><figcaption><span>click(point,dur)示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> airscript.action <span class="keyword">import</span> click</span><br><span class="line"><span class="keyword">from</span> android.graphics <span class="keyword">import</span> Point</span><br><span class="line"></span><br><span class="line">p = Point(<span class="number">100</span>,<span class="number">200</span>)  <span class="comment"># p是个Point对象，Point对象用坐标初始化</span></span><br><span class="line">click(p)</span><br><span class="line">click(p,<span class="number">3000</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="模拟触摸"><a href="#模拟触摸" class="headerlink" title="模拟触摸"></a>模拟触摸</h3><div class="note info flat"><p>tips:一个触摸动作的设计应包含按下、移动、抬起三个部分，缺一不可，但可以多</p></div><ul><li><code>touch.*</code><figure class="highlight python"><figcaption><span>touch示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> airscript.action <span class="keyword">import</span> touch</span><br><span class="line"></span><br><span class="line">touch.down(<span class="number">100</span>,<span class="number">200</span>) <span class="comment"># 按下不松</span></span><br><span class="line">touch.move(<span class="number">200</span>,<span class="number">200</span>) <span class="comment"># 移动到</span></span><br><span class="line">touch.move(<span class="number">300</span>,<span class="number">300</span>,<span class="number">1000</span>)    <span class="comment"># 移动过程花费1000ms</span></span><br><span class="line">touch.up(<span class="number">400</span>,<span class="number">300</span>)   <span class="comment"># 移动到目标位置后抬起</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="模拟滑动"><a href="#模拟滑动" class="headerlink" title="模拟滑动"></a>模拟滑动</h3><ul><li><code>slide(x,y,x1,y1,dur)</code><br>这个用的比较多，最好把依赖和方法使用方式记住<figure class="highlight python"><figcaption><span>slide(x,y,x1,y1,dur)示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> airscript.action <span class="keyword">import</span> slide</span><br><span class="line"></span><br><span class="line">slide(<span class="number">100</span>,<span class="number">200</span>,<span class="number">300</span>,<span class="number">400</span>)  <span class="comment"># (100,200)滑动到(300,400)耗时20ms</span></span><br><span class="line">slide(<span class="number">100</span>,<span class="number">200</span>,<span class="number">300</span>,<span class="number">400</span>,<span class="number">1000</span>) <span class="comment"># 耗时1000ms</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="模拟手势"><a href="#模拟手势" class="headerlink" title="模拟手势"></a>模拟手势</h3><p>模拟复杂的人手操作，如单指画圆、双指捏合、多指操控等，先大概了解AirScript中模拟手势是什么个原理，具体要用的时候跟着<a href="#%E6%89%8B%E5%8A%BF%E7%A4%BA%E4%BE%8B">示例</a>编写即可</p><figure class="highlight python"><figcaption><span>相关依赖</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> airscript.action <span class="keyword">import</span> gesture    <span class="comment"># 手势包</span></span><br><span class="line"><span class="keyword">from</span> airscript.action <span class="keyword">import</span> path   <span class="comment"># 手势辅助包-路径</span></span><br></pre></td></tr></table></figure><div class="note info flat"><p><em>tips: 定义一个手势必须包含创建路径、路径方法、手势执行三个部分.</em></p></div><ol><li><p>创建路径<br><code>path(startTime,duration,willContinue)</code><br>创建新的path路径，规划决定手势如何移动</p><table><thead><tr><th>构造参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>startTime</code></td><td>number</td><td>可选,延迟多久开始绘制路径,单位ms,默认0</td></tr><tr><td><code>duration</code></td><td>number</td><td>可选,路径绘制的时常,单位ms,默认20</td></tr><tr><td><code>willContinue</code></td><td>boolean</td><td>可选,在路径结束后,手指是否抬起,默认<code>false</code></td></tr></tbody></table></li><li><p>路径方法<br><code>airscript.action.path</code> 实现了 <code>android.graphics.Path</code> 中的大部分绘制方法，参数传递参考: <a href="https://developer.android.google.cn/reference/android/graphics/Path?hl=en">android.graphics.Path</a><br>常用方法：</p><ul><li><code>moveTo()</code></li><li><code>lineTo()</code></li></ul></li><li><p>手势执行</p></li></ol><ul><li>gesture.perform(path[],callback)<br><em>tips:路径规划后,必须执行手势才可看到效果</em><table><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>path[]</code></td><td>path数组</td><td>执行的一组路径,当无callback参数时,path可改为多参传递,如<code>(path,path)</code></td></tr><tr><td><code>callback</code></td><td>class</td><td>可选,手势执行完成后的回调类,必须存在 <code>onCompleted()</code> 和 <code>onCancelled()</code> 两个回调函数</td></tr></tbody></table></li></ul><h4 id="手势示例"><a href="#手势示例" class="headerlink" title="手势示例"></a>手势示例</h4><figure class="highlight python"><figcaption><span>手势示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> airscript.action <span class="keyword">import</span> gesture</span><br><span class="line"><span class="keyword">from</span> airscript.action <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建路径1 模拟手指1</span></span><br><span class="line">path1 = path(<span class="number">0</span>,<span class="number">1000</span>)    <span class="comment"># 路径1立即执行，路径动作耗时1000ms</span></span><br><span class="line">path1.moveTo(<span class="number">100</span>,<span class="number">100</span>)   <span class="comment"># 移动到初始点</span></span><br><span class="line">path1.lineTo(<span class="number">200</span>,<span class="number">200</span>)   <span class="comment"># 划直线到(200,200)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建路径2 模拟手指2</span></span><br><span class="line">path2 = path(<span class="number">0</span>,<span class="number">2000</span>)    <span class="comment"># 路径2立即执行</span></span><br><span class="line"><span class="comment"># path2 = path(1000,2000)   # 路径2延迟1000ms执行，路径1耗时1000ms，则手指2就是在手指1执行完毕后执行</span></span><br><span class="line">path2.moveTo(<span class="number">200</span>,<span class="number">200</span>)</span><br><span class="line">path2.lineTo(<span class="number">300</span>,<span class="number">300</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回调函数定义</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">listener</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">noCompleted</span>():</span><br><span class="line">        gesture.perform(path2)  <span class="comment"># 执行path2并监听path2</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">onCancelled</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;中断取消了！&quot;</span>)</span><br><span class="line"></span><br><span class="line">gesture.perform([path1],listener)   <span class="comment"># 执行手势path1并监听path1，执行完成后执行回调函数</span></span><br></pre></td></tr></table></figure><p>更多示例见<a href="https://ascript.cn/docs/android/api/action#%E6%89%8B%E6%8C%87%E8%B7%AF%E5%BE%84">官方开发文档</a>，使用方法不用背，用的时候照着文档现编就行。</p><h3 id="模拟文本输入"><a href="#模拟文本输入" class="headerlink" title="模拟文本输入"></a>模拟文本输入</h3><ul><li><code>input(msg,Selector...)</code><br>在页面的 <code>文本输入框控件</code> 中输入文本<table><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>msg</code></td><td>string</td><td>输入的文本信息</td></tr><tr><td><code>Selector...</code></td><td><code>Selector</code>可变参数</td><td>可选,控件选择器,如果不填写该参数,则会获取当前屏幕上获取焦点的输入框,进行输入</td></tr></tbody></table></li></ul><figure class="highlight python"><figcaption><span>input(msg,Selector...)示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> airscript.node <span class="keyword">import</span> Selector</span><br><span class="line"><span class="keyword">from</span> airscript.action <span class="keyword">import</span> <span class="built_in">input</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 无Selection...参数</span></span><br><span class="line"><span class="built_in">input</span>(<span class="string">&quot;在当前获取焦点的输入框中输入文本&quot;</span>)</span><br><span class="line"><span class="comment"># 有Selection...参数</span></span><br><span class="line"><span class="comment"># 控件筛选器 定位 要输入文本的控件</span></span><br><span class="line">view = Selector().<span class="built_in">id</span>(<span class="string">&quot;com.aojoy.airscript:id/search_bar_text&quot;</span>)</span><br><span class="line"><span class="comment"># 输入文本信息</span></span><br><span class="line"><span class="built_in">input</span>(<span class="string">&quot;在指定输入框控件中输入文本&quot;</span>,view)</span><br></pre></td></tr></table></figure><h3 id="模拟功能按键按下"><a href="#模拟功能按键按下" class="headerlink" title="模拟功能按键按下"></a>模拟功能按键按下</h3><p>模拟部分功能键按下</p><table><thead><tr><th>模拟按键</th><th>描述</th></tr></thead><tbody><tr><td><code>key.home()</code></td><td>模拟HOME按键</td></tr><tr><td><code>key.back()</code></td><td>模拟返回按键</td></tr><tr><td><code>key.notifactions()</code></td><td>模拟呼出通知栏</td></tr><tr><td><code>key.lockscreen()</code></td><td>模拟锁屏</td></tr><tr><td><code>key.screenshot()</code></td><td>模拟截屏</td></tr><tr><td><code>key.recents()</code></td><td>模拟呼出任务栏</td></tr></tbody></table><figure class="highlight python"><figcaption><span>模拟按键示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> airscript.action <span class="keyword">import</span> key</span><br><span class="line"></span><br><span class="line">key.home()  <span class="comment"># 模拟按下 `home` 键</span></span><br><span class="line">key.back()  <span class="comment"># 模拟按下 `back` 键</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><div class="note info flat"><p><em><code>airscript.action.key</code>只能模拟部分功能键，如果您想尝试模拟键盘按键,比如 <code>A</code>,<code>B</code> 等. 请尝试通过 <code>android debug bridge(adb)</code> 来模拟.</em></p></div><h3 id="捕获用户行为"><a href="#捕获用户行为" class="headerlink" title="捕获用户行为"></a>捕获用户行为</h3><p>捕获用户点击坐标返回一个 <code>airscript.action.Point</code> 对象</p><table><thead><tr><th><code>Catch</code>类的方法</th><th>描述</th><th>取值</th></tr></thead><tbody><tr><td><code>click()</code></td><td>捕获用户点击，返回<code>Point</code>对象</td><td>空</td></tr><tr><td><code>msg(str)</code></td><td>捕获页面展示的信息</td><td>字符串<code>string</code></td></tr><tr><td><code>shine(siShine)</code></td><td>捕获页面是否闪屏</td><td>boolean <code>false/true</code></td></tr></tbody></table><figure class="highlight python"><figcaption><span>捕获点击示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> airscript.action <span class="keyword">import</span> Catch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 捕获用户点击</span></span><br><span class="line">p = Catch().click()</span><br><span class="line"><span class="comment"># 捕获用户点击，配置页面展示内容，并闪烁屏幕</span></span><br><span class="line">p = Catch().msg(<span class="string">&quot;请点击红包位置&quot;</span>).shine(<span class="literal">True</span>).click()</span><br><span class="line"><span class="comment"># 打印捕获的坐标</span></span><br><span class="line"><span class="built_in">print</span>(p.x,p.y)</span><br></pre></td></tr></table></figure><h2 id="hid虚拟外设动作"><a href="#hid虚拟外设动作" class="headerlink" title="hid虚拟外设动作"></a>hid虚拟外设动作</h2><p>hid虚拟外设动作类，此模块可在无障碍模式下使用hid</p><figure class="highlight python"><figcaption><span>相关依赖</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> airscript.action <span class="keyword">import</span> hid</span><br></pre></td></tr></table></figure><p><em><strong>使用前请确保已经绑定设备成功</strong></em><br>hid支持多种动作和模拟输入</p><ul><li><code>hid.click(x,y,dur)</code></li><li><code>hid.slide(x,y,x1,y1,dur)</code></li><li><code>hid.key(keycode...)</code></li></ul><p><strong>hid支持所有键盘按键</strong>，在<code>hid.key()</code>中填入 <code>keycode</code> 参数即可</p><p><code>keycode</code>参数详解：</p><table><thead><tr><th>类型</th><th>keycode</th></tr></thead><tbody><tr><td>字母键</td><td><code>a</code>-A键,<code>b</code>-B键…</td></tr><tr><td>数字键</td><td><code>1</code>-数字1,<code>2</code>-数字2…</td></tr><tr><td>功能键</td><td><code>enter</code>,<code>esc</code>,<code>backspace</code>,<code>tab</code>,<code>space</code>,<code>capsLock</code>,<code>f1</code>…<code>f12</code>,<code>printScreen</code>,<code>scrollLock</code>,<code>pause</code></td></tr><tr><td>导航键</td><td><code>insert</code>,<code>home</code>,<code>pageUp</code>,<code>delete</code>,<code>end</code>,<code>pageDown</code>,<code>rightArrow</code>,<code>leftArrow</code>,<code>downArrow</code>,<code>upArrow</code></td></tr><tr><td>符号键</td><td><code>minus</code>-减号,<code>equal</code>-等号,<code>leftBracket</code>-左方括号,<code>rightBracket</code>,<code>backslash</code>-反斜杠,<code>semicolon</code>-分号,<code>quote</code>-单引号,<code>grave</code>-重音符键,<code>comma</code>-逗号,<code>period</code>-句号,<code>slash</code>-斜杠</td></tr><tr><td>小键盘</td><td><code>numLock</code>,<code>keypadDivide</code>-小键盘除号,<code>keypadMultiply</code>-小键盘乘号,<code>keypadSubtract</code>-小键盘减号,<code>keypadAdd</code>,<code>keypadEnter</code>,<code>keypad0</code>…<code>keypad9</code>,<code>keypadDecimal</code>-小键盘小数点</td></tr><tr><td>控制键</td><td><code>Shift</code>,<code>Ctrl</code>,<code>Alt</code>,<code>Command</code>,<code>id</code>-要操作的设备的唯一标识符</td></tr></tbody></table><div class="note info flat"><p>tips:<code>Shift</code>,<code>Ctrl</code>,<code>Alt</code>,<code>Command</code>这几个键不传入时默认值为 <code>false</code> 表示不按下，传入时相当于值为 <code>true</code> 表示按下.</p></div><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><p>通过选择器 <code>Selector</code> 检索获取指定控件 <code>Node</code>，对控件进行操作，是较为常用的一种寻找操作对象的方法，有点类似CSS中的控件寻找。通过在选择器中自定义选择规则来实现特定选择。<br><em><strong>对控件的支持是全分辨率的，即在一台设备上开发多台设备兼容</strong></em></p><figure class="highlight python"><figcaption><span>相关依赖</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> airscript.node <span class="keyword">import</span> Selector</span><br></pre></td></tr></table></figure><h3 id="选择器模式"><a href="#选择器模式" class="headerlink" title="选择器模式"></a>选择器模式</h3><ul><li><code>Selector(mode)</code><table><thead><tr><th>mode</th><th>描述</th></tr></thead><tbody><tr><td><code>0</code></td><td>简单模式，只展示重要控件</td></tr><tr><td><code>1</code></td><td>复杂模式，展示全部控件，层级较深</td></tr><tr><td><code>2</code></td><td>简单模式下忽略系统控件</td></tr><tr><td><code>3</code></td><td>复杂模式下忽略系统控件</td></tr></tbody></table></li></ul><figure class="highlight python"><figcaption><span>Selector(mode)示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> airscript.node <span class="keyword">import</span> Selector</span><br><span class="line"></span><br><span class="line">Selector()  <span class="comment"># 创建一个选择器，简单模式</span></span><br><span class="line">Selector(<span class="number">1</span>) <span class="comment"># 创建一个选择器，复杂模式</span></span><br><span class="line">Selector(<span class="number">0</span>|<span class="number">2</span>)   <span class="comment"># 创建一个选择器，简单模式并且忽略系统控件</span></span><br><span class="line">Selector(<span class="number">1</span>|<span class="number">3</span>)   <span class="comment"># 创建一个选择器，复杂模式并且忽略系统控件</span></span><br></pre></td></tr></table></figure><p>一般的使用场景中只需要用<code>Selector()</code>这种简单模式即可，而且开发时使用的是可视化界面，可以通过控件检索功能手动生成选择语句，不用自己代码书写定义，也就是说了解即可。</p><h3 id="缓存模式"><a href="#缓存模式" class="headerlink" title="缓存模式"></a>缓存模式</h3><ul><li><code>Selector.cache(iscache)</code><table><thead><tr><th>参数</th><th>描述</th><th>—</th></tr></thead><tbody><tr><td><code>iscache</code></td><td>是否开启缓存</td><td><code>True</code>&#x2F;<code>False</code></td></tr></tbody></table></li></ul><p>开启缓存后选择器会将界面的控件缓存，之后的查找都将在缓存的控件中进行，加快了速度，但是<strong>缓存开启后无论界面变化，始终使用的是缓存的控件，注意使用场合</strong>*</p><div class="note info flat"><p><em><code>cache()</code>是<code>Selector</code>类的静态方法，直接通过类名调用，而后面的<code>find()</code>方法是需要通过<code>Selector()</code>对象调用的，例如：<code>Selector.cache(True)</code>,<code>Selector().find()</code>，使用时注意区分</em></p></div><h3 id="Selector-find"><a href="#Selector-find" class="headerlink" title="Selector find"></a>Selector find</h3><p>这部分了解格式就行，用的时候也是和选择器模式一样在可视化界面手动生成查询代码，不用编写。</p><ul><li><code>Selector().find()</code><br>返回控件的方法，返回结果分情况：<blockquote><ul><li>当找到一个满足规则控件时返回此控件(类型<code>Node</code>)</li><li>当找到多个满足规则控件时返回第一个</li><li>当没找到符合规则的控件时返回<code>null</code></li></ul></blockquote></li></ul><figure class="highlight python"><figcaption><span>Selector().find()示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> airscript.node <span class="keyword">import</span> Selector</span><br><span class="line"></span><br><span class="line">node = Selector().<span class="built_in">id</span>(<span class="string">&quot;.*search_bar_text$&quot;</span>).find()   <span class="comment"># 记得要获得控件得用find()或者find_all()方法</span></span><br><span class="line"><span class="keyword">if</span> node:</span><br><span class="line">    <span class="built_in">print</span>(node)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;未找到控件&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li><code>Selector().find_all()</code><br>返回控件的方法，返回结果分情况：<blockquote><ul><li>找到控件返回所有控件(类型<code>Node[]</code>)</li><li>没找到控件返回<code>null</code></li></ul></blockquote></li></ul><p>使用方法同 <code>Selector().find()</code></p><h3 id="选择器-约束规则"><a href="#选择器-约束规则" class="headerlink" title="选择器-约束规则"></a>选择器-约束规则</h3><p>通过指定的约束规则来使用选择器选出指定的控件<br>通常我们不是从0到1地编写查询代码，而是在可视化开发界面通过 <code>控件检索</code> 工具获取控件属性，生成对应的 <code>Selector</code> 规则语句直接插入到代码中来查找控件，下面的表格中需要了解的是参数的含义，重点关注关系类约束，如<code>child()</code>、<code>parent()</code>、<code>brother()</code>等，其他的看看就行，用到的时候再来查，不要背这个表啊，会累出白头发的。</p><table><thead><tr><th>约束方法</th><th>备注</th></tr></thead><tbody><tr><td><code>Selector().id(string)</code></td><td>约束 <code>id</code></td></tr><tr><td><code>Selector().text(string)</code></td><td>约束 文本</td></tr><tr><td><code>Selector().type(string)</code></td><td>约束 类型</td></tr><tr><td><code>Selector().desc(string)</code></td><td>约束 描述</td></tr><tr><td><code>Selector().hintText(string)</code></td><td>约束 默认文本,通常在 <code>EditText</code> 中会有此属性</td></tr><tr><td><code>Selector().packageName(string)</code></td><td>约束 包名,包名通常为 <code>APP的ID</code></td></tr><tr><td><code>Selector().childCount(number)</code></td><td>约束 孩子数量</td></tr><tr><td><code>Selector().inputType(number)</code></td><td>约束 可输入类型,通常在 <code>EditText</code> 中会存在输入类型</td></tr><tr><td><code>Selector().drawingOrder(number)</code></td><td>约束 绘制排序,同一级别控件的第几个</td></tr><tr><td><code>Selector().depth(number)</code></td><td>约束 控件深度,深度是指控件的层级</td></tr><tr><td><code>Selector().maxTextLength(number)</code></td><td>约束 最大字符长度</td></tr><tr><td><code>Selector().clickable(boolean)</code></td><td>约束 是否可点击</td></tr><tr><td><code>Selector().checkable(number)</code></td><td>约束 是否可选中</td></tr><tr><td><code>Selector().checked(number)</code></td><td>约束 是否选中</td></tr><tr><td><code>Selector().editable(number)</code></td><td>约束 是否可编辑</td></tr><tr><td><code>Selector().enabled(number)</code></td><td>约束 是否可访问</td></tr><tr><td><code>Selector().dismissable(number)</code></td><td>约束 是否可取消</td></tr><tr><td><code>Selector().focusable(number)</code></td><td>约束 是否可以获取焦点</td></tr><tr><td><code>Selector().focused(number)</code></td><td>约束 是否已经获取了焦点</td></tr><tr><td><code>Selector().longClickable(number)</code></td><td>约束 是否可以长按</td></tr><tr><td><code>Selector().visible(boolean)</code></td><td>约束 是否用户可见</td></tr><tr><td><code>Selector().parent(number)</code></td><td>约束 获取第N个父元素</td></tr><tr><td><code>Selector().child(number)</code></td><td>约束 获取第N个孩子</td></tr><tr><td><code>Selector().brother(number)</code></td><td>约束 获取第N个兄弟</td></tr></tbody></table><figure class="highlight python"><figcaption><span>约束属性的使用示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> airscript.node <span class="keyword">import</span> Selector</span><br><span class="line"></span><br><span class="line">node = Selector().<span class="built_in">id</span>(<span class="string">&quot;.*search_bar_text$&quot;</span>).find()   <span class="comment"># 记得要获得控件得用find()或者find_all()方法</span></span><br></pre></td></tr></table></figure><div class="note info flat"><p><em>tips: 通过选择器约束规则找到的内容要调用 <code>find()</code> 或 <code>find_all()</code> 方法才能返回控件Node</em></p></div><ul><li>约束规则参数为正则的约束属性，类似 <code>Selector().id(str)</code> ，根据<code>id</code>检索，参数 <code>str</code> 可直接为检索内容，也可以为正则表达式，两者都是用 <code>&quot;</code> 包裹起来的字符串，因此特别要注意：如果你将一段文本作为字符串检索内容，结果没找到控件，那就要检查字符串中是否包含了正则表达式中的符号，如果单纯使用字符串要将符号用转义字符 <code>\</code> 转义</li><li>我们可以通过 <code>node = Selector().id(str).find()</code> 这种这种形式获取控件 <code>Node</code>，也可以通过已经获取的控件来使用其属性，例如: <code>print(node.id)</code></li><li>选择器可以多个连用，例如：<code>node = Selector().id(str).clickable(True).find()</code></li><li><code>number</code> 类型参数可通过 <code>控件检索工具</code> 查看具体数值</li></ul><h4 id="关系约束规则"><a href="#关系约束规则" class="headerlink" title="关系约束规则"></a>关系约束规则</h4><p>关系类约束是这些约束规则里最需要掌握的，别的可以不太了解，但是关系类一定要熟悉，因为我们在定位控件的时候往往采用的都是相对位置，就要靠关系约束规则。</p><ul><li><code>Selector().parent(i)</code><br>获取父元素<table><thead><tr><th>参数i</th><th>备注</th></tr></thead><tbody><tr><td><code>不填i</code></td><td>获取第i个父元素,默认获取所有父元素</td></tr><tr><td><code>1</code></td><td>获取父元素</td></tr><tr><td><code>2</code></td><td>获取爷爷元素</td></tr><tr><td><code>3</code></td><td>获取太爷爷元素</td></tr><tr><td><code>1,3</code></td><td>获取第1和第3个父元素，即父元素和太爷爷元素</td></tr><tr><td><code>1.3</code></td><td>获取第1~3之间的所有父元素，即父、爷爷、太爷爷元素</td></tr></tbody></table></li></ul><figure class="highlight python"><figcaption><span>Selector().parent(i)示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> airscript.node <span class="keyword">import</span> Selector</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取指定id的控件的爷爷控件</span></span><br><span class="line">nodes = Selector().<span class="built_in">id</span>(<span class="string">&quot;com.aojoy.airscript:id/search_bar_text&quot;</span>).parent(<span class="number">2</span>).find_all()</span><br></pre></td></tr></table></figure><ul><li><code>Selector().child(i)</code><br>获取孩子控件<table><thead><tr><th>参数<code>i</code></th><th>备注</th></tr></thead><tbody><tr><td><code>i</code>不填</td><td>获取所有孩子控件</td></tr><tr><td><code>i</code>为正整数</td><td>获取第i个孩子控件</td></tr><tr><td><code>i</code>为负整数</td><td>获取倒数第1个孩子</td></tr><tr><td><code>i</code>为正小数(例如:1.3)</td><td>获取第1~第3之间的所有孩子</td></tr><tr><td><code>i</code>为负小数(例如:-1.3):获取倒数第1-第3之间的所有孩子</td><td></td></tr></tbody></table></li></ul><div class="note info flat"><p><em>tips: 一个控件只可以有一个直接父控件，因此 <code>parent()</code> 方法可以直接获取多级父控件而不混淆。一个控件可以有很多直系孩子控件，因此 <code>child()</code> 方法可以直接获取多个直系孩子，甚至指定获取倒数第几个孩子，而不产生混淆</em></p></div><ul><li><code>Selector().brother(n)</code><br>获取兄弟元素，即同层级控件</li></ul><table><thead><tr><th>参数<code>n</code></th><th>备注</th></tr></thead><tbody><tr><td><code>n</code>不填</td><td>默认不填:获取所有兄弟控件</td></tr><tr><td><code>1</code></td><td>获取第一个兄弟控件</td></tr><tr><td><code>1,2</code></td><td>获取第1和第2个兄弟控件</td></tr><tr><td><code>1.4</code></td><td>获取1-4之间的所有兄弟控件</td></tr><tr><td><code>0.1</code></td><td>获取当前控件的下一个兄弟控件</td></tr><tr><td><code>-0.1</code></td><td>获取当前控件的上一个兄弟控件</td></tr><tr><td><code>-1</code></td><td>获取倒数第1个兄弟控件</td></tr></tbody></table><figure class="highlight python"><figcaption><span>Selector().brother(n)示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> airscript.node <span class="keyword">import</span> Selector</span><br><span class="line"></span><br><span class="line">nodes =  Selector().desc(<span class="string">&quot;立体边框&quot;</span>).brother(<span class="number">0.1</span>).find_all()</span><br></pre></td></tr></table></figure><h3 id="选择器-动作"><a href="#选择器-动作" class="headerlink" title="选择器-动作"></a>选择器-动作</h3><p>在通过选择器约束规则找到控件后可直接对控件施加动作，如：控件点击，滑动，输入等</p><table><thead><tr><th>执行动作方法</th><th>描述</th></tr></thead><tbody><tr><td><code>Selector().click()</code></td><td>控件点击</td></tr><tr><td><code>Selector().long_click()</code></td><td>控件长按</td></tr><tr><td><code>Selector().slide(number)</code></td><td>控件滑动</td></tr><tr><td><code>Selector().input(string)</code></td><td>控件输入</td></tr></tbody></table><h4 id="控件点击"><a href="#控件点击" class="headerlink" title="控件点击"></a>控件点击</h4><p><code>Selector().click()</code> 控件点击是透传点击，通过系统操作控件底层执行点击。 而屏幕坐标点击则是通过模拟手势操作屏幕。对于透传点击，哪怕界面上看不见控件，但存在索引依然可以点击。透传点击忽视坐标分辨率,因此可以达到全部分辨率适配的效果。</p><figure class="highlight python"><figcaption><span>控件点击示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> airscript.node <span class="keyword">import</span> Selector</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找到指定可控件，执行点击方法，点击方法也是约束的一种，因此不能忘记后面的find()或find_all()</span></span><br><span class="line">Selector().<span class="built_in">type</span>(<span class="string">&quot;ImageView&quot;</span>).<span class="built_in">id</span>(<span class="string">&quot;com.aojoy.airscript:id/iv_statue1&quot;</span>).click().find()</span><br></pre></td></tr></table></figure><h4 id="控件长按"><a href="#控件长按" class="headerlink" title="控件长按"></a>控件长按</h4><p><code>Selector().long_click()</code>控件长按，使用方法和控件点击类似</p><h4 id="控件滑动"><a href="#控件滑动" class="headerlink" title="控件滑动"></a>控件滑动</h4><p><code>Selector().slide(ori)</code>控件滑动，只支持向前滑动、向后滑动。步长默认一屏，无法自定义步长。</p><table><thead><tr><th>参数<code>ori</code></th><th>描述</th></tr></thead><tbody><tr><td><code>-1</code></td><td>向前滑动</td></tr><tr><td><code>1</code></td><td>向后滑动</td></tr></tbody></table><h4 id="控件输入"><a href="#控件输入" class="headerlink" title="控件输入"></a>控件输入</h4><p><code>Selector().input(msg)</code><br>控件输入字符串类型 <code>msg</code>，当存在可输入文本的控件时才可输入。无需获取焦点，直接输入。</p><figure class="highlight python"><figcaption><span>控件输入示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> airscript.node <span class="keyword">import</span> Selector</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找到指定可控件，输入&quot;hello world&quot;</span></span><br><span class="line">Selector().<span class="built_in">id</span>(<span class="string">&quot;com.aojoy.airscript:id/search_bar_text&quot;</span>).<span class="built_in">input</span>(<span class="string">&quot;hello world&quot;</span>).find()</span><br></pre></td></tr></table></figure><h3 id="控件属性"><a href="#控件属性" class="headerlink" title="控件属性"></a>控件属性</h3><p>下表展示的是控件的属性含义，不用背，用的时候查就行，而且可视化控件检索工具使用的时候属性会给默认提示的，结合控件数值就能理解了。</p><table><thead><tr><th>属性id</th><th>描述</th></tr></thead><tbody><tr><td><code>ID</code></td><td>控件ID,<em>部分APP中ID属性,随手机安装可能动态变化,谨慎使用</em></td></tr><tr><td><code>text</code></td><td>控件的文本</td></tr><tr><td><code>type</code></td><td>控件的类型</td></tr><tr><td><code>desc</code></td><td>控件的描述</td></tr><tr><td><code>hintText</code></td><td>控件的默认展示文本</td></tr><tr><td><code>packageName</code></td><td>控件所属包名</td></tr><tr><td><code>rect</code></td><td>控件在屏幕中的位置</td></tr><tr><td><code>childCount</code></td><td>子控件数量</td></tr><tr><td><code>inputType</code></td><td>输入类型</td></tr><tr><td><code>maxTextLength</code></td><td>控件最大文本长度</td></tr><tr><td><code>clickable</code></td><td>是否可点击</td></tr><tr><td><code>checkable</code></td><td>是否可选中</td></tr><tr><td><code>checked</code></td><td>是否已选中</td></tr><tr><td><code>editable</code></td><td>是否支持编辑</td></tr><tr><td><code>enabled</code></td><td>是否可访问</td></tr><tr><td><code>visible</code></td><td>是否针对用户展示</td></tr><tr><td><code>dismissable</code></td><td>是否可取消</td></tr><tr><td><code>focusable</code></td><td>是否可以获取焦点</td></tr><tr><td><code>focused</code></td><td>是否已获取了焦点</td></tr><tr><td><code>longClickable</code></td><td>是否可以长按</td></tr></tbody></table><p>rect属性和方法</p><table><thead><tr><th>rect属性方法</th><th>描述</th></tr></thead><tbody><tr><td><code>rect.left</code></td><td>x坐标</td></tr><tr><td><code>rect.top</code></td><td>y坐标</td></tr><tr><td><code>rect.width()</code></td><td>控件的宽度</td></tr><tr><td><code>rect.height()</code></td><td>控件的高度</td></tr><tr><td><code>rect.centerX()</code></td><td>控件的中心坐标X</td></tr><tr><td><code>rect.centerY()</code></td><td>控件的中心坐标Y</td></tr></tbody></table><h2 id="二次检索"><a href="#二次检索" class="headerlink" title="二次检索"></a>二次检索</h2><p>二次检索的应用场景也挺多的，例如：我想先判断一次检索的控件存在时，再对找到的控件进行二次检索</p><h3 id="Node-find"><a href="#Node-find" class="headerlink" title="Node find"></a>Node find</h3><ul><li><code>Node().find(selector)</code><br>注意是要通过对象调用 <code>find(selector)</code> 方法<figure class="highlight python"><figcaption><span>二次检索示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> airscript.node <span class="keyword">import</span> Selector</span><br><span class="line"></span><br><span class="line">node =  Selector().<span class="built_in">id</span>(<span class="string">&quot;com.aojoy.airscript:id/search_query_section&quot;</span>).<span class="built_in">type</span>(<span class="string">&quot;FrameLayout&quot;</span>).find()</span><br><span class="line"><span class="keyword">if</span> node:</span><br><span class="line">    <span class="comment"># 在node控件中查找它的倒数第一个子控件</span></span><br><span class="line">    nchild = node.find(Selector().child(-<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">if</span> nchild:</span><br><span class="line">        <span class="built_in">print</span>(nchild)</span><br></pre></td></tr></table></figure><em><strong>注意二次检索需要使用一次检索的返回结果( <code>Node</code> 类型的控件)来调用 <code>find(selector)</code> 方法，同时注意其参数 <code>selector</code> 是 <code>Selector</code> 类型不用调用 <code>find()</code> 或 <code>find_all()</code> 方法，返回类型直接就是 <code>Node</code> 类型控件</strong></em></li><li><code>Node().find_all()</code><br><code>Node().find_all()</code> 和 <code>Node().find()</code> 方法同<code>Selector.find()</code><a href="#selector-find">参数用法</a>相同</li></ul><h3 id="获取关系控件"><a href="#获取关系控件" class="headerlink" title="获取关系控件"></a>获取关系控件</h3><p><code>Node().parent(*n)</code>、<code>Node().child(*num)</code>、<code>Node().brother(*n)</code> 都是用于二次检索时获取关系控件的方法，参数用法同<a href="#%E5%85%B3%E7%B3%BB%E7%BA%A6%E6%9D%9F%E8%A7%84%E5%88%99">关系约束规则</a>用法相同</p><h3 id="控件二次操作"><a href="#控件二次操作" class="headerlink" title="控件二次操作"></a>控件二次操作</h3><p><code>Node().click()</code>、<code>Node().long_click()</code>、<code>Node().slide(ori)</code>、<code>Node().input(content)</code>都是对控件二次操作的方法，参数同<a href="#%E9%80%89%E6%8B%A9%E5%99%A8-%E5%8A%A8%E4%BD%9C">动作</a>相同</p><h2 id="选择器实战"><a href="#选择器实战" class="headerlink" title="选择器实战"></a>选择器实战</h2><p>为了巩固学习效果，最好根据自己的需要尝试书写一个项目，在实战中应用学到的选择器，根据不同场景变换使用方式，下面是我实现的一个项目，能在某看小说APP中刷日常任务</p><figure class="highlight python"><figcaption><span>选择器实战</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># __init__.py 为初始化加载文件</span></span><br><span class="line"><span class="keyword">from</span> airscript.action <span class="keyword">import</span> click</span><br><span class="line"><span class="keyword">from</span> airscript.node <span class="keyword">import</span> Selector</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断是否有能用的item，返回item，没有返回null</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getItem</span>(<span class="params">tagStr</span>):</span><br><span class="line">    item = Selector().text(tagStr).<span class="built_in">type</span>(<span class="string">&quot;Button&quot;</span>).find()</span><br><span class="line">    <span class="keyword">if</span> Selector().text(tagStr).<span class="built_in">type</span>(<span class="string">&quot;TextView&quot;</span>).find():</span><br><span class="line">        item = Selector().text(tagStr).<span class="built_in">type</span>(<span class="string">&quot;TextView&quot;</span>).find()</span><br><span class="line">    <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主流程</span></span><br><span class="line">item = getItem(<span class="string">&quot;看视频&quot;</span>)</span><br><span class="line"><span class="keyword">while</span> item:  <span class="comment"># 当浏览项目按钮可用时</span></span><br><span class="line">    item.click()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;点击看视频按钮成功&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;浏览开始&quot;</span>)</span><br><span class="line">    sleep(<span class="number">18</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;浏览完成&quot;</span>)</span><br><span class="line">    fanhui = getItem(<span class="string">&quot;跳过广告&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> fanhui:</span><br><span class="line">        fanhui.click()</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line">    fanhui = Selector().<span class="built_in">type</span>(<span class="string">&quot;ImageView&quot;</span>).clickable(<span class="literal">True</span>).find()</span><br><span class="line">    <span class="keyword">if</span> fanhui:</span><br><span class="line">        fanhui.click()</span><br><span class="line">        sleep(<span class="number">1</span>) </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;返回已完成&quot;</span>)</span><br><span class="line">    item = getItem(<span class="string">&quot;看视频&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;All finished&quot;</span>)</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>本项目只用于学习参考，不得用于商业用途或违规传播，否则后果自负。</p></div><h2 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h2><p><code>android.graphics.Bitmap</code> 是AirScript中用于图像处理的数据类型，图像来源两种：截屏或文件</p><h3 id="截屏"><a href="#截屏" class="headerlink" title="截屏"></a>截屏</h3><p>默认全屏截屏，可指定截屏范围，用法如下：</p><figure class="highlight python"><figcaption><span>截屏</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> airscript.screen <span class="keyword">import</span> Screen </span><br><span class="line"><span class="keyword">from</span> airscript.system <span class="keyword">import</span> R</span><br><span class="line"></span><br><span class="line">bitmap = Screen.bitmap() <span class="comment"># 截取整个屏幕为Bitmap对象</span></span><br><span class="line">bitmap = Screen.bitmap(<span class="number">361</span>,<span class="number">309</span>,<span class="number">718</span>,<span class="number">659</span>) <span class="comment"># 截取屏幕范围[361,309,718,659]为Bitmap对象</span></span><br></pre></td></tr></table></figure><h3 id="图片文件"><a href="#图片文件" class="headerlink" title="图片文件"></a>图片文件</h3><h4 id="读取图片文件"><a href="#读取图片文件" class="headerlink" title="读取图片文件"></a>读取图片文件</h4><p>从文件读取的图片也是转为<code>Bitmap</code>对象</p><ul><li><code>Screen.file2Bitmap(path,sampleSize)</code><table><thead><tr><th>参数</th><th>类型</th><th>可选性</th><th>描述</th></tr></thead><tbody><tr><td><code>path</code></td><td><code>string</code></td><td>必选参数</td><td>图片路径</td></tr><tr><td><code>sampleSize</code></td><td><code>int</code></td><td>可选参数</td><td>采样尺寸,如参数为2:每隔2行,2列采集1行,结果为原图的1&#x2F;4大小</td></tr></tbody></table></li></ul><figure class="highlight python"><figcaption><span>读取图片文件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> airscript.screen <span class="keyword">import</span> Screen </span><br><span class="line"><span class="keyword">from</span> airscript.system <span class="keyword">import</span> R</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将sd卡中的文件/a/3.jpg 读取为bitmap对象</span></span><br><span class="line">bitmap = Screen.file2Bitmap(R.sd(<span class="string">&#x27;/a/3.jpg&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(bitmap.getWidth()) <span class="comment"># 展示图片尺寸信息</span></span><br></pre></td></tr></table></figure><h4 id="保存到图片文件"><a href="#保存到图片文件" class="headerlink" title="保存到图片文件"></a>保存到图片文件</h4><table><thead><tr><th>参数</th><th>类型</th><th>可选性</th><th>描述</th></tr></thead><tbody><tr><td><code>path</code></td><td>string</td><td>必选</td><td>保存路径</td></tr><tr><td><code>bitmap</code></td><td>Bitmap</td><td>可选</td><td>Android 图像,默认全屏截图</td></tr><tr><td><code>quality</code></td><td>int</td><td>可选</td><td>截图的清晰度 1~100,默认:100原图,20:20%原图分辨率</td></tr></tbody></table><figure class="highlight python"><figcaption><span>保存为图片文件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> airscript.screen <span class="keyword">import</span> Screen </span><br><span class="line"><span class="keyword">from</span> airscript.system <span class="keyword">import</span> R</span><br><span class="line"></span><br><span class="line"><span class="comment"># 截取屏幕到 /sd/a/1.png 目录中</span></span><br><span class="line">cpFile =  Screen.toFile(R.sd(<span class="string">&#x27;/a/1.png&#x27;</span>))</span><br><span class="line"><span class="comment"># 截取屏幕区域[10,10,500,500]到 /sd/a/2.png 目录中</span></span><br><span class="line">cpFile =  Screen.toFile(R.sd(<span class="string">&#x27;/a/2.jpg&#x27;</span>),Screen.bitmap(<span class="number">10</span>,<span class="number">10</span>,<span class="number">500</span>,<span class="number">500</span>))</span><br><span class="line"><span class="comment"># 截取屏幕到 /sd/a/3.png 目录中,清晰度为 50%</span></span><br><span class="line">cpFile =  Screen.toFile(R.sd(<span class="string">&#x27;/a/3.jpg&#x27;</span>),<span class="number">50</span>)</span><br><span class="line"><span class="comment"># 截取屏幕区域[10,10,500,500]到 /sd/a/4.png 目录中,清晰度为30%</span></span><br><span class="line">cpFile =  Screen.toFile(R.sd(<span class="string">&#x27;/a/4.jpg&#x27;</span>),Screen.bitmap(<span class="number">10</span>,<span class="number">10</span>,<span class="number">500</span>,<span class="number">500</span>),<span class="number">30</span>)</span><br></pre></td></tr></table></figure><h2 id="找色"><a href="#找色" class="headerlink" title="找色"></a>找色</h2><p>根据一组颜色找到满足限制的点，找色部分的几个函数都是使用可视化开发界面中的找色工具直接生成，这部分只要理解函数的作用、参数意义、找色原理即可。</p><ol><li><p>找色原理<br><code>FindColors(colors)</code><br>构造找色对象<br>颜色参数，由多组坐标与颜色构成，每一组颜色之间用<code>|</code>分割,例如:’426,346,#05D395|502,351,#05D015|676,569,#05D294’<br>上述含义：在<code>#05D395</code>这个颜色的相对位置<code>(x=502-426,y=351-346)</code>有一个颜色值 <code>#05D015</code>，<strong>并且</strong> 在<code>#05D395</code>这个颜色的相对位置<code>(x=676-426,y=569-346)</code> 存在一个颜色值 <code>#05D294</code>，找出满足此条件的点。</p><table><thead><tr><th>参数</th><th>类型</th><th>必须</th><th>描述</th></tr></thead><tbody><tr><td><code>colors</code></td><td>string</td><td>必填</td><td>颜色参数,一般使用编辑器中的找色工具生成</td></tr></tbody></table></li><li><p>范围<br><code>FindColors(colors).rect(x,y,x1,y1)</code><br>指定一个矩形范围，缺省rect参数(不加rect函数)时默认全屏找色</p></li><li><p>间隔<br><code>FindColors(colors).space(num)</code><br>指定找色结果点的间距，当找到的两个点间隔小于space参数值时合并两个点，缺省space(不加space函数)时默认space值为<code>5</code>，参数单位是像素</p></li><li><p>方向<br><code>FindColors(colors).ori(num)</code><br>指定找色的方向，缺省ori(不加ori函数)时默认为<code>2</code>，具体参数含义见官方文档中<a href="https://doc.airscript.cn/airapi/screen.html#%E6%96%B9%E5%90%91">示意图</a></p></li><li><p>偏色<br><code>FindColors(colors).diff(rgb)</code><br>设置偏色</p></li><li><p>返回结果</p></li></ol><ul><li><code>FindColors(colors).find()</code></li><li><code>FindColors(colors).find_all()</code><br>返回结果类型分别是Point类型和Point[]类型<figure class="highlight python"><figcaption><span>找色示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> airscript.screen <span class="keyword">import</span> FindColors</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造一个FindColor对象,并执行查找</span></span><br><span class="line">points = FindColors(<span class="string">&#x27;931,549,#EFEFEF|932,496,#EEEEEE|964,523,#EFEFEF|862,475,#0B0B16&#x27;</span>).find_all() <span class="comment"># 全屏查找，全采用默认参数</span></span><br><span class="line"><span class="keyword">if</span> points:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;共查到%d个结果&#x27;</span>%<span class="built_in">len</span>(points))</span><br><span class="line">    <span class="keyword">for</span> point <span class="keyword">in</span> points:</span><br><span class="line">        <span class="built_in">print</span>(point.x,point.y)</span><br></pre></td></tr></table></figure></li></ul><h2 id="找图"><a href="#找图" class="headerlink" title="找图"></a>找图</h2><p>通过局部图片，在屏幕中找到该图片的位置信息，支持全分辨率(局部图片尺寸不变，屏幕如何缩放，均可以找到位置信息)</p><ol><li>构造找图对象<br><code>FindImages(part_img)</code><br>创建一个找图对象<table><thead><tr><th>参数</th><th>类型</th><th>必须</th><th>描述</th></tr></thead><tbody><tr><td><code>part_img</code></td><td>string</td><td>必填</td><td>局部图片的绝对路径</td></tr></tbody></table></li></ol><p>如果没有局部图片的绝对路径可使用下面方法由相对路径生成绝对路径</p><figure class="highlight python"><figcaption><span>构造找图对象</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导包</span></span><br><span class="line"><span class="keyword">from</span> airscript.screen <span class="keyword">import</span> FindImages</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入上下文环境包,方便导入图片地址</span></span><br><span class="line"><span class="keyword">from</span> airscript.system <span class="keyword">import</span> R</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造一个FindColor对象,需要传入一个局部图片的路径</span></span><br><span class="line"><span class="comment"># 通过上下文R得到a.png的绝对位置</span></span><br><span class="line">path = R(__file__).res(<span class="string">&quot;/img/a.png&quot;</span>)</span><br><span class="line"><span class="comment"># 将路径传入FindImages 构建一个找图对象</span></span><br><span class="line">FindImages(path)</span><br></pre></td></tr></table></figure><ol start="2"><li><p>范围<br><code>FindImages(part_img).rect(l,t,r,b)</code><br>指定屏幕找图范围</p></li><li><p>匹配度<br><code>FindImages(part_img).confidence(num)</code><br>指定找图结果的可信度,过滤掉可信度低的结果</p><table><thead><tr><th>参数</th><th>类型</th><th>必须</th><th>描述</th></tr></thead><tbody><tr><td><code>num</code></td><td>int</td><td>必填</td><td>可信度,0~1,1为100%准确,0.8为80%的准确度</td></tr></tbody></table></li><li><p>查找模式</p></li></ol><ul><li><p>返回一个结果</p><table><thead><tr><th>查找模式</th><th>备注</th></tr></thead><tbody><tr><td><code>find</code></td><td>先使用<code>find_template</code>查找,如果找不到再用<code>find_sift</code>查找</td></tr><tr><td><code>find_sift</code></td><td>支持全分辨率的单图查找模式 优点:全分辨率 缺点:速度慢</td></tr><tr><td><code>find_template</code></td><td>优点:速度快 缺点:不支持全分辨率</td></tr></tbody></table></li><li><p>返回一组结果</p><table><thead><tr><th>查找模式</th><th>备注</th></tr></thead><tbody><tr><td><code>find_all</code></td><td>先使用<code>find_all_template</code>查找,如果找不到在用</td></tr><tr><td><code>find_all_sift</code></td><td>持全分辨率的查找模式 优点:全分辨率 缺点:速度慢</td></tr><tr><td><code>find_all_template</code></td><td>优点:速度快 缺点:不支持全分辨率</td></tr></tbody></table></li></ul><p><code>.find()</code>返回结果类型为Object对象</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//结果对象案例</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    &#x27;result&#x27;<span class="punctuation">:</span> (<span class="number">929.0</span><span class="punctuation">,</span> <span class="number">535.0</span>)<span class="punctuation">,</span> <span class="comment">//找到图片在屏幕上的中心点坐标</span></span><br><span class="line">    &#x27;rectangle&#x27;<span class="punctuation">:</span> ((<span class="number">832</span><span class="punctuation">,</span> <span class="number">437</span>)<span class="punctuation">,</span> (<span class="number">832</span><span class="punctuation">,</span> <span class="number">633</span>)<span class="punctuation">,</span> (<span class="number">1026</span><span class="punctuation">,</span> <span class="number">437</span>)<span class="punctuation">,</span> (<span class="number">1026</span><span class="punctuation">,</span> <span class="number">633</span>))<span class="punctuation">,</span> <span class="comment">//图片在屏幕中的范围,4个顶点的坐标</span></span><br><span class="line">    &#x27;confidence&#x27;<span class="punctuation">:</span> <span class="number">0.9975173473358154</span> <span class="comment">//可信度</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><code>.find_all()</code>返回结果类型为Object对象列表</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//结果对象案例</span></span><br><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        &#x27;result&#x27;<span class="punctuation">:</span> (<span class="number">929.0</span><span class="punctuation">,</span> <span class="number">535.0</span>)<span class="punctuation">,</span> <span class="comment">//找到图片在屏幕上的中心点坐标</span></span><br><span class="line">        &#x27;rectangle&#x27;<span class="punctuation">:</span> ((<span class="number">832</span><span class="punctuation">,</span> <span class="number">437</span>)<span class="punctuation">,</span> (<span class="number">832</span><span class="punctuation">,</span> <span class="number">633</span>)<span class="punctuation">,</span> (<span class="number">1026</span><span class="punctuation">,</span> <span class="number">437</span>)<span class="punctuation">,</span> (<span class="number">1026</span><span class="punctuation">,</span> <span class="number">633</span>))<span class="punctuation">,</span> <span class="comment">//图片在屏幕中的范围,4个顶点的坐标</span></span><br><span class="line">        &#x27;confidence&#x27;<span class="punctuation">:</span> <span class="number">0.9975173473358154</span> <span class="comment">//可信度</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p><code>.find()</code>使用返回结果示例</p><figure class="highlight python"><figcaption><span>find()示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导包</span></span><br><span class="line"><span class="keyword">from</span> airscript.screen <span class="keyword">import</span> FindImages</span><br><span class="line"><span class="keyword">from</span> airscript.system <span class="keyword">import</span> R</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造找图对象,并执行查找</span></span><br><span class="line">res = FindImages(R(__file__).res(<span class="string">&quot;/img/a.png&quot;</span>)).find() <span class="comment"># 先使用 find_template找不到结果,在用find_sift查询</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># res = FindImages(R(__file__).res(&quot;/img/a.png&quot;)).find_sift() # 全分辨率形式查询</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># res = FindImages(R(__file__).res(&quot;/img/a.png&quot;)).find_template() # 模版查询,速度快,但不支持全分辨率</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断结果不为空</span></span><br><span class="line"><span class="keyword">if</span> res:</span><br><span class="line">    <span class="comment"># 输入找图结果的属性</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;中心坐标为:x=%d,y=%d&quot;</span> % (res[<span class="string">&#x27;result&#x27;</span>][<span class="number">0</span>],res[<span class="string">&#x27;result&#x27;</span>][<span class="number">1</span>]))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;范围:&quot;</span>,res[<span class="string">&quot;rectangle&quot;</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;准确度:&quot;</span>,res[<span class="string">&quot;confidence&quot;</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><figcaption><span>find_all()示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导包</span></span><br><span class="line"><span class="keyword">from</span> airscript.screen <span class="keyword">import</span> FindImages</span><br><span class="line"><span class="keyword">from</span> airscript.system <span class="keyword">import</span> R</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造找图对象,过滤掉,可信度小于0.6的 并查找全部结果</span></span><br><span class="line">ress = FindImages(R(__file__).res(<span class="string">&quot;/img/a.png&quot;</span>)).confidence(<span class="number">0.6</span>).find_all()</span><br><span class="line"></span><br><span class="line"><span class="comment"># ress = FindImages(R(__file__).res(&quot;/img/a.png&quot;)).confidence(0.6).find_all() # 全分辨率查找模式,速度慢</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ress = FindImages(R(__file__).res(&quot;/img/a.png&quot;)).confidence(0.6).find_all_template() # 模版查找模式,速度快,但不支持全分辨率</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#判断结果不为空</span></span><br><span class="line"><span class="keyword">if</span> ress:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;共查到%d个结果&#x27;</span>%<span class="built_in">len</span>(ress))</span><br><span class="line">    <span class="comment">#输入找图结果的属性</span></span><br><span class="line">    <span class="keyword">for</span> res <span class="keyword">in</span> ress:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;中心坐标为:x=%d,y=%d&quot;</span> % (res[<span class="string">&#x27;result&#x27;</span>][<span class="number">0</span>],res[<span class="string">&#x27;result&#x27;</span>][<span class="number">1</span>]))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;范围:&quot;</span>,res[<span class="string">&quot;rectangle&quot;</span>])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;准确度:&quot;</span>,res[<span class="string">&quot;confidence&quot;</span>])</span><br></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>常用的功能就是上面这些，更多高级功能可在官方文档中学习，包括区域颜色量、目标检测、文字识别、比色、二维码识别、界面设计等</p>]]></content>
      
      
      <categories>
          
          <category> AirScript教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AirScript </tag>
            
            <tag> 自动化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手把手搭建个人博客系列教程-特别篇</title>
      <link href="/2024/06/16/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E7%89%B9%E5%88%AB%E7%AF%87/"/>
      <url>/2024/06/16/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E7%89%B9%E5%88%AB%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong><a href="#%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%B7%A5%E5%85%B7%E5%87%86%E5%A4%87">手把手搭建个人博客系列教程-特别篇</a>: 本节介绍几种解决Github、博客网站访问速度缓慢问题的方法</strong><br>从本系列博客搭建教程开始至今，我的个人博客已经试运行了一个月，在开发过程和后续的运行阶段博客网站访问速度较慢这个问题一直没有去解决，今天我将解决此问题并将解决方案分享给诸位。</p><hr><h2 id="环境配置与工具准备"><a href="#环境配置与工具准备" class="headerlink" title="环境配置与工具准备"></a>环境配置与工具准备</h2><ul><li>操作系统：Windows10 </li><li>Vercel</li><li>一个域名</li></ul><h2 id="Github访问过慢"><a href="#Github访问过慢" class="headerlink" title="Github访问过慢"></a>Github访问过慢</h2><p>现象：Github能访问但很慢或在某个时段访问很慢甚至访问不了，或者干脆什么时段都访问不了，提示 <code>无法访问此网站 www.github.com的相应时间过长</code><br>原因分析：访问慢可能是网速原因、DNS污染、浏览器缓存、服务端压力等因素导致</p><h3 id="网速问题"><a href="#网速问题" class="headerlink" title="网速问题"></a>网速问题</h3><ol><li>首先要排除网速导致的访问缓慢情况，建议先去国内视频网站逛逛，如 <a href="https://www.bilibili.com/">B站</a> 刷几个视频，画质调到<code>1080P</code>，看看视频卡不卡，缓存条走的快不快，如果播放视频都卡顿，那访问国外的Github就更卡顿了，或者直接国内都访问不了，那就看看电脑网络连接是否正常</li><li>看视频不直观的话可以直接对Github网站访问测速，推荐一个测速网站 <a href="https://zhale.me/http/">ZHALE.ME</a> ，搜索框中输入要测速的网站 <code>www.github.com</code> ，选择<code>快速检测</code>或<code>慢速监测</code>，如果是下面地图上显示的全红那就是网络出问题或网站被墙了</li><li>也可以在本地控制台cmd中输入命令 <code>ping www.github.com</code> 看发生丢包的比例，如果全丢了那就是网络问题了</li></ol><h3 id="浏览器缓存问题"><a href="#浏览器缓存问题" class="headerlink" title="浏览器缓存问题"></a>浏览器缓存问题</h3><p>浏览器缓存有时候也会导致访问Github速度慢甚至访问失败，建议使用Chrome和Edge来访问，访问失败时可以尝试清理浏览器缓存或更换浏览器尝试，之前有段时间Chrome访问失败时Edge能访问，后续应该是修复了。</p><h3 id="DNS污染"><a href="#DNS污染" class="headerlink" title="DNS污染"></a>DNS污染</h3><p>大多数访问Github慢都是这种情况。<br>正常情况下Github网站在测速网站中测试地图不会是全红，肯定有别的颜色，因为Github并没有像 <code>www.google.com</code> 这种网站一样被墙，Github在国内是可以正常访问的，只不过由于是国外网站访问速度慢一点而已。那么当确定网络没问题但就是访问慢时，就要怀疑是不是发生DNS污染了，我们通常通过修改host文件来解决DNS污染，具体如下：</p><ol><li>在 <a href="https://ip.tool.chinaz.com/www.github.com">IP查询网站</a> 查询Github的IP地址，复制IP地址</li><li>在 <code>C:\Windows\System32\drivers\etc</code> 路径找到host文件(可以 <code>win+r</code> 调出运行窗口，将路径输进去后回车直接进入host文件所在目录)</li><li>在修改host文件前最好将host文件复制一份重命名作为备份</li><li>在host文件上右键点击 <code>打开方式</code>，选择 <code>记事本</code> 打开</li><li>在文件最后添加Github的DNS解析，即 <code>20.205.243.166 www.github.com</code> ，前面的数字是你查出来的IP地址，后面是Github网站的域名，保存后关闭文件，注意：在host文件中 <code>#</code> 开头表示注释此行，即以#开头的行不启用</li><li>至此应该已经解决了DNS污染，访问 <code>www.github.com</code> 看看速度是不是提起来了</li></ol><p><em><strong>当然如果你是不差钱党，那就当我没说，直接VPN走起彻底解决DNS污染</strong></em></p><div class="note info flat"><p>DNS污染是什么？首先要认识到IP地址作用，IP地址就像网站的身份证，通过IP地址就能访问网站，但是这一串数字不好记忆，因此出现域名的概念，域名相当于网站提供给用户的网站别名，通过域名也可访问网站。如何将域名和IP地址对应就要借助DNS解析服务，而DNS污染就发生在此部分。<br>恶意攻击者在DNS服务器部分将域名重定向到错误的IP地址就是DNS污染，github访问慢很大概率就是 <code>github.com</code> 启用的CDN节点遭受了DNS污染<br>通过修改Host文件解决DNS污染原理是：本机的host文件中的DNS解析记录优先级比DNS服务器更高，计算机通过域名访问网站时会先到host文件中查找DNS解析记录，这样就跳过了DNS污染会发生的场景</p></div><div class="note warning flat"><p>注意：在运行杀毒软件进行网络检查时，以杀毒软件 <code>火绒</code> 为例会提示host文件修改，如果点击修复，杀毒软件会将host文件中自己添加的DNS解析记录注释掉。当你访问Github突然又慢下来了就去看看host文件中自己添加的DNS记录是否被注释掉了，没被注释掉的话可能就是DNS记录过时了，重新按照之前的步骤去查询IP地址，然后修改DNS记录。</p></div><h3 id="Github更新"><a href="#Github更新" class="headerlink" title="Github更新"></a>Github更新</h3><p>进行完上述的操作后仍旧不能访问，那就可能是Github那边的问题了，可能是Github新出了什么要求，去百度上搜搜<code>Github访问不了</code> 查看最近一周的回答，很可能就能找到解决方案</p><h3 id="玄学方案"><a href="#玄学方案" class="headerlink" title="玄学方案"></a>玄学方案</h3><p>当尝试过上面所有方法后访问速度仍旧不变，就可以尝试重启计算机了，这一项就属于玄学了，计算机领域圣经 <code>重启解决99%的问题</code> 依然适用，成功概率不大，但保不准你会成功呢！<br>有前人经验之谈，在西方国家晚上休息时段访问Github速度更快，因为那边服务器负载降低了，可能也有点用吧，emmm，可能。</p><h2 id="Vercel部署"><a href="#Vercel部署" class="headerlink" title="Vercel部署"></a>Vercel部署</h2><p><a href="https://vercel.com/">Vercel</a> 是一个代码托管平台，它能够托管静态HTML界面，甚至能够托管你的node.js与Python服务端脚本，如果暂时没有购买服务器的意愿可以尝试Vercel部署</p><ol><li>进入 <a href="https://vercel.com/">官网</a> 点击 <code>Sign up</code> 申请一个账号，跟着引导与自己的Github账号关联，这样在Vercel中就可直接查看并部署你的Github中的项目</li><li>在完成Github关联后，点击 <code>Add new Project</code> 创建一个项目，选择 <code>Continue with Github</code> ，此时就能看到Github账号下的仓库，找到之前在Github上部署的博客仓库 <code>[用户名].github.io</code>仓库，点击右边的 <code>Import</code> 导入仓库</li><li>进行项目的配置信息填写，没有特殊要求的就直接给项目起个名字后点击 <code>Deploy</code> ，其余选项使用默认的即可</li><li>等待一会后提示部署成功，点击 <code>Continue to Dashboard</code> 进入部署控制面板可以查看部署的详细信息，<em>注意默认给出的域是访问不到自己的网站的需要绑定自己的域名，还没有域名购买意愿的可以跳过下文的域名绑定部分</em></li></ol><h2 id="域名绑定"><a href="#域名绑定" class="headerlink" title="域名绑定"></a>域名绑定</h2><ol><li>购买自己喜欢的域名后就可以将自己的博客网站挂在域名上了，如果是采用Github Page服务，那么域名就暂时不用备案，当然如果你有服务器最好还是备个案比较好</li><li>在购买域名的服务商那里找到 <code>域名控制台</code>，选择 <code>解析服务</code>，选择添加记录，如果是一级域名，需要添加两种解析 <code>@</code> 和 <code>www</code>，以我的域名为例，<code>@</code> 对应域名为 <code>fjsi.top</code> 的解析，<code>www</code> 对应 <code>www.fjsi.top</code> 的解析记录，只有添加了解析记录，域名才能解析到你指定网站的IP地址上去</li><li>在Vercel控制面板右上角点击 <code>View Domains</code> 查看当前的域，我们可以看到仅有Vercel给你预分配的一个访问不了的域名(可能以前可以，最近好像被屏蔽了)，此时我们在输入框中输入自己购买的域名，以我为例：输入<code>fjsi.top</code>，点击 <code>Add</code> 添加添加后他会提示你添加DNS解析记录，按照提示去步骤2中添加解析记录的地方将Vercel给的解析记录添加上去</li><li>添加成功后回到Vercel可以看到添加成功的提示，这时候就能直接通过自己的域名访问自己的博客网站了</li><li>最后一步：去博客项目中将在全局配置文件 <code>_config.yml</code> 中将 <code>url</code> 配置项更改为自己的域名</li></ol>]]></content>
      
      
      <categories>
          
          <category> 博客搭建系列教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
            <tag> Vercel </tag>
            
            <tag> 访问加速 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>磁盘瘦身教程</title>
      <link href="/2024/05/28/%E7%A3%81%E7%9B%98%E7%98%A6%E8%BA%AB%E6%95%99%E7%A8%8B/"/>
      <url>/2024/05/28/%E7%A3%81%E7%9B%98%E7%98%A6%E8%BA%AB%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong><a href="#%E6%B8%85%E7%90%86temp%E6%96%87%E4%BB%B6%E5%A4%B9">磁盘瘦身教程</a>:  本节主要介绍几种磁盘清理的方案,以及计算机文件存储的特点,帮助使用者更好地了解和管理计算机文件.</strong></p><h2 id="环境与工具"><a href="#环境与工具" class="headerlink" title="环境与工具"></a>环境与工具</h2><ul><li>操作系统：Windows 10</li></ul><hr><h2 id="清理Temp文件夹"><a href="#清理Temp文件夹" class="headerlink" title="清理Temp文件夹"></a>清理Temp文件夹</h2><p>Temp文件夹是计算机系统在运行中的临时文件保存地方，例如常用的和不常用的软件运行时加载产生的临时文件都会存放在这里，在清理的时候他们的区别只在于：</p><ol><li>常用的软件在清理完成后我们下次打开运行软件，这些缓存的临时文件会再次被加载出来</li><li>不常用的软件，例如曾经使用过但已经卸载的软件，我们清理掉他的临时文件就腾出了空间</li></ol><p>清理方法：<br>快捷键 <code>WIN</code>+<code>R</code> 调出运行窗口，在窗口中键入命令 <code>%temp%</code> 进入打开temp文件夹，此操作相当于在文件夹中进入路径 <code>C:\Users\username\AppData\Local\Temp</code> 其中 <code>username</code> 是自己计算机的用户名，清理其中所有文件和文件夹，提示正在占用的直接跳过。</p><div class="note info flat"><p>注意：如果要尝试从路径进入Temp文件夹，而没有找到AppData文件夹，这是因为AppData保存软件数据被默认隐藏，这时候在任意文件夹的上方点击查看，勾选 <code>隐藏的项目</code> 选项就能显示出AppData等几个文件夹</p></div><p>这个清理腾出来的空间一般不大，如果我们之前并没有清理过Temp文件夹的话，第一次清理可能会发现清理出来的空间很大，但用一段时间后发现计算机C盘可用空间又变小了就是上面说的原因。</p><h2 id="磁盘清理功能"><a href="#磁盘清理功能" class="headerlink" title="磁盘清理功能"></a>磁盘清理功能</h2><p>在C盘上<code>右键</code>-&gt;<code>属性</code>-&gt;<code>磁盘清理</code>，在弹出的窗口中选择想要清除的内容，例如勾选 <code>临时文件</code> 和 <code>缩略图</code> ，点击确定完成清理</p><h2 id="将桌面大文件移动"><a href="#将桌面大文件移动" class="headerlink" title="将桌面大文件移动"></a>将桌面大文件移动</h2><p>很多计算机使用者习惯于将计算机桌面当成杂物堆，使用的时候都拿到桌面来，用完了不清理，时间久了就容易造成计算机C盘爆红，在路径 <code>C:\Users\username\</code> 的 <code>Desktop</code> 文件夹或者 <code>桌面</code> 文件夹上<code>右键</code>-&gt;<code>属性</code> 就能看到桌面上文件占据C盘的总空间大小，双击进去后就能看到在桌面的文件，将其中占据空间较大不常用的文件 <code>剪切</code> 后 <code>粘贴</code> 到其他非系统盘中</p><div class="note warning flat"><p>注意：这里提到的移动桌面大文件指的只是将不常用的文件移动到非系统盘，而不是说通过一系列操作将 <code>桌面路径</code> 从C盘更改到别的盘。桌面存在的意义就是暂时存放常用的文件，它在C盘就保证了其运行的很快，因为我们常常将读写速度更高的固态硬盘作为C盘</p></div><h2 id="虚拟内存管理"><a href="#虚拟内存管理" class="headerlink" title="虚拟内存管理"></a>虚拟内存管理</h2><p>通过按 <code>win</code> 键输入 <code>查看高级系统设置</code> 来进入到高级系统设置页面，以此点击 <code>高级</code>-&gt;<code>性能设置</code>-&gt;<code>高级</code>，在页面的中间部分会显示当前虚拟内存的大小，这我们知道就行不要修改。<br>在任务管理器的 <code>性能</code> 栏能看到 <code>提高页面大小 = 虚拟内存 + 物理内存</code>，同时虚拟内存在使用中优先度是要高于物理内存的。<br>虚拟内存是磁盘分了一块空间给系统作为RAM使用，减小后可能会导致系统报错，软件无法正常运行，因此使用默认的大小即可，不建议减小，有特殊需求可以增大，例如笔者当时使用自己的笔记本跑机器学习的模型时就调大了虚拟内存的空间大小。<br>也不要移动虚拟内存的页面文件 <code>pagefile.sys</code> 到别的盘，虚拟内存的功能就决定了它必须位于计算机磁盘中读写速度最快的盘，一般就是C盘了。</p><div class="note warning flat"><p>注意：强烈 <em><strong>不建议</strong></em> 减小虚拟内存的空间大小和移动虚拟内存页面文件，<em><strong>如果减小了虚拟内存的大小或移动虚拟内存页面文件可能有不可预料的后果发生</strong></em></p></div><h2 id="休眠文件管理"><a href="#休眠文件管理" class="headerlink" title="休眠文件管理"></a>休眠文件管理</h2><p>一般计算机在关机时会将内存的所有数据写入到 <code>hiberfil.sys</code> 休眠文件中方便下一次开机后将内存中数据再写回计算机重现关机时的状态<br>但是此功能和睡眠功能部分相同，差别在于睡眠功能是计算机保持耗电较少的开机状态，没关闭的应用保持打开的状态，在唤醒计算机后可立即恢复到离开时的状态，而休眠功能能在计算机关机后，下次开机时恢复到关机前的状态<br>不介意这点差别的用户可以通过下面命令关闭休眠功能，<strong>如果你经常用休眠功能那就别关</strong><br>休眠功能关闭方式：按下 <code>win</code> 键搜索 <code>cmd</code> ，<code>右键</code>-&gt;<code>以管理员身份运行</code>，在控制台窗口运行下面命令关闭休眠</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powercfg -h off</span><br></pre></td></tr></table></figure><p>关闭成功后会发现休眠文件 <code>hiberfil.sys</code> 不见了<br>之后如果又需要使用休眠功能时使用下面代码开启：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powercfg -h on</span><br></pre></td></tr></table></figure><h2 id="临时文件清理"><a href="#临时文件清理" class="headerlink" title="临时文件清理"></a>临时文件清理</h2><p>使用快捷键 <code>WIN</code>+<code>R</code> 键打开设置，选择 <code>系统</code>-&gt;<code>存储</code>-&gt;<code>临时文件</code>，等待扫描完成后，选中要清理的项进行删除，注意要根据清理项下面的介绍来决定是否清理</p><h2 id="软件管理"><a href="#软件管理" class="headerlink" title="软件管理"></a>软件管理</h2><h3 id="安装路径设置"><a href="#安装路径设置" class="headerlink" title="安装路径设置"></a>安装路径设置</h3><p>计算机上很多软件下载安装包进行安装时会默认将软件安装到 <code>C:\Users\用户名\ProgramFiles</code> 路径或者 <code>C:\Users\用户名\AppData\Roaming</code> 路径，这部分软件安装在C盘会极大的占用C盘的空间，关于安装目录在这个<a href="https://www.zhihu.com/question/548340950/answer/2637630471">root大佬的回答</a>里有较详细的介绍<br>而这部分软件是可以自定义安装路径到非系统盘来节省C盘空间的，在安装界面中仔细找找，一般会在角落里或者以颜色偏淡的字体显示的 <code>自定义安装</code> ，点击 <code>自定义安装</code>-&gt;<code>浏览</code>，在出现的目录中选择别的磁盘作为安装路径，必要时可以在别的磁盘新建文件夹重命名后设置路径在此处，然后安装。<br>不要在安装的时候看到 <code>快速安装</code> 按钮就直接点击了，最好先找找有没有 <code>自定义安装</code> 选项，<code>快速安装</code> 就会采用C盘的默认安装路径作为软件安装路径。</p><h3 id="避免安装捆绑软件"><a href="#避免安装捆绑软件" class="headerlink" title="避免安装捆绑软件"></a>避免安装捆绑软件</h3><p>设置安装路径是一方面，避免安装捆绑是另一方面，很多软件(特别是盗版或者破解软件)在安装时会在安装界面默认勾选几款捆绑软件，显示的字体一般比较小或者位置隐蔽，要有意识地仔细找找，取消勾选后再安装，推荐去软件官网下载软件，捆绑软件的情况比较少</p><h3 id="下载缓存路径设置"><a href="#下载缓存路径设置" class="headerlink" title="下载缓存路径设置"></a>下载缓存路径设置</h3><p>安装好软件后，最好先进入到软件的设置界面，查看是否有 <code>文件管理</code> 或 <code>默认下载位置</code> 或 <code>缓存保存位置</code> 等软件专用的保存路径设置，大多数会默认将数据保存到C盘，如果可以设置的话最好将路径更改到别的盘，为方便管理避免混淆，最好将路径更改到软件安装文件夹路径里。<br>例如我的微信安装在 <code>E:\WeChat</code>，我就会在此目录下创建一个 <code>WeChat Files</code> 文件夹，之后在微信的设置里选择 <code>文件管理</code> 选项，将文件路径更改为 <code>E:\WeChat\WeChat Files</code></p><h3 id="卸载软件"><a href="#卸载软件" class="headerlink" title="卸载软件"></a>卸载软件</h3><p>在卸载软件时最好通过 <code>设置</code> 中的 <code>更改或卸载程序</code> 来卸载软件或者在相关文件(例如快捷方式)上 <code>右键</code>-&gt;<code>属性</code>-&gt;<code>打开文件所在位置</code> 找到软件安装的根目录，运行一个<em>包含类似</em> <code>uninstall</code> 或 <code>uninst</code> 名字的exe文件，这个就是卸载程序，运行卸载程序进行卸载一般会将不必要的相关依赖都一起卸载。</p><div class="note info flat"><p>注意卸载的时候也要关注卸载界面上的选项勾选，有的软件在卸载时还会默认勾选安装捆绑软件(血的教训😭)</p></div><h2 id="浏览器下载管理"><a href="#浏览器下载管理" class="headerlink" title="浏览器下载管理"></a>浏览器下载管理</h2><p>我们计算机上安装软件大多是通过浏览器下载安装包后运行安装包来安装的，平时在网页上浏览资料后也是在浏览器上直接下载，因此设置浏览器的下载路径就尤为重要了</p><ol><li>点击 <code>浏览器右上角</code>-&gt;<code>设置</code>-&gt;<code>下载内容</code>，更改下载内容的位置到非系统盘，最好建立一个文件夹好管理，例如我的浏览器下载位置就修改为了 <code>D:\Downloadfromchrome</code></li><li>定期清理浏览器下载路径中的文件，例如安装过的软件安装包、不再使用的资料文件</li></ol><h2 id="回收站管理"><a href="#回收站管理" class="headerlink" title="回收站管理"></a>回收站管理</h2><p>文件放入回收站并不是将文件数据从计算机上抹除了，而是相当于放到暂存区了，放入回收站的文件依然可以恢复到原位置，此时放入回收站的文件仍占着磁盘的空间，对系统盘和非系统盘都是这样<br>在回收站里 <code>右键</code> 文件选择永久删除才是将数据从计算机上抹除了，或者在回收站上 <code>右键</code>-&gt;<code>清空回收站</code> 一次性将回收站内容永久删除</p><div class="note warning flat"><p>注意：在清空回收站之前一定要先进入回收站检查，确认文件数据都不会再使用了再清空</p></div><h2 id="空间管理工具"><a href="#空间管理工具" class="headerlink" title="空间管理工具"></a>空间管理工具</h2><p>推荐几款我自己使用过效果不错的空间管理工具，有需要的可以去官网下载</p><ol><li>Everything<br>一款用于查找计算机文件的工具，在打开软件后会先经历一段时间的初始化(软件左下角显示状态)，在这段时间里，Everything会将全盘文件快速扫描建立目录，之后在上方搜索栏搜索文件就能很快的定位，速度近乎实时，在搜素出来的文件或文件夹上右键可以打开菜单</li><li>SpaceSniffer<br>一款用于了解磁盘空间占有的工具，打开后先选择要查看的盘符点击<code>Start</code>，之后会自动扫描整个盘，将文件夹和文件以多级树状图的结构化布局呈现，橙色为文件夹，蓝色为文件。<br>同时也支持扫描指定的路径下所有文件和文件夹，在选盘符的界面点击下方的<code>Path</code> 进入路径选择界面，在这里可以选择希望扫描的文件夹，当然你也可以直接在 <code>Path</code> 右边的输入框内键入目标文件夹的绝对路径，选好后点击 <code>Start</code> 开启扫描<br>扫描完成后单击文件夹就可进入文件夹目录呈现下一层级的文件目录，双击标头可将当前文件夹操作界面放大<br>注意：我们能在此界面查看到很多重要文件，在了解文件的功能前不要为了清理空间盲目清理。</li><li>FolderSize<br>一款用于显示文件夹大小的软件，在软件运行后，打开文件夹时就会在右侧显示当前文件夹下的一级子文件夹和文件的大小等相关信息</li></ol><h2 id="选用云服务"><a href="#选用云服务" class="headerlink" title="选用云服务"></a>选用云服务</h2><p>将计算机上不常用的大文件或者要备份的数据文件通过云服务上传到云平台上进行管理，例如百度网盘、阿里云盘等云托管平台，在需要使用的时候下载到本地，注意在云平台上最好也分门别类地管理文件，方便查找备份使用。</p><h2 id="想说的话"><a href="#想说的话" class="headerlink" title="想说的话"></a>想说的话</h2><p>上面的教程中很多部分都讲的是如何清理C盘空间，其实别的盘也是一样的，也是需要科学管理的，如果在磁盘中不区分分类管理各个文件或软件，长此以往也会造成文件目录结构混乱、文件管理困难、磁盘爆红等后果。<br>磁盘清理只是给磁盘做了次大清洗，治标不治本，打个比方：磁盘大清理就相当于洗了一次彻底的澡，虽然这次干净了，但是之后不注意保持个人卫生，还是会很快变脏，最根本有效的方法就是时常清洁，保持干净卫生，在磁盘清理上来说就是要定期地清理多余、不常用的文件，平时注意软件的安装路径，定期清空回收站，学会科学的文件分类管理。将不常用的文件通过云服务上传到云盘里，用的时候下载，给本地腾出多余的空间来。</p><div class="note warning flat"><p><em>注意：在你充分了解一个文件的功能并确认它对你没有用处之前不要轻易删除或者挪动文件或文件夹，特别是C盘的文件，有一部分是系统文件，在随意更改或挪动位置后可能引起系统故障，如果你没有把握决定是否清理某些文件，首先上网查询资料了解文件的功能，其次思考是否必须删除或更改移动此文件，最后当你一定要删除此文件而自己没把握时寻求专业人士的帮助。</em></p></div>]]></content>
      
      
      <categories>
          
          <category> 磁盘瘦身教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 磁盘清理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手把手搭建个人博客系列教程-七</title>
      <link href="/2024/05/24/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E4%B8%83/"/>
      <url>/2024/05/24/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E4%B8%83/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong><a href="#%E9%AD%94%E6%94%B9%E8%8F%9C%E5%8D%95%E6%A0%8F">手把手搭建个人博客系列教程-七</a>:  本节主要介绍如何实现魔改菜单栏,夜间霓虹灯,个人卡片渐变色,个人卡片发光,页面样式调节等</strong></p><blockquote><p><strong>参考文档:</strong></p><ul><li><a href="https://butterfly.js.org/posts/21cfbf15/">Butterfly主题的官方文档</a></li><li><a href="https://www.fomal.cc/posts/eec9786.html">Fomalhaut🥝大佬的博客</a></li></ul></blockquote><h2 id="环境与工具"><a href="#环境与工具" class="headerlink" title="环境与工具"></a>环境与工具</h2><ul><li>操作系统：Windows 10</li><li>VSCode编辑器</li></ul><hr><h2 id="魔改菜单栏"><a href="#魔改菜单栏" class="headerlink" title="魔改菜单栏"></a>魔改菜单栏</h2><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>在配置文件 <code>custom.css</code> 中添加配置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 一级菜单居中 */</span></span><br><span class="line"><span class="selector-id">#nav</span> <span class="selector-class">.menus_items</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">width</span>: fit-content <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 子菜单横向展示 */</span></span><br><span class="line"><span class="selector-id">#nav</span> <span class="selector-class">.menus_items</span> <span class="selector-class">.menus_item</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.menus_item_child</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 这里的2是代表导航栏的第6个元素，即有子菜单的元素，要根据自己需求来修改 */</span></span><br><span class="line"><span class="selector-class">.menus_items</span> <span class="selector-class">.menus_item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">5</span>) <span class="selector-class">.menus_item_child</span> &#123;</span><br><span class="line">  <span class="attribute">left</span>: -<span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="引入配置文件"><a href="#引入配置文件" class="headerlink" title="引入配置文件"></a>引入配置文件</h3><p>在主题配置文件 <code>_config.butterfly.yml</code> 中inject的head部分注入 <code>custom.css</code> 样式文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/custom.css&quot;&gt;</span></span><br></pre></td></tr></table></figure><p><em><strong>注意： 之前如果已经引入过 <code>custom.css</code> 就不用再引入了</strong></em></p><h2 id="夜间霓虹灯"><a href="#夜间霓虹灯" class="headerlink" title="夜间霓虹灯"></a>夜间霓虹灯</h2><p>实现的原理就是关键帧线性插值，然后一直循环，这里默认是左上角标题、中间标题和副标题，还有文章页头的标题和信息有循环霓虹灯，详见<a href="https://www.fomal.cc/posts/eec9786.html#%E9%BB%91%E5%A4%9C%E9%9C%93%E8%99%B9%E7%81%AF2-0%EF%BC%88%E7%BA%AFCSS%E5%AE%9E%E7%8E%B0%EF%BC%89">黑夜霓虹灯纯css</a></p><h3 id="修改配置文件-1"><a href="#修改配置文件-1" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>修改 <code>custom.css</code> 样式文件，在其中添加夜间霓虹灯效果的css代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 日间模式不生效 */</span></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;light&quot;</span>]</span> <span class="selector-id">#site-name</span>,</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;light&quot;</span>]</span> <span class="selector-id">#site-title</span>,</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;light&quot;</span>]</span> <span class="selector-id">#site-subtitle</span>,</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;light&quot;</span>]</span> <span class="selector-id">#post-info</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 夜间模式生效 */</span></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-id">#site-name</span>,</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-id">#site-title</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: light_15px <span class="number">10s</span> linear infinite;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-id">#site-subtitle</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: light_10px <span class="number">10s</span> linear infinite;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-id">#post-info</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: light_5px <span class="number">10s</span> linear infinite;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 关键帧描述 */</span></span><br><span class="line"><span class="keyword">@keyframes</span> light_15px &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">#5636ed</span> <span class="number">0</span> <span class="number">0</span> <span class="number">15px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">12.5%</span> &#123;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">#11ee5e</span> <span class="number">0</span> <span class="number">0</span> <span class="number">15px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">25%</span> &#123;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">#f14747</span> <span class="number">0</span> <span class="number">0</span> <span class="number">15px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">37.5%</span> &#123;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">#f1a247</span> <span class="number">0</span> <span class="number">0</span> <span class="number">15px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">50%</span> &#123;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">#f1ee47</span> <span class="number">0</span> <span class="number">0</span> <span class="number">15px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">50%</span> &#123;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">#b347f1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">15px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">62.5%</span> &#123;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">#002afa</span> <span class="number">0</span> <span class="number">0</span> <span class="number">15px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">75%</span> &#123;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">#ed709b</span> <span class="number">0</span> <span class="number">0</span> <span class="number">15px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">87.5%</span> &#123;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">#39c5bb</span> <span class="number">0</span> <span class="number">0</span> <span class="number">15px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">#5636ed</span> <span class="number">0</span> <span class="number">0</span> <span class="number">15px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> light_10px &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">#5636ed</span> <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">12.5%</span> &#123;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">#11ee5e</span> <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">25%</span> &#123;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">#f14747</span> <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">37.5%</span> &#123;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">#f1a247</span> <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">50%</span> &#123;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">#f1ee47</span> <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">50%</span> &#123;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">#b347f1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">62.5%</span> &#123;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">#002afa</span> <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">75%</span> &#123;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">#ed709b</span> <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">87.5%</span> &#123;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">#39c5bb</span> <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">#5636ed</span> <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> light_5px &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">#5636ed</span> <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">12.5%</span> &#123;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">#11ee5e</span> <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">25%</span> &#123;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">#f14747</span> <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">37.5%</span> &#123;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">#f1a247</span> <span class="number">0</span> <span class="number">0</span> <span class="number">15px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">50%</span> &#123;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">#f1ee47</span> <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">50%</span> &#123;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">#b347f1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">62.5%</span> &#123;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">#002afa</span> <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">75%</span> &#123;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">#ed709b</span> <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">87.5%</span> &#123;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">#39c5bb</span> <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">#5636ed</span> <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在主题配置文件中<a href="#%E5%BC%95%E5%85%A5%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">引入</a></p><h2 id="个人卡片渐变色"><a href="#个人卡片渐变色" class="headerlink" title="个人卡片渐变色"></a>个人卡片渐变色</h2><p>详见<a href="https://www.fomal.cc/posts/eec9786.html#%E4%B8%AA%E4%BA%BA%E5%8D%A1%E7%89%87%E6%B8%90%E5%8F%98%E8%89%B2">个人卡片渐变色</a>，实现白天个人卡片渐变色背景</p><h3 id="修改配置文件-2"><a href="#修改配置文件-2" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>在 <code>custom.css</code> 中添加样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 侧边栏个人信息卡片动态渐变色 */</span></span><br><span class="line"><span class="selector-id">#aside-content</span> &gt; <span class="selector-class">.card-widget</span><span class="selector-class">.card-info</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(</span><br><span class="line">    -<span class="number">45deg</span>,</span><br><span class="line">    <span class="number">#e8d8b9</span>,</span><br><span class="line">    <span class="number">#eccec5</span>,</span><br><span class="line">    <span class="number">#a3e9eb</span>,</span><br><span class="line">    <span class="number">#bdbdf0</span>,</span><br><span class="line">    <span class="number">#eec1ea</span></span><br><span class="line">  );</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgb</span>(<span class="number">66</span>, <span class="number">68</span>, <span class="number">68</span>);</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">400%</span> <span class="number">400%</span>;</span><br><span class="line">  -webkit-<span class="attribute">animation</span>: Gradient <span class="number">10s</span> ease infinite;</span><br><span class="line">  -moz-<span class="attribute">animation</span>: Gradient <span class="number">10s</span> ease infinite;</span><br><span class="line">  <span class="attribute">animation</span>: Gradient <span class="number">10s</span> ease infinite <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@-webkit-keyframes</span> Gradient &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0%</span> <span class="number">50%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">50%</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">100%</span> <span class="number">50%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0%</span> <span class="number">50%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@-moz-keyframes</span> Gradient &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0%</span> <span class="number">50%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">50%</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">100%</span> <span class="number">50%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0%</span> <span class="number">50%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> Gradient &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0%</span> <span class="number">50%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">50%</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">100%</span> <span class="number">50%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0%</span> <span class="number">50%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 黑夜模式适配 */</span></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-id">#aside-content</span> &gt; <span class="selector-class">.card-widget</span><span class="selector-class">.card-info</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#191919ee</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 个人信息Follow me按钮 */</span></span><br><span class="line"><span class="selector-id">#aside-content</span> &gt; <span class="selector-class">.card-widget</span><span class="selector-class">.card-info</span> &gt; <span class="selector-id">#card-info-btn</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#3eb8be</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在主题配置文件中将配置文件<a href="#%E5%BC%95%E5%85%A5%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">引入</a></p><h2 id="个人卡片发光"><a href="#个人卡片发光" class="headerlink" title="个人卡片发光"></a>个人卡片发光</h2><p>设置个人卡片夜间发光，包含边框动态特效和背景发光等，参考<a href="https://www.bilibili.com/video/BV1oq4y1y7vo">艾恩小灰灰</a></p><h3 id="修改配置文件-3"><a href="#修改配置文件-3" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>在 <code>custom.css</code> 中添加下面的样式配置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 夜晚个人信息卡片增加发光外边框 */</span></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-id">#aside-content</span>&gt;<span class="selector-class">.card-widget</span><span class="selector-class">.card-info</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#121212</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* before和after俩伪元素写一起 */</span></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-id">#aside-content</span>&gt;<span class="selector-class">.card-widget</span><span class="selector-class">.card-info</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-id">#aside-content</span>&gt;<span class="selector-class">.card-widget</span><span class="selector-class">.card-info</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#1cb4d3</span>;</span><br><span class="line">    <span class="comment">/* 加个动画过渡 */</span></span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">0.5s</span> ease-in-out <span class="number">0.5s</span>;</span><br><span class="line">    <span class="attribute">transition-delay</span>: <span class="number">0s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* before特有部分 */</span></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-id">#aside-content</span>&gt;<span class="selector-class">.card-widget</span><span class="selector-class">.card-info</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* 删除左边元素的右边框和下边框 */</span></span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* after特有部分 */</span></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-id">#aside-content</span>&gt;<span class="selector-class">.card-widget</span><span class="selector-class">.card-info</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* 删除右边元素的左边框和上边框 */</span></span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-id">#aside-content</span>&gt;<span class="selector-class">.card-widget</span><span class="selector-class">.card-info</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(circle at center, <span class="number">#555</span>, <span class="number">#000</span>);</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="comment">/* 发光效果 */</span></span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">25px</span> <span class="number">#1cb4d3</span>;</span><br><span class="line">    <span class="comment">/* 加个动画过渡 */</span></span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease-in-out;</span><br><span class="line">    <span class="attribute">transition-delay</span>: <span class="number">0.3s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-id">#aside-content</span>&gt;<span class="selector-class">.card-widget</span><span class="selector-class">.card-info</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-id">#aside-content</span>&gt;<span class="selector-class">.card-widget</span><span class="selector-class">.card-info</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">0.5s</span> ease-in;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在主题配置文件中<a href="#%E5%BC%95%E5%85%A5%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">引入</a></p><h2 id="页面样式调节"><a href="#页面样式调节" class="headerlink" title="页面样式调节"></a>页面样式调节</h2><h3 id="修改配置文件-4"><a href="#修改配置文件-4" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>在 <code>custom.css</code> 文件中添加下面的配置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attr">--trans-light</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.88</span>);</span><br><span class="line">  <span class="attr">--trans-dark</span>: <span class="built_in">rgba</span>(<span class="number">25</span>, <span class="number">25</span>, <span class="number">25</span>, <span class="number">0.88</span>);</span><br><span class="line">  <span class="attr">--border-style</span>: <span class="number">1px</span> solid <span class="built_in">rgb</span>(<span class="number">169</span>, <span class="number">169</span>, <span class="number">169</span>);</span><br><span class="line">  <span class="attr">--backdrop-filter</span>: <span class="built_in">blur</span>(<span class="number">5px</span>) <span class="built_in">saturate</span>(<span class="number">150%</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 首页文章卡片 */</span></span><br><span class="line"><span class="selector-id">#recent-posts</span> &gt; <span class="selector-class">.recent-post-item</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">var</span>(--trans-light);</span><br><span class="line">  backdrop-<span class="attribute">filter</span>: <span class="built_in">var</span>(--backdrop-filter);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="built_in">var</span>(--border-style);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 首页侧栏卡片 */</span></span><br><span class="line"><span class="selector-id">#aside-content</span> <span class="selector-class">.card-widget</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">var</span>(--trans-light);</span><br><span class="line">  backdrop-<span class="attribute">filter</span>: <span class="built_in">var</span>(--backdrop-filter);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">18px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="built_in">var</span>(--border-style);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 文章页、归档页、普通页面 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#post</span>,</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#page</span>,</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#archive</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">var</span>(--trans-light);</span><br><span class="line">  backdrop-<span class="attribute">filter</span>: <span class="built_in">var</span>(--backdrop-filter);</span><br><span class="line">  <span class="attribute">border</span>: <span class="built_in">var</span>(--border-style);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 导航栏 */</span></span><br><span class="line"><span class="selector-id">#page-header</span><span class="selector-class">.nav-fixed</span> <span class="selector-id">#nav</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.75</span>);</span><br><span class="line">  backdrop-<span class="attribute">filter</span>: <span class="built_in">var</span>(--backdrop-filter);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-id">#page-header</span><span class="selector-class">.nav-fixed</span> <span class="selector-id">#nav</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.7</span>) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 夜间模式遮罩 */</span></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-id">#recent-posts</span> &gt; <span class="selector-class">.recent-post-item</span>,</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-id">#aside-content</span> <span class="selector-class">.card-widget</span>,</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-tag">div</span><span class="selector-id">#post</span>,</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-tag">div</span><span class="selector-id">#archive</span>,</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-tag">div</span><span class="selector-id">#page</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">var</span>(--trans-dark);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 夜间模式页脚页头遮罩透明 */</span></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-id">#footer</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-id">#page-header</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 阅读模式 */</span></span><br><span class="line"><span class="selector-class">.read-mode</span> <span class="selector-id">#aside-content</span> <span class="selector-class">.card-widget</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">158</span>, <span class="number">204</span>, <span class="number">171</span>, <span class="number">0.5</span>) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.read-mode</span> <span class="selector-tag">div</span><span class="selector-id">#post</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">158</span>, <span class="number">204</span>, <span class="number">171</span>, <span class="number">0.5</span>) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 夜间模式下的阅读模式 */</span></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-class">.read-mode</span> <span class="selector-id">#aside-content</span> <span class="selector-class">.card-widget</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">25</span>, <span class="number">25</span>, <span class="number">25</span>, <span class="number">0.9</span>) <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-class">.read-mode</span> <span class="selector-tag">div</span><span class="selector-id">#post</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">25</span>, <span class="number">25</span>, <span class="number">25</span>, <span class="number">0.9</span>) <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在主题配置文件中<a href="#%E5%BC%95%E5%85%A5%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">引入</a></p><h2 id="全局吸底aplayer"><a href="#全局吸底aplayer" class="headerlink" title="全局吸底aplayer"></a>全局吸底aplayer</h2><p>页面底部音乐播放器，可链接歌手、歌单、搜索等.</p><h3 id="开启aplayerInject"><a href="#开启aplayerInject" class="headerlink" title="开启aplayerInject"></a>开启aplayerInject</h3><p>在主题配置文件 <code>_config.butterfly.yml</code> 中开启aplayerInject配置项</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Inject the css and script (aplayer/meting)</span></span><br><span class="line"><span class="attr">aplayerInject:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="aplayer代码插入"><a href="#aplayer代码插入" class="headerlink" title="aplayer代码插入"></a>aplayer代码插入</h3><p>在主题配置文件 <code>_config.butterfly.yml</code> 的Insert部分插入以下代码</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;div</span> <span class="string">class=&quot;aplayer</span> <span class="literal">no</span><span class="string">-destroy&quot;</span> <span class="string">data-id=&quot;7194024885&quot;</span> <span class="string">data-server=&quot;netease&quot;</span> <span class="string">data-type=&quot;playlist&quot;</span> <span class="string">data-fixed=&quot;true&quot;</span> <span class="string">data-mini=&quot;true&quot;</span> <span class="string">data-autoplay=&quot;false&quot;&gt;</span> <span class="string">&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><p><em>要注意严格缩进</em></p><h3 id="配置项含义"><a href="#配置项含义" class="headerlink" title="配置项含义"></a>配置项含义</h3><table><thead><tr><th>配置项</th><th>描述</th></tr></thead><tbody><tr><td>data-id</td><td><code>song id</code>&#x2F;<code>playlist id</code>&#x2F;<code>album id</code>&#x2F;<code>search keyword</code></td></tr><tr><td>data-server</td><td>音乐平台: <code>netease</code>,<code>tencent</code>,<code>kugou</code>,<code>xiami</code>,<code>baidu</code></td></tr><tr><td>data-type</td><td><code>song</code>,<code>playlist</code>,<code>album</code>,<code>search</code>,<code>artist</code></td></tr><tr><td>data-autoplay</td><td><code>true</code> or <code>false</code>，可选项默认 <code>false</code></td></tr></tbody></table><div class="note info flat"><p><em>注意：<code>data-fixed</code> 和 <code>data-mini</code> 两项是为了实现页面切换时歌曲不暂停不切换功能，如果不需要这个功能就直接去掉这两项就行</em></p></div><h3 id="开启pjax"><a href="#开启pjax" class="headerlink" title="开启pjax"></a>开启pjax</h3><p>如果想要在切换页面时音乐不中断，还要在主题配置文件 <code>_config.butterfly.yml</code> 中开启pjax项</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pjax:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="音乐页"><a href="#音乐页" class="headerlink" title="音乐页"></a>音乐页</h2><h3 id="建立和书写音乐页"><a href="#建立和书写音乐页" class="headerlink" title="建立和书写音乐页"></a>建立和书写音乐页</h3><p>通过命令 <code>hexo new page music</code> 创建一个music页面，在页面文件中写入页面HTML，参考<a href="https://blog.csdn.net/liudonglovehemin/article/details/131344094">korgs大佬的文章</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;music-page&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> userId = <span class="string">&quot;7194024885&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> userServer = <span class="string">&quot;netease&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> userType = <span class="string">&quot;playlist&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> params = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">search</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> _param = &#123;</span></span><br><span class="line"><span class="language-javascript">         <span class="attr">getCustomPlayList</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> musicPage = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;music-page&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> playlistType = params.<span class="title function_">get</span>(<span class="string">&quot;type&quot;</span>) || <span class="string">&quot;playlist&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (params.<span class="title function_">get</span>(<span class="string">&quot;id&quot;</span>) &amp;&amp; params.<span class="title function_">get</span>(<span class="string">&quot;server&quot;</span>)) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> id = params.<span class="title function_">get</span>(<span class="string">&quot;id&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> server = params.<span class="title function_">get</span>(<span class="string">&quot;server&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                musicPage.<span class="property">innerHTML</span> = <span class="string">`&lt;meting-js listMaxHeight=&quot;600px&quot;id=&quot;<span class="subst">$&#123;id&#125;</span>&quot;server=&quot;<span class="subst">$&#123;server&#125;</span>&quot;type=&quot;<span class="subst">$&#123;playlistType&#125;</span>&quot;mutex=&quot;true&quot;preload=&quot;auto&quot;order=&quot;random&quot;autoplay=&quot;true&quot;&gt;&lt;/meting-js&gt;`</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                musicPage.<span class="property">innerHTML</span> = <span class="string">`&lt;meting-js listMaxHeight=&quot;600px&quot;id=&quot;<span class="subst">$&#123;userId&#125;</span>&quot;server=&quot;<span class="subst">$&#123;userServer&#125;</span>&quot;type=&quot;<span class="subst">$&#123;userType&#125;</span>&quot;mutex=&quot;true&quot;preload=&quot;auto&quot;order=&quot;random&quot;autoplay=true&gt;&lt;/meting-js&gt;`</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    _param.<span class="title function_">getCustomPlayList</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vh = <span class="variable language_">window</span>.<span class="property">innerHeight</span> * <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">&#x27;--vh&#x27;</span>, <span class="string">`<span class="subst">$&#123;vh&#125;</span>px`</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> vh = <span class="variable language_">window</span>.<span class="property">innerHeight</span> * <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">&#x27;--vh&#x27;</span>, <span class="string">`<span class="subst">$&#123;vh&#125;</span>px`</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="#%E9%85%8D%E7%BD%AE%E9%A1%B9%E5%90%AB%E4%B9%89">配置项含义同上</a><br><em>虽然说支持别的播放器，但是我尝试过QQ音乐，没成功，不知道是哪里没配置好，以后有时间再看看，现在用的是网易云netease，运行正常</em></p><h2 id="添加echarts统计"><a href="#添加echarts统计" class="headerlink" title="添加echarts统计"></a>添加echarts统计</h2><p>在博客中可以对博客的文章发布时间、文章分类、文章标签的维度绘制统计图，使用 <a href="https://echarts.apache.org/examples/zh/index.html">ECharts</a> 开源可视化库，参考<a href="https://blog.eurkon.com/post/1213ef82.html">Eurkon大佬的博客</a></p><h3 id="引入echarts-js"><a href="#引入echarts-js" class="headerlink" title="引入echarts.js"></a>引入echarts.js</h3><p>在主题配置文件 <code>_config.butterfly.yml</code> 的 <code>inject</code> 配置项的 <code>head</code> 部分引入 <code>echarts.js</code> 文件，此文件是实现echarts图标的依赖文件，例如</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">src=&quot;https://npm.elemecdn.com/echarts@4.9.0/dist/echarts.min.js&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><div class="note info flat"><p><code>echarts.js</code> 必须在渲染 <code>echarts</code> 实例的 JavaScript 前引入.</p></div><h3 id="安装插件cheerio"><a href="#安装插件cheerio" class="headerlink" title="安装插件cheerio"></a>安装插件cheerio</h3><p>在终端使用npm工具安装cheerio插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install cheerio --save</span><br></pre></td></tr></table></figure><h3 id="插入文章统计代码"><a href="#插入文章统计代码" class="headerlink" title="插入文章统计代码"></a>插入文章统计代码</h3><p>插入文章统计代码 <code>charts.js</code>，在 <code>[Blogroot]\themes\butterfly\scripts\helpers\</code> 路径下新建文件 <code>charts.js</code> ，此文件是用来计算文章统计信息，可以修改其中内容来重新选择图标样式、统计信息等，echarts的配置项使用可查看官方的<a href="https://echarts.apache.org/zh/option.html">Echarts配置项文档</a><br>在新建的 <code>charts.js</code> 文件中写入下面代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">&#x27;cheerio&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> moment = <span class="built_in">require</span>(<span class="string">&#x27;moment&#x27;</span>)</span><br><span class="line"></span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">filter</span>.<span class="title function_">register</span>(<span class="string">&#x27;after_render:html&#x27;</span>, <span class="keyword">function</span> (<span class="params">locals</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> $ = cheerio.<span class="title function_">load</span>(locals)</span><br><span class="line">  <span class="keyword">const</span> post = $(<span class="string">&#x27;#posts-chart&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> tag = $(<span class="string">&#x27;#tags-chart&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> category = $(<span class="string">&#x27;#categories-chart&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> htmlEncode = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (post.<span class="property">length</span> &gt; <span class="number">0</span> || tag.<span class="property">length</span> &gt; <span class="number">0</span> || category.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (post.<span class="property">length</span> &gt; <span class="number">0</span> &amp;&amp; $(<span class="string">&#x27;#postsChart&#x27;</span>).<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (post.<span class="title function_">attr</span>(<span class="string">&#x27;data-encode&#x27;</span>) === <span class="string">&#x27;true&#x27;</span>) htmlEncode = <span class="literal">true</span></span><br><span class="line">      post.<span class="title function_">after</span>(<span class="title function_">postsChart</span>(post.<span class="title function_">attr</span>(<span class="string">&#x27;data-start&#x27;</span>)))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tag.<span class="property">length</span> &gt; <span class="number">0</span> &amp;&amp; $(<span class="string">&#x27;#tagsChart&#x27;</span>).<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (tag.<span class="title function_">attr</span>(<span class="string">&#x27;data-encode&#x27;</span>) === <span class="string">&#x27;true&#x27;</span>) htmlEncode = <span class="literal">true</span></span><br><span class="line">      tag.<span class="title function_">after</span>(<span class="title function_">tagsChart</span>(tag.<span class="title function_">attr</span>(<span class="string">&#x27;data-length&#x27;</span>)))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (category.<span class="property">length</span> &gt; <span class="number">0</span> &amp;&amp; $(<span class="string">&#x27;#categoriesChart&#x27;</span>).<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (category.<span class="title function_">attr</span>(<span class="string">&#x27;data-encode&#x27;</span>) === <span class="string">&#x27;true&#x27;</span>) htmlEncode = <span class="literal">true</span></span><br><span class="line">      category.<span class="title function_">after</span>(<span class="title function_">categoriesChart</span>(category.<span class="title function_">attr</span>(<span class="string">&#x27;data-parent&#x27;</span>)))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (htmlEncode) &#123;</span><br><span class="line">      <span class="keyword">return</span> $.<span class="title function_">root</span>().<span class="title function_">html</span>().<span class="title function_">replace</span>(<span class="regexp">/&amp;amp;#/g</span>, <span class="string">&#x27;&amp;#&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> $.<span class="title function_">root</span>().<span class="title function_">html</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> locals</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="number">15</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">postsChart</span> (startMonth) &#123;</span><br><span class="line">  <span class="keyword">const</span> startDate = <span class="title function_">moment</span>(startMonth || <span class="string">&#x27;2020-01&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> endDate = <span class="title function_">moment</span>()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> monthMap = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">  <span class="keyword">const</span> dayTime = <span class="number">3600</span> * <span class="number">24</span> * <span class="number">1000</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> time = startDate; time &lt;= endDate; time += dayTime) &#123;</span><br><span class="line">    <span class="keyword">const</span> month = <span class="title function_">moment</span>(time).<span class="title function_">format</span>(<span class="string">&#x27;YYYY-MM&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (!monthMap.<span class="title function_">has</span>(month)) &#123;</span><br><span class="line">      monthMap.<span class="title function_">set</span>(month, <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  hexo.<span class="property">locals</span>.<span class="title function_">get</span>(<span class="string">&#x27;posts&#x27;</span>).<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">post</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> month = post.<span class="property">date</span>.<span class="title function_">format</span>(<span class="string">&#x27;YYYY-MM&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (monthMap.<span class="title function_">has</span>(month)) &#123;</span><br><span class="line">      monthMap.<span class="title function_">set</span>(month, monthMap.<span class="title function_">get</span>(month) + <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">const</span> monthArr = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>([...monthMap.<span class="title function_">keys</span>()])</span><br><span class="line">  <span class="keyword">const</span> monthValueArr = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>([...monthMap.<span class="title function_">values</span>()])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;script id=&quot;postsChart&quot;&gt;</span></span><br><span class="line"><span class="string">    var color = document.documentElement.getAttribute(&#x27;data-theme&#x27;) === &#x27;light&#x27; ? &#x27;#4c4948&#x27; : &#x27;rgba(255,255,255,0.7)&#x27;</span></span><br><span class="line"><span class="string">    var postsChart = echarts.init(document.getElementById(&#x27;posts-chart&#x27;), &#x27;light&#x27;);</span></span><br><span class="line"><span class="string">    var postsOption = &#123;</span></span><br><span class="line"><span class="string">      title: &#123;</span></span><br><span class="line"><span class="string">        text: &#x27;文章发布统计图&#x27;,</span></span><br><span class="line"><span class="string">        x: &#x27;center&#x27;,</span></span><br><span class="line"><span class="string">        textStyle: &#123;</span></span><br><span class="line"><span class="string">          color: color</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      tooltip: &#123;</span></span><br><span class="line"><span class="string">        trigger: &#x27;axis&#x27;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      xAxis: &#123;</span></span><br><span class="line"><span class="string">        name: &#x27;日期&#x27;,</span></span><br><span class="line"><span class="string">        type: &#x27;category&#x27;,</span></span><br><span class="line"><span class="string">        boundaryGap: false,</span></span><br><span class="line"><span class="string">        nameTextStyle: &#123;</span></span><br><span class="line"><span class="string">          color: color</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        axisTick: &#123;</span></span><br><span class="line"><span class="string">          show: false</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        axisLabel: &#123;</span></span><br><span class="line"><span class="string">          show: true,</span></span><br><span class="line"><span class="string">          color: color</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        axisLine: &#123;</span></span><br><span class="line"><span class="string">          show: true,</span></span><br><span class="line"><span class="string">          lineStyle: &#123;</span></span><br><span class="line"><span class="string">            color: color</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        data: <span class="subst">$&#123;monthArr&#125;</span></span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      yAxis: &#123;</span></span><br><span class="line"><span class="string">        name: &#x27;文章篇数&#x27;,</span></span><br><span class="line"><span class="string">        type: &#x27;value&#x27;,</span></span><br><span class="line"><span class="string">        nameTextStyle: &#123;</span></span><br><span class="line"><span class="string">          color: color</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        splitLine: &#123;</span></span><br><span class="line"><span class="string">          show: false</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        axisTick: &#123;</span></span><br><span class="line"><span class="string">          show: false</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        axisLabel: &#123;</span></span><br><span class="line"><span class="string">          show: true,</span></span><br><span class="line"><span class="string">          color: color</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        axisLine: &#123;</span></span><br><span class="line"><span class="string">          show: true,</span></span><br><span class="line"><span class="string">          lineStyle: &#123;</span></span><br><span class="line"><span class="string">            color: color</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      series: [&#123;</span></span><br><span class="line"><span class="string">        name: &#x27;文章篇数&#x27;,</span></span><br><span class="line"><span class="string">        type: &#x27;line&#x27;,</span></span><br><span class="line"><span class="string">        smooth: true,</span></span><br><span class="line"><span class="string">        lineStyle: &#123;</span></span><br><span class="line"><span class="string">            width: 0</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        showSymbol: false,</span></span><br><span class="line"><span class="string">        itemStyle: &#123;</span></span><br><span class="line"><span class="string">          opacity: 1,</span></span><br><span class="line"><span class="string">          color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [&#123;</span></span><br><span class="line"><span class="string">            offset: 0,</span></span><br><span class="line"><span class="string">            color: &#x27;rgba(128, 255, 165)&#x27;</span></span><br><span class="line"><span class="string">          &#125;,</span></span><br><span class="line"><span class="string">          &#123;</span></span><br><span class="line"><span class="string">            offset: 1,</span></span><br><span class="line"><span class="string">            color: &#x27;rgba(1, 191, 236)&#x27;</span></span><br><span class="line"><span class="string">          &#125;])</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        areaStyle: &#123;</span></span><br><span class="line"><span class="string">          opacity: 1,</span></span><br><span class="line"><span class="string">          color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [&#123;</span></span><br><span class="line"><span class="string">            offset: 0,</span></span><br><span class="line"><span class="string">            color: &#x27;rgba(128, 255, 165)&#x27;</span></span><br><span class="line"><span class="string">          &#125;, &#123;</span></span><br><span class="line"><span class="string">            offset: 1,</span></span><br><span class="line"><span class="string">            color: &#x27;rgba(1, 191, 236)&#x27;</span></span><br><span class="line"><span class="string">          &#125;])</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        data: <span class="subst">$&#123;monthValueArr&#125;</span>,</span></span><br><span class="line"><span class="string">        markLine: &#123;</span></span><br><span class="line"><span class="string">          data: [&#123;</span></span><br><span class="line"><span class="string">            name: &#x27;平均值&#x27;,</span></span><br><span class="line"><span class="string">            type: &#x27;average&#x27;,</span></span><br><span class="line"><span class="string">            label: &#123;</span></span><br><span class="line"><span class="string">              color: color</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">          &#125;]</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;]</span></span><br><span class="line"><span class="string">    &#125;;</span></span><br><span class="line"><span class="string">    postsChart.setOption(postsOption);</span></span><br><span class="line"><span class="string">    window.addEventListener(&#x27;resize&#x27;, () =&gt; &#123; </span></span><br><span class="line"><span class="string">      postsChart.resize();</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">    postsChart.on(&#x27;click&#x27;, &#x27;series&#x27;, (event) =&gt; &#123;</span></span><br><span class="line"><span class="string">      if (event.componentType === &#x27;series&#x27;) window.location.href = &#x27;/archives/&#x27; + event.name.replace(&#x27;-&#x27;, &#x27;/&#x27;);</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">  &lt;/script&gt;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">tagsChart</span> (len) &#123;</span><br><span class="line">  <span class="keyword">const</span> tagArr = []</span><br><span class="line">  hexo.<span class="property">locals</span>.<span class="title function_">get</span>(<span class="string">&#x27;tags&#x27;</span>).<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">tag</span>) &#123;</span><br><span class="line">    tagArr.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: tag.<span class="property">name</span>, <span class="attr">value</span>: tag.<span class="property">length</span>, <span class="attr">path</span>: tag.<span class="property">path</span> &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  tagArr.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123; <span class="keyword">return</span> b.<span class="property">value</span> - a.<span class="property">value</span> &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> dataLength = <span class="title class_">Math</span>.<span class="title function_">min</span>(tagArr.<span class="property">length</span>, len) || tagArr.<span class="property">length</span></span><br><span class="line">  <span class="keyword">const</span> tagNameArr = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; dataLength; i++) &#123;</span><br><span class="line">    tagNameArr.<span class="title function_">push</span>(tagArr[i].<span class="property">name</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> tagNameArrJson = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(tagNameArr)</span><br><span class="line">  <span class="keyword">const</span> tagArrJson = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(tagArr)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;script id=&quot;tagsChart&quot;&gt;</span></span><br><span class="line"><span class="string">    var color = document.documentElement.getAttribute(&#x27;data-theme&#x27;) === &#x27;light&#x27; ? &#x27;#4c4948&#x27; : &#x27;rgba(255,255,255,0.7)&#x27;</span></span><br><span class="line"><span class="string">    var tagsChart = echarts.init(document.getElementById(&#x27;tags-chart&#x27;), &#x27;light&#x27;);</span></span><br><span class="line"><span class="string">    var tagsOption = &#123;</span></span><br><span class="line"><span class="string">      title: &#123;</span></span><br><span class="line"><span class="string">        text: &#x27;Top <span class="subst">$&#123;dataLength&#125;</span> 标签统计图&#x27;,</span></span><br><span class="line"><span class="string">        x: &#x27;center&#x27;,</span></span><br><span class="line"><span class="string">        textStyle: &#123;</span></span><br><span class="line"><span class="string">          color: color</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      tooltip: &#123;&#125;,</span></span><br><span class="line"><span class="string">      xAxis: &#123;</span></span><br><span class="line"><span class="string">        name: &#x27;标签&#x27;,</span></span><br><span class="line"><span class="string">        type: &#x27;category&#x27;,</span></span><br><span class="line"><span class="string">        nameTextStyle: &#123;</span></span><br><span class="line"><span class="string">          color: color</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        axisTick: &#123;</span></span><br><span class="line"><span class="string">          show: false</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        axisLabel: &#123;</span></span><br><span class="line"><span class="string">          show: true,</span></span><br><span class="line"><span class="string">          color: color,</span></span><br><span class="line"><span class="string">          interval: 0</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        axisLine: &#123;</span></span><br><span class="line"><span class="string">          show: true,</span></span><br><span class="line"><span class="string">          lineStyle: &#123;</span></span><br><span class="line"><span class="string">            color: color</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        data: <span class="subst">$&#123;tagNameArrJson&#125;</span></span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      yAxis: &#123;</span></span><br><span class="line"><span class="string">        name: &#x27;文章篇数&#x27;,</span></span><br><span class="line"><span class="string">        type: &#x27;value&#x27;,</span></span><br><span class="line"><span class="string">        splitLine: &#123;</span></span><br><span class="line"><span class="string">          show: false</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        nameTextStyle: &#123;</span></span><br><span class="line"><span class="string">          color: color</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        axisTick: &#123;</span></span><br><span class="line"><span class="string">          show: false</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        axisLabel: &#123;</span></span><br><span class="line"><span class="string">          show: true,</span></span><br><span class="line"><span class="string">          color: color</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        axisLine: &#123;</span></span><br><span class="line"><span class="string">          show: true,</span></span><br><span class="line"><span class="string">          lineStyle: &#123;</span></span><br><span class="line"><span class="string">            color: color</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      series: [&#123;</span></span><br><span class="line"><span class="string">        name: &#x27;文章篇数&#x27;,</span></span><br><span class="line"><span class="string">        type: &#x27;bar&#x27;,</span></span><br><span class="line"><span class="string">        data: <span class="subst">$&#123;tagArrJson&#125;</span>,</span></span><br><span class="line"><span class="string">        itemStyle: &#123;</span></span><br><span class="line"><span class="string">          borderRadius: [5, 5, 0, 0],</span></span><br><span class="line"><span class="string">          color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [&#123;</span></span><br><span class="line"><span class="string">            offset: 0,</span></span><br><span class="line"><span class="string">            color: &#x27;rgba(128, 255, 165)&#x27;</span></span><br><span class="line"><span class="string">          &#125;,</span></span><br><span class="line"><span class="string">          &#123;</span></span><br><span class="line"><span class="string">            offset: 1,</span></span><br><span class="line"><span class="string">            color: &#x27;rgba(1, 191, 236)&#x27;</span></span><br><span class="line"><span class="string">          &#125;])</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        emphasis: &#123;</span></span><br><span class="line"><span class="string">          itemStyle: &#123;</span></span><br><span class="line"><span class="string">            color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [&#123;</span></span><br><span class="line"><span class="string">              offset: 0,</span></span><br><span class="line"><span class="string">              color: &#x27;rgba(128, 255, 195)&#x27;</span></span><br><span class="line"><span class="string">            &#125;,</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">              offset: 1,</span></span><br><span class="line"><span class="string">              color: &#x27;rgba(1, 211, 255)&#x27;</span></span><br><span class="line"><span class="string">            &#125;])</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        markLine: &#123;</span></span><br><span class="line"><span class="string">          data: [&#123;</span></span><br><span class="line"><span class="string">            name: &#x27;平均值&#x27;,</span></span><br><span class="line"><span class="string">            type: &#x27;average&#x27;,</span></span><br><span class="line"><span class="string">            label: &#123;</span></span><br><span class="line"><span class="string">              color: color</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">          &#125;]</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;]</span></span><br><span class="line"><span class="string">    &#125;;</span></span><br><span class="line"><span class="string">    tagsChart.setOption(tagsOption);</span></span><br><span class="line"><span class="string">    window.addEventListener(&#x27;resize&#x27;, () =&gt; &#123; </span></span><br><span class="line"><span class="string">      tagsChart.resize();</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">    tagsChart.on(&#x27;click&#x27;, &#x27;series&#x27;, (event) =&gt; &#123;</span></span><br><span class="line"><span class="string">      if(event.data.path) window.location.href = &#x27;/&#x27; + event.data.path;</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">  &lt;/script&gt;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">categoriesChart</span> (dataParent) &#123;</span><br><span class="line">  <span class="keyword">const</span> categoryArr = []</span><br><span class="line">  <span class="keyword">let</span> categoryParentFlag = <span class="literal">false</span></span><br><span class="line">  hexo.<span class="property">locals</span>.<span class="title function_">get</span>(<span class="string">&#x27;categories&#x27;</span>).<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">category</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (category.<span class="property">parent</span>) categoryParentFlag = <span class="literal">true</span></span><br><span class="line">    categoryArr.<span class="title function_">push</span>(&#123;</span><br><span class="line">      <span class="attr">name</span>: category.<span class="property">name</span>,</span><br><span class="line">      <span class="attr">value</span>: category.<span class="property">length</span>,</span><br><span class="line">      <span class="attr">path</span>: category.<span class="property">path</span>,</span><br><span class="line">      <span class="attr">id</span>: category.<span class="property">_id</span>,</span><br><span class="line">      <span class="attr">parentId</span>: category.<span class="property">parent</span> || <span class="string">&#x27;0&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  categoryParentFlag = categoryParentFlag &amp;&amp; dataParent === <span class="string">&#x27;true&#x27;</span></span><br><span class="line">  categoryArr.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123; <span class="keyword">return</span> b.<span class="property">value</span> - a.<span class="property">value</span> &#125;)</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">translateListToTree</span> (data, parent) &#123;</span><br><span class="line">    <span class="keyword">let</span> tree = []</span><br><span class="line">    <span class="keyword">let</span> temp</span><br><span class="line">    data.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (data[index].<span class="property">parentId</span> == parent) &#123;</span><br><span class="line">        <span class="keyword">let</span> obj = data[index];</span><br><span class="line">        temp = <span class="title function_">translateListToTree</span>(data, data[index].<span class="property">id</span>);</span><br><span class="line">        <span class="keyword">if</span> (temp.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          obj.<span class="property">children</span> = temp</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (tree.<span class="title function_">indexOf</span>())</span><br><span class="line">          tree.<span class="title function_">push</span>(obj)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> tree</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> categoryNameJson = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(categoryArr.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">category</span>) &#123; <span class="keyword">return</span> category.<span class="property">name</span> &#125;))</span><br><span class="line">  <span class="keyword">const</span> categoryArrJson = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(categoryArr)</span><br><span class="line">  <span class="keyword">const</span> categoryArrParentJson = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="title function_">translateListToTree</span>(categoryArr, <span class="string">&#x27;0&#x27;</span>))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;script id=&quot;categoriesChart&quot;&gt;</span></span><br><span class="line"><span class="string">    var color = document.documentElement.getAttribute(&#x27;data-theme&#x27;) === &#x27;light&#x27; ? &#x27;#4c4948&#x27; : &#x27;rgba(255,255,255,0.7)&#x27;</span></span><br><span class="line"><span class="string">    var categoriesChart = echarts.init(document.getElementById(&#x27;categories-chart&#x27;), &#x27;light&#x27;);</span></span><br><span class="line"><span class="string">    var categoryParentFlag = <span class="subst">$&#123;categoryParentFlag&#125;</span></span></span><br><span class="line"><span class="string">    var categoriesOption = &#123;</span></span><br><span class="line"><span class="string">      title: &#123;</span></span><br><span class="line"><span class="string">        text: &#x27;文章分类统计图&#x27;,</span></span><br><span class="line"><span class="string">        x: &#x27;center&#x27;,</span></span><br><span class="line"><span class="string">        textStyle: &#123;</span></span><br><span class="line"><span class="string">          color: color</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      legend: &#123;</span></span><br><span class="line"><span class="string">        top: &#x27;bottom&#x27;,</span></span><br><span class="line"><span class="string">        data: <span class="subst">$&#123;categoryNameJson&#125;</span>,</span></span><br><span class="line"><span class="string">        textStyle: &#123;</span></span><br><span class="line"><span class="string">          color: color</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      tooltip: &#123;</span></span><br><span class="line"><span class="string">        trigger: &#x27;item&#x27;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      series: []</span></span><br><span class="line"><span class="string">    &#125;;</span></span><br><span class="line"><span class="string">    categoriesOption.series.push(</span></span><br><span class="line"><span class="string">      categoryParentFlag ? </span></span><br><span class="line"><span class="string">      &#123;</span></span><br><span class="line"><span class="string">        nodeClick :false,</span></span><br><span class="line"><span class="string">        name: &#x27;文章篇数&#x27;,</span></span><br><span class="line"><span class="string">        type: &#x27;sunburst&#x27;,</span></span><br><span class="line"><span class="string">        radius: [&#x27;15%&#x27;, &#x27;90%&#x27;],</span></span><br><span class="line"><span class="string">        center: [&#x27;50%&#x27;, &#x27;55%&#x27;],</span></span><br><span class="line"><span class="string">        sort: &#x27;desc&#x27;,</span></span><br><span class="line"><span class="string">        data: <span class="subst">$&#123;categoryArrParentJson&#125;</span>,</span></span><br><span class="line"><span class="string">        itemStyle: &#123;</span></span><br><span class="line"><span class="string">          borderColor: &#x27;#fff&#x27;,</span></span><br><span class="line"><span class="string">          borderWidth: 2,</span></span><br><span class="line"><span class="string">          emphasis: &#123;</span></span><br><span class="line"><span class="string">            focus: &#x27;ancestor&#x27;,</span></span><br><span class="line"><span class="string">            shadowBlur: 10,</span></span><br><span class="line"><span class="string">            shadowOffsetX: 0,</span></span><br><span class="line"><span class="string">            shadowColor: &#x27;rgba(255, 255, 255, 0.5)&#x27;</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">      :</span></span><br><span class="line"><span class="string">      &#123;</span></span><br><span class="line"><span class="string">        name: &#x27;文章篇数&#x27;,</span></span><br><span class="line"><span class="string">        type: &#x27;pie&#x27;,</span></span><br><span class="line"><span class="string">        radius: [30, 80],</span></span><br><span class="line"><span class="string">        roseType: &#x27;area&#x27;,</span></span><br><span class="line"><span class="string">        label: &#123;</span></span><br><span class="line"><span class="string">          color: color,</span></span><br><span class="line"><span class="string">          formatter: &#x27;&#123;b&#125; : &#123;c&#125; (&#123;d&#125;%)&#x27;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        data: <span class="subst">$&#123;categoryArrJson&#125;</span>,</span></span><br><span class="line"><span class="string">        itemStyle: &#123;</span></span><br><span class="line"><span class="string">          emphasis: &#123;</span></span><br><span class="line"><span class="string">            shadowBlur: 10,</span></span><br><span class="line"><span class="string">            shadowOffsetX: 0,</span></span><br><span class="line"><span class="string">            shadowColor: &#x27;rgba(255, 255, 255, 0.5)&#x27;</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    )</span></span><br><span class="line"><span class="string">    categoriesChart.setOption(categoriesOption);</span></span><br><span class="line"><span class="string">    window.addEventListener(&#x27;resize&#x27;, () =&gt; &#123; </span></span><br><span class="line"><span class="string">      categoriesChart.resize();</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">    categoriesChart.on(&#x27;click&#x27;, &#x27;series&#x27;, (event) =&gt; &#123;</span></span><br><span class="line"><span class="string">      if(event.data.path) window.location.href = &#x27;/&#x27; + event.data.path;</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">  &lt;/script&gt;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>注意：如果你的 <code>[Blogroot]\themes\</code> 路径下并没有 <code>butterfly</code> 文件夹，说明当时建立博客后没有将下载的主题文件夹复制到根目录的主题文件夹来，请从 <code>[Blogroot]\node_modules\</code> 路径找到 <code>hexo-theme-butterfly</code> 文件夹复制到 <code>[Blogroot]\themes\</code> 路径下并更名为 <code>butterfly</code></p></div><h3 id="使用统计图"><a href="#使用统计图" class="headerlink" title="使用统计图"></a>使用统计图</h3><h4 id="在普通页面使用"><a href="#在普通页面使用" class="headerlink" title="在普通页面使用"></a>在普通页面使用</h4><p>直接在页面文件 <code>index.md</code> 中插入HTML代码，例如想在文章中插入一个文章发布时间折线统计图，就在文章中直接插入HTML代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 文章标签统计图 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;tags-chart&quot;</span> <span class="attr">data-length</span>=<span class="string">&quot;10&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border-radius: 8px; height: 300px; padding: 10px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：</p><!-- 文章标签统计图 --><div id="tags-chart" data-length="10" style="border-radius: 8px; height: 300px; padding: 10px;"></div><h4 id="在归档页使用"><a href="#在归档页使用" class="headerlink" title="在归档页使用"></a>在归档页使用</h4><div class="note info flat"><p><strong>tips:</strong> <em>归档页、分类页、标签页对应的要配置的文件 <code>archive.pug</code> 、 <code>category.pug</code> 、 <code>tag.pug</code> 在 <code>[Blogroot]\themes\butterfly\layout\</code> 路径下，而总分类页、总标签页对应的要配置的文件 <code>categories.pug</code> 和 <code>tags.pug</code> 在路径 <code>[Blogroot]\themes\butterfly\layout\includes\page</code> 路径下</em></p></div><p>在归档页使用就是要修改归档页对应的 <code>archive.pug</code> 文件，在 <code>archive.pug</code> 文件的 <code>#archive</code> 后追加HTML代码，例如我的归档页修改后：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">extends includes/layout.pug</span><br><span class="line"></span><br><span class="line">block content</span><br><span class="line">  include ./includes/mixins/article-sort.pug</span><br><span class="line">  #archive</span><br><span class="line">    //- 发布文章数量统计图</span><br><span class="line">    &lt;div id=&quot;posts-chart&quot; data-start=&quot;2024-05&quot; style=&quot;height: 300px; padding: 10px;&quot;&gt;&lt;/div&gt;</span><br><span class="line">    //- 文章时光轴展示</span><br><span class="line">    .article-sort-title= `$&#123;_p(&#x27;page.articles&#x27;)&#125; - $&#123;getArchiveLength()&#125;`</span><br><span class="line">    +articleSort(page.posts)</span><br><span class="line">    include includes/pagination.pug</span><br></pre></td></tr></table></figure><p><em><strong>这里我把HTML放在了前面是为了让文章数量统计图显示在文章时光轴展示的上方</strong></em></p><h4 id="在分类页使用"><a href="#在分类页使用" class="headerlink" title="在分类页使用"></a>在分类页使用</h4><h5 id="在总分类页使用"><a href="#在总分类页使用" class="headerlink" title="在总分类页使用"></a>在总分类页使用</h5><p>在总分类页使用就是要修改总分类页对应的 <code>categories.pug</code> 文件，在 <code>categories.pug</code> 文件中追加配置HTML代码，例如配置后：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.category-lists!= list_categories()</span><br><span class="line">&lt;div id=&quot;categories-chart&quot; data-parent=&quot;true&quot; style=&quot;height: 300px; padding: 10px;&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h5 id="在各分类页使用"><a href="#在各分类页使用" class="headerlink" title="在各分类页使用"></a>在各分类页使用</h5><p>在各分类页使用就是要修改子分类页对应的 <code>category.pug</code> 文件，在 <code>category.pug</code> 文件中 <code>#category</code> 项配置HTML代码，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#category</span><br><span class="line">  //- 分类统计图</span><br><span class="line">  &lt;div id=&quot;categories-chart&quot; data-parent=&quot;true&quot; style=&quot;height: 300px; padding: 10px;&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id="在标签页使用"><a href="#在标签页使用" class="headerlink" title="在标签页使用"></a>在标签页使用</h4><h5 id="在总标签页使用"><a href="#在总标签页使用" class="headerlink" title="在总标签页使用"></a>在总标签页使用</h5><p>修改 <code>tags.pug</code> 追加HTML代码，例如修改后：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//- 文字云标签展示</span><br><span class="line">.tag-cloud-list.is-center</span><br><span class="line">  !=cloudTags(&#123;source: site.tags, orderby: page.orderby || &#x27;random&#x27;, order: page.order || 1, minfontsize: 1.2, maxfontsize: 2.1, limit: 0, unit: &#x27;em&#x27;&#125;)</span><br><span class="line">//- 标签统计图</span><br><span class="line">&lt;div id=&quot;tags-chart&quot; data-length=&quot;10&quot; style=&quot;height: 300px; padding: 10px;&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h5 id="在各标签页使用"><a href="#在各标签页使用" class="headerlink" title="在各标签页使用"></a>在各标签页使用</h5><p>修改 <code>tag.pug</code> 在 <code>#tag</code> 部分追加HTML代码，例如修改后：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#tag </span><br><span class="line">  //- 标签统计图</span><br><span class="line">  &lt;div id=&quot;tags-chart&quot; data-length=&quot;10&quot; style=&quot;height: 300px; padding: 10px;&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="适配明暗模式"><a href="#适配明暗模式" class="headerlink" title="适配明暗模式"></a>适配明暗模式</h3><p>如果需要适配博客明暗模式更改统计图文字颜色，则创建一个文件专门来控制图表颜色切换，例如： <code>switchPostChart.js</code> ，在其中写入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">switchPostChart</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 这里为了统一颜色选取的是“明暗模式”下的两种字体颜色，也可以自己定义</span></span><br><span class="line">    <span class="keyword">let</span> color = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-theme&#x27;</span>) === <span class="string">&#x27;light&#x27;</span> ? <span class="string">&#x27;#000000&#x27;</span> : <span class="string">&#x27;rgba(255,255,255,0.7)&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;posts-chart&#x27;</span>) &amp;&amp; postsOption) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> postsOptionNew = postsOption</span><br><span class="line">            postsOptionNew.<span class="property">title</span>.<span class="property">textStyle</span>.<span class="property">color</span> = color</span><br><span class="line">            postsOptionNew.<span class="property">xAxis</span>.<span class="property">nameTextStyle</span>.<span class="property">color</span> = color</span><br><span class="line">            postsOptionNew.<span class="property">yAxis</span>.<span class="property">nameTextStyle</span>.<span class="property">color</span> = color</span><br><span class="line">            postsOptionNew.<span class="property">xAxis</span>.<span class="property">axisLabel</span>.<span class="property">color</span> = color</span><br><span class="line">            postsOptionNew.<span class="property">yAxis</span>.<span class="property">axisLabel</span>.<span class="property">color</span> = color</span><br><span class="line">            postsOptionNew.<span class="property">xAxis</span>.<span class="property">axisLine</span>.<span class="property">lineStyle</span>.<span class="property">color</span> = color</span><br><span class="line">            postsOptionNew.<span class="property">yAxis</span>.<span class="property">axisLine</span>.<span class="property">lineStyle</span>.<span class="property">color</span> = color</span><br><span class="line">            postsOptionNew.<span class="property">series</span>[<span class="number">0</span>].<span class="property">markLine</span>.<span class="property">data</span>[<span class="number">0</span>].<span class="property">label</span>.<span class="property">color</span> = color</span><br><span class="line">            postsChart.<span class="title function_">setOption</span>(postsOptionNew)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;tags-chart&#x27;</span>) &amp;&amp; tagsOption) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> tagsOptionNew = tagsOption</span><br><span class="line">            tagsOptionNew.<span class="property">title</span>.<span class="property">textStyle</span>.<span class="property">color</span> = color</span><br><span class="line">            tagsOptionNew.<span class="property">xAxis</span>.<span class="property">nameTextStyle</span>.<span class="property">color</span> = color</span><br><span class="line">            tagsOptionNew.<span class="property">yAxis</span>.<span class="property">nameTextStyle</span>.<span class="property">color</span> = color</span><br><span class="line">            tagsOptionNew.<span class="property">xAxis</span>.<span class="property">axisLabel</span>.<span class="property">color</span> = color</span><br><span class="line">            tagsOptionNew.<span class="property">yAxis</span>.<span class="property">axisLabel</span>.<span class="property">color</span> = color</span><br><span class="line">            tagsOptionNew.<span class="property">xAxis</span>.<span class="property">axisLine</span>.<span class="property">lineStyle</span>.<span class="property">color</span> = color</span><br><span class="line">            tagsOptionNew.<span class="property">yAxis</span>.<span class="property">axisLine</span>.<span class="property">lineStyle</span>.<span class="property">color</span> = color</span><br><span class="line">            tagsOptionNew.<span class="property">series</span>[<span class="number">0</span>].<span class="property">markLine</span>.<span class="property">data</span>[<span class="number">0</span>].<span class="property">label</span>.<span class="property">color</span> = color</span><br><span class="line">            tagsChart.<span class="title function_">setOption</span>(tagsOptionNew)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;categories-chart&#x27;</span>) &amp;&amp; categoriesOption) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> categoriesOptionNew = categoriesOption</span><br><span class="line">            categoriesOptionNew.<span class="property">title</span>.<span class="property">textStyle</span>.<span class="property">color</span> = color</span><br><span class="line">            categoriesOptionNew.<span class="property">legend</span>.<span class="property">textStyle</span>.<span class="property">color</span> = color</span><br><span class="line">            <span class="keyword">if</span> (!categoryParentFlag) &#123; categoriesOptionNew.<span class="property">series</span>[<span class="number">0</span>].<span class="property">label</span>.<span class="property">color</span> = color &#125;</span><br><span class="line">            categoriesChart.<span class="title function_">setOption</span>(categoriesOptionNew)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// document.getElementById(&quot;mode-button&quot;).addEventListener(&quot;click&quot;, function () &#123; setTimeout(switchPostChart, 100) &#125;)</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;darkmode&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="built_in">setTimeout</span>(switchPostChart, <span class="number">100</span>) &#125;)</span><br></pre></td></tr></table></figure><p>将此文件在主题配置文件 <code>_config.butterfly.yml</code> 中的 <code>inject</code> 的 <code>bottom</code> 部分引入，例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">bottom:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">src=&quot;/js/switchPostChart.js&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><div class="note info flat"><p>相比<a href="https://blog.eurkon.com/post/1213ef82.html">原作者的代码</a>，我将最后触发颜色切换的部分中定位的触发元素由 <code>mode-button</code> 切换为了 <code>darkmode</code> ，这样做是为了让图表的颜色切换跟随网站右下角的 <code>darkmode</code> 按钮，而不是浏览器的夜间模式，当然你也可以使用浏览器的夜间模式</p></div><div class="note warning flat"><p>注意：控制图表颜色切换的js文件要在 <code>inject</code> 的 <code>bottom</code> 部分引入，经过测试在 <code>head</code> 部分引入不能正常执行，通过浏览器控制台追踪可以看到是因为在 <code>head</code> 引入的话执行是在 <code>darkmode</code> 按钮被创建出来之前，导致出现 <code>TypeError: Cannot read properties of null (reading &#39;insertAdjacentHTML&#39;)</code> 错误</p></div><h2 id="节日弹窗与公祭日变灰"><a href="#节日弹窗与公祭日变灰" class="headerlink" title="节日弹窗与公祭日变灰"></a>节日弹窗与公祭日变灰</h2><h3 id="节日控制文件"><a href="#节日控制文件" class="headerlink" title="节日控制文件"></a>节日控制文件</h3><p>在路径 <code>[BlogRoot]\source\js\</code> 下新建节日控制文件 <code>day.js</code>，内容如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">m = d.<span class="title function_">getMonth</span>() + <span class="number">1</span>;</span><br><span class="line">dd = d.<span class="title function_">getDate</span>();</span><br><span class="line">y = d.<span class="title function_">getFullYear</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 公祭日</span></span><br><span class="line"><span class="keyword">if</span> (m == <span class="number">9</span> &amp;&amp; dd == <span class="number">18</span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;html&quot;</span>)[<span class="number">0</span>].<span class="title function_">setAttribute</span>(<span class="string">&quot;style&quot;</span>, <span class="string">&quot;filter: grayscale(60%);&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>) != <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">        <span class="title class_">Swal</span>.<span class="title function_">fire</span>(<span class="string">&quot;今天是九一八事变&quot;</span> + (y - <span class="number">1931</span>).<span class="title function_">toString</span>() + <span class="string">&quot;周年纪念日\n🪔勿忘国耻，振兴中华🪔&quot;</span>);</span><br><span class="line">        <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (m == <span class="number">7</span> &amp;&amp; dd == <span class="number">7</span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;html&quot;</span>)[<span class="number">0</span>].<span class="title function_">setAttribute</span>(<span class="string">&quot;style&quot;</span>, <span class="string">&quot;filter: grayscale(60%);&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>) != <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">        <span class="title class_">Swal</span>.<span class="title function_">fire</span>(<span class="string">&quot;今天是卢沟桥事变&quot;</span> + (y - <span class="number">1937</span>).<span class="title function_">toString</span>() + <span class="string">&quot;周年纪念日\n🪔勿忘国耻，振兴中华🪔&quot;</span>);</span><br><span class="line">        <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (m == <span class="number">12</span> &amp;&amp; dd == <span class="number">13</span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;html&quot;</span>)[<span class="number">0</span>].<span class="title function_">setAttribute</span>(<span class="string">&quot;style&quot;</span>, <span class="string">&quot;filter: grayscale(60%);&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>) != <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">        <span class="title class_">Swal</span>.<span class="title function_">fire</span>(<span class="string">&quot;今天是南京大屠杀&quot;</span> + (y - <span class="number">1937</span>).<span class="title function_">toString</span>() + <span class="string">&quot;周年纪念日\n🪔勿忘国耻，振兴中华🪔&quot;</span>);</span><br><span class="line">        <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (m == <span class="number">8</span> &amp;&amp; dd == <span class="number">14</span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;html&quot;</span>)[<span class="number">0</span>].<span class="title function_">setAttribute</span>(<span class="string">&quot;style&quot;</span>, <span class="string">&quot;filter: grayscale(60%);&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>) != <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">        <span class="title class_">Swal</span>.<span class="title function_">fire</span>(<span class="string">&quot;今天是世界慰安妇纪念日\n🪔勿忘国耻，振兴中华🪔&quot;</span>);</span><br><span class="line">        <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 节假日</span></span><br><span class="line"><span class="keyword">if</span> (m == <span class="number">10</span> &amp;&amp; dd &lt;= <span class="number">3</span>) &#123;<span class="comment">//国庆节</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>) != <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">        <span class="title class_">Swal</span>.<span class="title function_">fire</span>(<span class="string">&quot;祝祖国&quot;</span> + (y - <span class="number">1949</span>).<span class="title function_">toString</span>() + <span class="string">&quot;岁生日快乐！&quot;</span>);</span><br><span class="line">        <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (m == <span class="number">8</span> &amp;&amp; dd == <span class="number">15</span>) &#123;<span class="comment">//搞来玩的，小日子投降</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>) != <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">        <span class="title class_">Swal</span>.<span class="title function_">fire</span>(<span class="string">&quot;小日子已经投降&quot;</span> + (y - <span class="number">1945</span>).<span class="title function_">toString</span>() + <span class="string">&quot;年了😃&quot;</span>);</span><br><span class="line">        <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (m == <span class="number">1</span> &amp;&amp; dd == <span class="number">1</span>) &#123;<span class="comment">//元旦节</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>) != <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">        <span class="title class_">Swal</span>.<span class="title function_">fire</span>(y.<span class="title function_">toString</span>() + <span class="string">&quot;年元旦快乐！🎉&quot;</span>);</span><br><span class="line">        <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (m == <span class="number">3</span> &amp;&amp; dd == <span class="number">8</span>) &#123;<span class="comment">//妇女节</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>) != <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">        <span class="title class_">Swal</span>.<span class="title function_">fire</span>(<span class="string">&quot;各位女神们，妇女节快乐！👩&quot;</span>);</span><br><span class="line">        <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">l = [<span class="string">&quot;非常抱歉，因为不可控原因，博客将于明天停止运营！&quot;</span>, <span class="string">&quot;好消息，日本没了！&quot;</span>, <span class="string">&quot;美国垮了，原因竟然是川普！&quot;</span>, <span class="string">&quot;微软垮了！&quot;</span>, <span class="string">&quot;你的电脑已经过载，建议立即关机！&quot;</span>, <span class="string">&quot;你知道吗？站长很喜欢你哦！&quot;</span>, <span class="string">&quot;一分钟有61秒哦&quot;</span>, <span class="string">&quot;你喜欢的人跟别人跑了！&quot;</span>]</span><br><span class="line"><span class="keyword">if</span> (m == <span class="number">4</span> &amp;&amp; dd == <span class="number">1</span>) &#123;<span class="comment">//愚人节，随机谎话</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>) != <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">        <span class="title class_">Swal</span>.<span class="title function_">fire</span>(l[<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * l.<span class="property">length</span>)]);</span><br><span class="line">        <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (m == <span class="number">5</span> &amp;&amp; dd == <span class="number">1</span>) &#123;<span class="comment">//劳动节</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>) != <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">        <span class="title class_">Swal</span>.<span class="title function_">fire</span>(<span class="string">&quot;劳动节快乐\n为各行各业辛勤工作的人们致敬！&quot;</span>);</span><br><span class="line">        <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (m == <span class="number">5</span> &amp;&amp; dd == <span class="number">4</span>) &#123;<span class="comment">//青年节</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>) != <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">        <span class="title class_">Swal</span>.<span class="title function_">fire</span>(<span class="string">&quot;青年节快乐\n青春不是回忆逝去,而是把握现在！&quot;</span>);</span><br><span class="line">        <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (m == <span class="number">5</span> &amp;&amp; dd == <span class="number">20</span>) &#123;<span class="comment">//520</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>) != <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">        <span class="title class_">Swal</span>.<span class="title function_">fire</span>(<span class="string">&quot;今年是520情人节\n快和你喜欢的人一起过吧！💑&quot;</span>);</span><br><span class="line">        <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (m == <span class="number">7</span> &amp;&amp; dd == <span class="number">1</span>) &#123;<span class="comment">//建党节</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>) != <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">        <span class="title class_">Swal</span>.<span class="title function_">fire</span>(<span class="string">&quot;祝中国共产党&quot;</span> + (y - <span class="number">1921</span>).<span class="title function_">toString</span>() + <span class="string">&quot;岁生日快乐！&quot;</span>);</span><br><span class="line">        <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (m == <span class="number">9</span> &amp;&amp; dd == <span class="number">10</span>) &#123;<span class="comment">//教师节</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>) != <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">        <span class="title class_">Swal</span>.<span class="title function_">fire</span>(<span class="string">&quot;各位老师们教师节快乐！👩‍🏫&quot;</span>);</span><br><span class="line">        <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (m == <span class="number">12</span> &amp;&amp; dd == <span class="number">25</span>) &#123;<span class="comment">//圣诞节</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>) != <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">        <span class="title class_">Swal</span>.<span class="title function_">fire</span>(<span class="string">&quot;圣诞节快乐！🎄&quot;</span>);</span><br><span class="line">        <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//传统节日部分</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((y == <span class="number">2023</span> &amp;&amp; m == <span class="number">4</span> &amp;&amp; dd == <span class="number">5</span>) || (y == <span class="number">2024</span> &amp;&amp; m == <span class="number">4</span> &amp;&amp; dd == <span class="number">4</span>) || (y == <span class="number">2025</span> &amp;&amp; m == <span class="number">4</span> &amp;&amp; dd == <span class="number">4</span>)) &#123;<span class="comment">//清明节</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>) != <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">        <span class="title class_">Swal</span>.<span class="title function_">fire</span>(<span class="string">&quot;清明时节雨纷纷,一束鲜花祭故人💐&quot;</span>);</span><br><span class="line">        <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((y == <span class="number">2023</span> &amp;&amp; m == <span class="number">12</span> &amp;&amp; dd == <span class="number">22</span>) || (y == <span class="number">2024</span> &amp;&amp; m == <span class="number">12</span> &amp;&amp; dd == <span class="number">21</span>) || (y == <span class="number">2025</span> &amp;&amp; m == <span class="number">12</span> &amp;&amp; dd == <span class="number">21</span>)) &#123;<span class="comment">//冬至</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>) != <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">        <span class="title class_">Swal</span>.<span class="title function_">fire</span>(<span class="string">&quot;冬至快乐\n快吃上一碗热热的汤圆和饺子吧🧆&quot;</span>);</span><br><span class="line">        <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> lunar = calendarFormatter.<span class="title function_">solar2lunar</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//农历采用汉字计算，防止出现闰月导致问题</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((lunar[<span class="string">&quot;IMonthCn&quot;</span>] == <span class="string">&quot;正月&quot;</span> &amp;&amp; lunar[<span class="string">&quot;IDayCn&quot;</span>] == <span class="string">&quot;初六&quot;</span>) || (lunar[<span class="string">&quot;IMonthCn&quot;</span>] == <span class="string">&quot;正月&quot;</span> &amp;&amp; lunar[<span class="string">&quot;IDayCn&quot;</span>] == <span class="string">&quot;初五&quot;</span>) || (lunar[<span class="string">&quot;IMonthCn&quot;</span>] == <span class="string">&quot;正月&quot;</span> &amp;&amp; lunar[<span class="string">&quot;IDayCn&quot;</span>] == <span class="string">&quot;初四&quot;</span>) || (lunar[<span class="string">&quot;IMonthCn&quot;</span>] == <span class="string">&quot;正月&quot;</span> &amp;&amp; lunar[<span class="string">&quot;IDayCn&quot;</span>] == <span class="string">&quot;初三&quot;</span>) || (lunar[<span class="string">&quot;IMonthCn&quot;</span>] == <span class="string">&quot;正月&quot;</span> &amp;&amp; lunar[<span class="string">&quot;IDayCn&quot;</span>] == <span class="string">&quot;初二&quot;</span>) || (lunar[<span class="string">&quot;IMonthCn&quot;</span>] == <span class="string">&quot;正月&quot;</span> &amp;&amp; lunar[<span class="string">&quot;IDayCn&quot;</span>] == <span class="string">&quot;初一&quot;</span>) || (lunar[<span class="string">&quot;IMonthCn&quot;</span>] == <span class="string">&quot;腊月&quot;</span> &amp;&amp; lunar[<span class="string">&quot;IDayCn&quot;</span>] == <span class="string">&quot;三十&quot;</span>) || (lunar[<span class="string">&quot;IMonthCn&quot;</span>] == <span class="string">&quot;腊月&quot;</span> &amp;&amp; lunar[<span class="string">&quot;IDayCn&quot;</span>] == <span class="string">&quot;廿九&quot;</span>)) &#123;</span><br><span class="line">    <span class="comment">//春节，本来只有大年三十到初六，但是有时候除夕是大年二十九，所以也加上了</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>) != <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">        <span class="title class_">Swal</span>.<span class="title function_">fire</span>(y.<span class="title function_">toString</span>() + <span class="string">&quot;年新年快乐\n🎊祝你心想事成，诸事顺利🎊&quot;</span>);</span><br><span class="line">        <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((lunar[<span class="string">&quot;IMonthCn&quot;</span>] == <span class="string">&quot;正月&quot;</span> &amp;&amp; lunar[<span class="string">&quot;IDayCn&quot;</span>] == <span class="string">&quot;十五&quot;</span>)) &#123;</span><br><span class="line">    <span class="comment">//元宵节</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>) != <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">        <span class="title class_">Swal</span>.<span class="title function_">fire</span>(<span class="string">&quot;元宵节快乐\n送你一个大大的灯笼🧅&quot;</span>);</span><br><span class="line">        <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((lunar[<span class="string">&quot;IMonthCn&quot;</span>] == <span class="string">&quot;五月&quot;</span> &amp;&amp; lunar[<span class="string">&quot;IDayCn&quot;</span>] == <span class="string">&quot;初五&quot;</span>)) &#123;</span><br><span class="line">    <span class="comment">//端午节</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>) != <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">        <span class="title class_">Swal</span>.<span class="title function_">fire</span>(<span class="string">&quot;端午节快乐\n请你吃一条粽子🍙&quot;</span>);</span><br><span class="line">        <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((lunar[<span class="string">&quot;IMonthCn&quot;</span>] == <span class="string">&quot;七月&quot;</span> &amp;&amp; lunar[<span class="string">&quot;IDayCn&quot;</span>] == <span class="string">&quot;初七&quot;</span>)) &#123;</span><br><span class="line">    <span class="comment">//七夕节</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>) != <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">        <span class="title class_">Swal</span>.<span class="title function_">fire</span>(<span class="string">&quot;七夕节快乐\n黄昏后,柳梢头,牛郎织女来碰头&quot;</span>);</span><br><span class="line">        <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((lunar[<span class="string">&quot;IMonthCn&quot;</span>] == <span class="string">&quot;八月&quot;</span> &amp;&amp; lunar[<span class="string">&quot;IDayCn&quot;</span>] == <span class="string">&quot;十五&quot;</span>)) &#123;</span><br><span class="line">    <span class="comment">//中秋节</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>) != <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">        <span class="title class_">Swal</span>.<span class="title function_">fire</span>(<span class="string">&quot;中秋节快乐\n请你吃一块月饼🍪&quot;</span>);</span><br><span class="line">        <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((lunar[<span class="string">&quot;IMonthCn&quot;</span>] == <span class="string">&quot;九月&quot;</span> &amp;&amp; lunar[<span class="string">&quot;IDayCn&quot;</span>] == <span class="string">&quot;初九&quot;</span>)) &#123;</span><br><span class="line">    <span class="comment">//重阳节</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>) != <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">        <span class="title class_">Swal</span>.<span class="title function_">fire</span>(<span class="string">&quot;重阳节快乐\n独在异乡为异客，每逢佳节倍思亲&quot;</span>);</span><br><span class="line">        <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 切换主题提醒</span></span><br><span class="line"><span class="comment">// if (y == 2022 &amp;&amp; m == 12 &amp;&amp; (dd &gt;= 18 &amp;&amp; dd &lt;= 20)) &#123;</span></span><br><span class="line"><span class="comment">//     if (sessionStorage.getItem(&quot;isPopupWindow&quot;) != &quot;1&quot;) &#123;</span></span><br><span class="line"><span class="comment">//         Swal.fire(&quot;网站换成冬日限定主题啦⛄&quot;);</span></span><br><span class="line"><span class="comment">//         sessionStorage.setItem(&quot;isPopupWindow&quot;, &quot;1&quot;);</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="农历计算文件"><a href="#农历计算文件" class="headerlink" title="农历计算文件"></a>农历计算文件</h3><p>部分节日是农历的，因此需要引入一个计算农历的代码，在路径 <code>[BlogRoot]\source\js\</code> 新建文件 <code>lunar.js</code> ，内容如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lunarInfo=[<span class="number">19416</span>,<span class="number">19168</span>,<span class="number">42352</span>,<span class="number">21717</span>,<span class="number">53856</span>,<span class="number">55632</span>,<span class="number">91476</span>,<span class="number">22176</span>,<span class="number">39632</span>,<span class="number">21970</span>,<span class="number">19168</span>,<span class="number">42422</span>,<span class="number">42192</span>,<span class="number">53840</span>,<span class="number">119381</span>,<span class="number">46400</span>,<span class="number">54944</span>,<span class="number">44450</span>,<span class="number">38320</span>,<span class="number">84343</span>,<span class="number">18800</span>,<span class="number">42160</span>,<span class="number">46261</span>,<span class="number">27216</span>,<span class="number">27968</span>,<span class="number">109396</span>,<span class="number">11104</span>,<span class="number">38256</span>,<span class="number">21234</span>,<span class="number">18800</span>,<span class="number">25958</span>,<span class="number">54432</span>,<span class="number">59984</span>,<span class="number">28309</span>,<span class="number">23248</span>,<span class="number">11104</span>,<span class="number">100067</span>,<span class="number">37600</span>,<span class="number">116951</span>,<span class="number">51536</span>,<span class="number">54432</span>,<span class="number">120998</span>,<span class="number">46416</span>,<span class="number">22176</span>,<span class="number">107956</span>,<span class="number">9680</span>,<span class="number">37584</span>,<span class="number">53938</span>,<span class="number">43344</span>,<span class="number">46423</span>,<span class="number">27808</span>,<span class="number">46416</span>,<span class="number">86869</span>,<span class="number">19872</span>,<span class="number">42416</span>,<span class="number">83315</span>,<span class="number">21168</span>,<span class="number">43432</span>,<span class="number">59728</span>,<span class="number">27296</span>,<span class="number">44710</span>,<span class="number">43856</span>,<span class="number">19296</span>,<span class="number">43748</span>,<span class="number">42352</span>,<span class="number">21088</span>,<span class="number">62051</span>,<span class="number">55632</span>,<span class="number">23383</span>,<span class="number">22176</span>,<span class="number">38608</span>,<span class="number">19925</span>,<span class="number">19152</span>,<span class="number">42192</span>,<span class="number">54484</span>,<span class="number">53840</span>,<span class="number">54616</span>,<span class="number">46400</span>,<span class="number">46752</span>,<span class="number">103846</span>,<span class="number">38320</span>,<span class="number">18864</span>,<span class="number">43380</span>,<span class="number">42160</span>,<span class="number">45690</span>,<span class="number">27216</span>,<span class="number">27968</span>,<span class="number">44870</span>,<span class="number">43872</span>,<span class="number">38256</span>,<span class="number">19189</span>,<span class="number">18800</span>,<span class="number">25776</span>,<span class="number">29859</span>,<span class="number">59984</span>,<span class="number">27480</span>,<span class="number">23232</span>,<span class="number">43872</span>,<span class="number">38613</span>,<span class="number">37600</span>,<span class="number">51552</span>,<span class="number">55636</span>,<span class="number">54432</span>,<span class="number">55888</span>,<span class="number">30034</span>,<span class="number">22176</span>,<span class="number">43959</span>,<span class="number">9680</span>,<span class="number">37584</span>,<span class="number">51893</span>,<span class="number">43344</span>,<span class="number">46240</span>,<span class="number">47780</span>,<span class="number">44368</span>,<span class="number">21977</span>,<span class="number">19360</span>,<span class="number">42416</span>,<span class="number">86390</span>,<span class="number">21168</span>,<span class="number">43312</span>,<span class="number">31060</span>,<span class="number">27296</span>,<span class="number">44368</span>,<span class="number">23378</span>,<span class="number">19296</span>,<span class="number">42726</span>,<span class="number">42208</span>,<span class="number">53856</span>,<span class="number">60005</span>,<span class="number">54576</span>,<span class="number">23200</span>,<span class="number">30371</span>,<span class="number">38608</span>,<span class="number">19195</span>,<span class="number">19152</span>,<span class="number">42192</span>,<span class="number">118966</span>,<span class="number">53840</span>,<span class="number">54560</span>,<span class="number">56645</span>,<span class="number">46496</span>,<span class="number">22224</span>,<span class="number">21938</span>,<span class="number">18864</span>,<span class="number">42359</span>,<span class="number">42160</span>,<span class="number">43600</span>,<span class="number">111189</span>,<span class="number">27936</span>,<span class="number">44448</span>,<span class="number">84835</span>,<span class="number">37744</span>,<span class="number">18936</span>,<span class="number">18800</span>,<span class="number">25776</span>,<span class="number">92326</span>,<span class="number">59984</span>,<span class="number">27424</span>,<span class="number">108228</span>,<span class="number">43744</span>,<span class="number">41696</span>,<span class="number">53987</span>,<span class="number">51552</span>,<span class="number">54615</span>,<span class="number">54432</span>,<span class="number">55888</span>,<span class="number">23893</span>,<span class="number">22176</span>,<span class="number">42704</span>,<span class="number">21972</span>,<span class="number">21200</span>,<span class="number">43448</span>,<span class="number">43344</span>,<span class="number">46240</span>,<span class="number">46758</span>,<span class="number">44368</span>,<span class="number">21920</span>,<span class="number">43940</span>,<span class="number">42416</span>,<span class="number">21168</span>,<span class="number">45683</span>,<span class="number">26928</span>,<span class="number">29495</span>,<span class="number">27296</span>,<span class="number">44368</span>,<span class="number">84821</span>,<span class="number">19296</span>,<span class="number">42352</span>,<span class="number">21732</span>,<span class="number">53600</span>,<span class="number">59752</span>,<span class="number">54560</span>,<span class="number">55968</span>,<span class="number">92838</span>,<span class="number">22224</span>,<span class="number">19168</span>,<span class="number">43476</span>,<span class="number">41680</span>,<span class="number">53584</span>,<span class="number">62034</span>,<span class="number">54560</span>],solarMonth=[<span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>],<span class="title class_">Gan</span>=[<span class="string">&quot;甲&quot;</span>,<span class="string">&quot;乙&quot;</span>,<span class="string">&quot;丙&quot;</span>,<span class="string">&quot;丁&quot;</span>,<span class="string">&quot;戊&quot;</span>,<span class="string">&quot;己&quot;</span>,<span class="string">&quot;庚&quot;</span>,<span class="string">&quot;辛&quot;</span>,<span class="string">&quot;壬&quot;</span>,<span class="string">&quot;癸&quot;</span>],<span class="title class_">Zhi</span>=[<span class="string">&quot;子&quot;</span>,<span class="string">&quot;丑&quot;</span>,<span class="string">&quot;寅&quot;</span>,<span class="string">&quot;卯&quot;</span>,<span class="string">&quot;辰&quot;</span>,<span class="string">&quot;巳&quot;</span>,<span class="string">&quot;午&quot;</span>,<span class="string">&quot;未&quot;</span>,<span class="string">&quot;申&quot;</span>,<span class="string">&quot;酉&quot;</span>,<span class="string">&quot;戌&quot;</span>,<span class="string">&quot;亥&quot;</span>],<span class="title class_">Animals</span>=[<span class="string">&quot;鼠&quot;</span>,<span class="string">&quot;牛&quot;</span>,<span class="string">&quot;虎&quot;</span>,<span class="string">&quot;兔&quot;</span>,<span class="string">&quot;龙&quot;</span>,<span class="string">&quot;蛇&quot;</span>,<span class="string">&quot;马&quot;</span>,<span class="string">&quot;羊&quot;</span>,<span class="string">&quot;猴&quot;</span>,<span class="string">&quot;鸡&quot;</span>,<span class="string">&quot;狗&quot;</span>,<span class="string">&quot;猪&quot;</span>],solarTerm=[<span class="string">&quot;小寒&quot;</span>,<span class="string">&quot;大寒&quot;</span>,<span class="string">&quot;立春&quot;</span>,<span class="string">&quot;雨水&quot;</span>,<span class="string">&quot;惊蛰&quot;</span>,<span class="string">&quot;春分&quot;</span>,<span class="string">&quot;清明&quot;</span>,<span class="string">&quot;谷雨&quot;</span>,<span class="string">&quot;立夏&quot;</span>,<span class="string">&quot;小满&quot;</span>,<span class="string">&quot;芒种&quot;</span>,<span class="string">&quot;夏至&quot;</span>,<span class="string">&quot;小暑&quot;</span>,<span class="string">&quot;大暑&quot;</span>,<span class="string">&quot;立秋&quot;</span>,<span class="string">&quot;处暑&quot;</span>,<span class="string">&quot;白露&quot;</span>,<span class="string">&quot;秋分&quot;</span>,<span class="string">&quot;寒露&quot;</span>,<span class="string">&quot;霜降&quot;</span>,<span class="string">&quot;立冬&quot;</span>,<span class="string">&quot;小雪&quot;</span>,<span class="string">&quot;大雪&quot;</span>,<span class="string">&quot;冬至&quot;</span>],sTermInfo=[<span class="string">&quot;9778397bd097c36b0b6fc9274c91aa&quot;</span>,<span class="string">&quot;97b6b97bd19801ec9210c965cc920e&quot;</span>,<span class="string">&quot;97bcf97c3598082c95f8c965cc920f&quot;</span>,<span class="string">&quot;97bd0b06bdb0722c965ce1cfcc920f&quot;</span>,<span class="string">&quot;b027097bd097c36b0b6fc9274c91aa&quot;</span>,<span class="string">&quot;97b6b97bd19801ec9210c965cc920e&quot;</span>,<span class="string">&quot;97bcf97c359801ec95f8c965cc920f&quot;</span>,<span class="string">&quot;97bd0b06bdb0722c965ce1cfcc920f&quot;</span>,<span class="string">&quot;b027097bd097c36b0b6fc9274c91aa&quot;</span>,<span class="string">&quot;97b6b97bd19801ec9210c965cc920e&quot;</span>,<span class="string">&quot;97bcf97c359801ec95f8c965cc920f&quot;</span>,<span class="string">&quot;97bd0b06bdb0722c965ce1cfcc920f&quot;</span>,<span class="string">&quot;b027097bd097c36b0b6fc9274c91aa&quot;</span>,<span class="string">&quot;9778397bd19801ec9210c965cc920e&quot;</span>,<span class="string">&quot;97b6b97bd19801ec95f8c965cc920f&quot;</span>,<span class="string">&quot;97bd09801d98082c95f8e1cfcc920f&quot;</span>,<span class="string">&quot;97bd097bd097c36b0b6fc9210c8dc2&quot;</span>,<span class="string">&quot;9778397bd197c36c9210c9274c91aa&quot;</span>,<span class="string">&quot;97b6b97bd19801ec95f8c965cc920e&quot;</span>,<span class="string">&quot;97bd09801d98082c95f8e1cfcc920f&quot;</span>,<span class="string">&quot;97bd097bd097c36b0b6fc9210c8dc2&quot;</span>,<span class="string">&quot;9778397bd097c36c9210c9274c91aa&quot;</span>,<span class="string">&quot;97b6b97bd19801ec95f8c965cc920e&quot;</span>,<span class="string">&quot;97bcf97c3598082c95f8e1cfcc920f&quot;</span>,<span class="string">&quot;97bd097bd097c36b0b6fc9210c8dc2&quot;</span>,<span class="string">&quot;9778397bd097c36c9210c9274c91aa&quot;</span>,<span class="string">&quot;97b6b97bd19801ec9210c965cc920e&quot;</span>,<span class="string">&quot;97bcf97c3598082c95f8c965cc920f&quot;</span>,<span class="string">&quot;97bd097bd097c35b0b6fc920fb0722&quot;</span>,<span class="string">&quot;9778397bd097c36b0b6fc9274c91aa&quot;</span>,<span class="string">&quot;97b6b97bd19801ec9210c965cc920e&quot;</span>,<span class="string">&quot;97bcf97c3598082c95f8c965cc920f&quot;</span>,<span class="string">&quot;97bd097bd097c35b0b6fc920fb0722&quot;</span>,<span class="string">&quot;9778397bd097c36b0b6fc9274c91aa&quot;</span>,<span class="string">&quot;97b6b97bd19801ec9210c965cc920e&quot;</span>,<span class="string">&quot;97bcf97c359801ec95f8c965cc920f&quot;</span>,<span class="string">&quot;97bd097bd097c35b0b6fc920fb0722&quot;</span>,<span class="string">&quot;9778397bd097c36b0b6fc9274c91aa&quot;</span>,<span class="string">&quot;97b6b97bd19801ec9210c965cc920e&quot;</span>,<span class="string">&quot;97bcf97c359801ec95f8c965cc920f&quot;</span>,<span class="string">&quot;97bd097bd097c35b0b6fc920fb0722&quot;</span>,<span class="string">&quot;9778397bd097c36b0b6fc9274c91aa&quot;</span>,<span class="string">&quot;97b6b97bd19801ec9210c965cc920e&quot;</span>,<span class="string">&quot;97bcf97c359801ec95f8c965cc920f&quot;</span>,<span class="string">&quot;97bd097bd07f595b0b6fc920fb0722&quot;</span>,<span class="string">&quot;9778397bd097c36b0b6fc9210c8dc2&quot;</span>,<span class="string">&quot;9778397bd19801ec9210c9274c920e&quot;</span>,<span class="string">&quot;97b6b97bd19801ec95f8c965cc920f&quot;</span>,<span class="string">&quot;97bd07f5307f595b0b0bc920fb0722&quot;</span>,<span class="string">&quot;7f0e397bd097c36b0b6fc9210c8dc2&quot;</span>,<span class="string">&quot;9778397bd097c36c9210c9274c920e&quot;</span>,<span class="string">&quot;97b6b97bd19801ec95f8c965cc920f&quot;</span>,<span class="string">&quot;97bd07f5307f595b0b0bc920fb0722&quot;</span>,<span class="string">&quot;7f0e397bd097c36b0b6fc9210c8dc2&quot;</span>,<span class="string">&quot;9778397bd097c36c9210c9274c91aa&quot;</span>,<span class="string">&quot;97b6b97bd19801ec9210c965cc920e&quot;</span>,<span class="string">&quot;97bd07f1487f595b0b0bc920fb0722&quot;</span>,<span class="string">&quot;7f0e397bd097c36b0b6fc9210c8dc2&quot;</span>,<span class="string">&quot;9778397bd097c36b0b6fc9274c91aa&quot;</span>,<span class="string">&quot;97b6b97bd19801ec9210c965cc920e&quot;</span>,<span class="string">&quot;97bcf7f1487f595b0b0bb0b6fb0722&quot;</span>,<span class="string">&quot;7f0e397bd097c35b0b6fc920fb0722&quot;</span>,<span class="string">&quot;9778397bd097c36b0b6fc9274c91aa&quot;</span>,<span class="string">&quot;97b6b97bd19801ec9210c965cc920e&quot;</span>,<span class="string">&quot;97bcf7f1487f595b0b0bb0b6fb0722&quot;</span>,<span class="string">&quot;7f0e397bd097c35b0b6fc920fb0722&quot;</span>,<span class="string">&quot;9778397bd097c36b0b6fc9274c91aa&quot;</span>,<span class="string">&quot;97b6b97bd19801ec9210c965cc920e&quot;</span>,<span class="string">&quot;97bcf7f1487f531b0b0bb0b6fb0722&quot;</span>,<span class="string">&quot;7f0e397bd097c35b0b6fc920fb0722&quot;</span>,<span class="string">&quot;9778397bd097c36b0b6fc9274c91aa&quot;</span>,<span class="string">&quot;97b6b97bd19801ec9210c965cc920e&quot;</span>,<span class="string">&quot;97bcf7f1487f531b0b0bb0b6fb0722&quot;</span>,<span class="string">&quot;7f0e397bd07f595b0b6fc920fb0722&quot;</span>,<span class="string">&quot;9778397bd097c36b0b6fc9274c91aa&quot;</span>,<span class="string">&quot;97b6b97bd19801ec9210c9274c920e&quot;</span>,<span class="string">&quot;97bcf7f0e47f531b0b0bb0b6fb0722&quot;</span>,<span class="string">&quot;7f0e397bd07f595b0b0bc920fb0722&quot;</span>,<span class="string">&quot;9778397bd097c36b0b6fc9210c91aa&quot;</span>,<span class="string">&quot;97b6b97bd197c36c9210c9274c920e&quot;</span>,<span class="string">&quot;97bcf7f0e47f531b0b0bb0b6fb0722&quot;</span>,<span class="string">&quot;7f0e397bd07f595b0b0bc920fb0722&quot;</span>,<span class="string">&quot;9778397bd097c36b0b6fc9210c8dc2&quot;</span>,<span class="string">&quot;9778397bd097c36c9210c9274c920e&quot;</span>,<span class="string">&quot;97b6b7f0e47f531b0723b0b6fb0722&quot;</span>,<span class="string">&quot;7f0e37f5307f595b0b0bc920fb0722&quot;</span>,<span class="string">&quot;7f0e397bd097c36b0b6fc9210c8dc2&quot;</span>,<span class="string">&quot;9778397bd097c36b0b70c9274c91aa&quot;</span>,<span class="string">&quot;97b6b7f0e47f531b0723b0b6fb0721&quot;</span>,<span class="string">&quot;7f0e37f1487f595b0b0bb0b6fb0722&quot;</span>,<span class="string">&quot;7f0e397bd097c35b0b6fc9210c8dc2&quot;</span>,<span class="string">&quot;9778397bd097c36b0b6fc9274c91aa&quot;</span>,<span class="string">&quot;97b6b7f0e47f531b0723b0b6fb0721&quot;</span>,<span class="string">&quot;7f0e27f1487f595b0b0bb0b6fb0722&quot;</span>,<span class="string">&quot;7f0e397bd097c35b0b6fc920fb0722&quot;</span>,<span class="string">&quot;9778397bd097c36b0b6fc9274c91aa&quot;</span>,<span class="string">&quot;97b6b7f0e47f531b0723b0b6fb0721&quot;</span>,<span class="string">&quot;7f0e27f1487f531b0b0bb0b6fb0722&quot;</span>,<span class="string">&quot;7f0e397bd097c35b0b6fc920fb0722&quot;</span>,<span class="string">&quot;9778397bd097c36b0b6fc9274c91aa&quot;</span>,<span class="string">&quot;97b6b7f0e47f531b0723b0b6fb0721&quot;</span>,<span class="string">&quot;7f0e27f1487f531b0b0bb0b6fb0722&quot;</span>,<span class="string">&quot;7f0e397bd097c35b0b6fc920fb0722&quot;</span>,<span class="string">&quot;9778397bd097c36b0b6fc9274c91aa&quot;</span>,<span class="string">&quot;97b6b7f0e47f531b0723b0b6fb0721&quot;</span>,<span class="string">&quot;7f0e27f1487f531b0b0bb0b6fb0722&quot;</span>,<span class="string">&quot;7f0e397bd07f595b0b0bc920fb0722&quot;</span>,<span class="string">&quot;9778397bd097c36b0b6fc9274c91aa&quot;</span>,<span class="string">&quot;97b6b7f0e47f531b0723b0787b0721&quot;</span>,<span class="string">&quot;7f0e27f0e47f531b0b0bb0b6fb0722&quot;</span>,<span class="string">&quot;7f0e397bd07f595b0b0bc920fb0722&quot;</span>,<span class="string">&quot;9778397bd097c36b0b6fc9210c91aa&quot;</span>,<span class="string">&quot;97b6b7f0e47f149b0723b0787b0721&quot;</span>,<span class="string">&quot;7f0e27f0e47f531b0723b0b6fb0722&quot;</span>,<span class="string">&quot;7f0e397bd07f595b0b0bc920fb0722&quot;</span>,<span class="string">&quot;9778397bd097c36b0b6fc9210c8dc2&quot;</span>,<span class="string">&quot;977837f0e37f149b0723b0787b0721&quot;</span>,<span class="string">&quot;7f07e7f0e47f531b0723b0b6fb0722&quot;</span>,<span class="string">&quot;7f0e37f5307f595b0b0bc920fb0722&quot;</span>,<span class="string">&quot;7f0e397bd097c35b0b6fc9210c8dc2&quot;</span>,<span class="string">&quot;977837f0e37f14998082b0787b0721&quot;</span>,<span class="string">&quot;7f07e7f0e47f531b0723b0b6fb0721&quot;</span>,<span class="string">&quot;7f0e37f1487f595b0b0bb0b6fb0722&quot;</span>,<span class="string">&quot;7f0e397bd097c35b0b6fc9210c8dc2&quot;</span>,<span class="string">&quot;977837f0e37f14998082b0787b06bd&quot;</span>,<span class="string">&quot;7f07e7f0e47f531b0723b0b6fb0721&quot;</span>,<span class="string">&quot;7f0e27f1487f531b0b0bb0b6fb0722&quot;</span>,<span class="string">&quot;7f0e397bd097c35b0b6fc920fb0722&quot;</span>,<span class="string">&quot;977837f0e37f14998082b0787b06bd&quot;</span>,<span class="string">&quot;7f07e7f0e47f531b0723b0b6fb0721&quot;</span>,<span class="string">&quot;7f0e27f1487f531b0b0bb0b6fb0722&quot;</span>,<span class="string">&quot;7f0e397bd097c35b0b6fc920fb0722&quot;</span>,<span class="string">&quot;977837f0e37f14998082b0787b06bd&quot;</span>,<span class="string">&quot;7f07e7f0e47f531b0723b0b6fb0721&quot;</span>,<span class="string">&quot;7f0e27f1487f531b0b0bb0b6fb0722&quot;</span>,<span class="string">&quot;7f0e397bd07f595b0b0bc920fb0722&quot;</span>,<span class="string">&quot;977837f0e37f14998082b0787b06bd&quot;</span>,<span class="string">&quot;7f07e7f0e47f531b0723b0b6fb0721&quot;</span>,<span class="string">&quot;7f0e27f1487f531b0b0bb0b6fb0722&quot;</span>,<span class="string">&quot;7f0e397bd07f595b0b0bc920fb0722&quot;</span>,<span class="string">&quot;977837f0e37f14998082b0787b06bd&quot;</span>,<span class="string">&quot;7f07e7f0e47f149b0723b0787b0721&quot;</span>,<span class="string">&quot;7f0e27f0e47f531b0b0bb0b6fb0722&quot;</span>,<span class="string">&quot;7f0e397bd07f595b0b0bc920fb0722&quot;</span>,<span class="string">&quot;977837f0e37f14998082b0723b06bd&quot;</span>,<span class="string">&quot;7f07e7f0e37f149b0723b0787b0721&quot;</span>,<span class="string">&quot;7f0e27f0e47f531b0723b0b6fb0722&quot;</span>,<span class="string">&quot;7f0e397bd07f595b0b0bc920fb0722&quot;</span>,<span class="string">&quot;977837f0e37f14898082b0723b02d5&quot;</span>,<span class="string">&quot;7ec967f0e37f14998082b0787b0721&quot;</span>,<span class="string">&quot;7f07e7f0e47f531b0723b0b6fb0722&quot;</span>,<span class="string">&quot;7f0e37f1487f595b0b0bb0b6fb0722&quot;</span>,<span class="string">&quot;7f0e37f0e37f14898082b0723b02d5&quot;</span>,<span class="string">&quot;7ec967f0e37f14998082b0787b0721&quot;</span>,<span class="string">&quot;7f07e7f0e47f531b0723b0b6fb0722&quot;</span>,<span class="string">&quot;7f0e37f1487f531b0b0bb0b6fb0722&quot;</span>,<span class="string">&quot;7f0e37f0e37f14898082b0723b02d5&quot;</span>,<span class="string">&quot;7ec967f0e37f14998082b0787b06bd&quot;</span>,<span class="string">&quot;7f07e7f0e47f531b0723b0b6fb0721&quot;</span>,<span class="string">&quot;7f0e37f1487f531b0b0bb0b6fb0722&quot;</span>,<span class="string">&quot;7f0e37f0e37f14898082b072297c35&quot;</span>,<span class="string">&quot;7ec967f0e37f14998082b0787b06bd&quot;</span>,<span class="string">&quot;7f07e7f0e47f531b0723b0b6fb0721&quot;</span>,<span class="string">&quot;7f0e27f1487f531b0b0bb0b6fb0722&quot;</span>,<span class="string">&quot;7f0e37f0e37f14898082b072297c35&quot;</span>,<span class="string">&quot;7ec967f0e37f14998082b0787b06bd&quot;</span>,<span class="string">&quot;7f07e7f0e47f531b0723b0b6fb0721&quot;</span>,<span class="string">&quot;7f0e27f1487f531b0b0bb0b6fb0722&quot;</span>,<span class="string">&quot;7f0e37f0e366aa89801eb072297c35&quot;</span>,<span class="string">&quot;7ec967f0e37f14998082b0787b06bd&quot;</span>,<span class="string">&quot;7f07e7f0e47f149b0723b0787b0721&quot;</span>,<span class="string">&quot;7f0e27f1487f531b0b0bb0b6fb0722&quot;</span>,<span class="string">&quot;7f0e37f0e366aa89801eb072297c35&quot;</span>,<span class="string">&quot;7ec967f0e37f14998082b0723b06bd&quot;</span>,<span class="string">&quot;7f07e7f0e47f149b0723b0787b0721&quot;</span>,<span class="string">&quot;7f0e27f0e47f531b0723b0b6fb0722&quot;</span>,<span class="string">&quot;7f0e37f0e366aa89801eb072297c35&quot;</span>,<span class="string">&quot;7ec967f0e37f14998082b0723b06bd&quot;</span>,<span class="string">&quot;7f07e7f0e37f14998083b0787b0721&quot;</span>,<span class="string">&quot;7f0e27f0e47f531b0723b0b6fb0722&quot;</span>,<span class="string">&quot;7f0e37f0e366aa89801eb072297c35&quot;</span>,<span class="string">&quot;7ec967f0e37f14898082b0723b02d5&quot;</span>,<span class="string">&quot;7f07e7f0e37f14998082b0787b0721&quot;</span>,<span class="string">&quot;7f07e7f0e47f531b0723b0b6fb0722&quot;</span>,<span class="string">&quot;7f0e36665b66aa89801e9808297c35&quot;</span>,<span class="string">&quot;665f67f0e37f14898082b0723b02d5&quot;</span>,<span class="string">&quot;7ec967f0e37f14998082b0787b0721&quot;</span>,<span class="string">&quot;7f07e7f0e47f531b0723b0b6fb0722&quot;</span>,<span class="string">&quot;7f0e36665b66a449801e9808297c35&quot;</span>,<span class="string">&quot;665f67f0e37f14898082b0723b02d5&quot;</span>,<span class="string">&quot;7ec967f0e37f14998082b0787b06bd&quot;</span>,<span class="string">&quot;7f07e7f0e47f531b0723b0b6fb0721&quot;</span>,<span class="string">&quot;7f0e36665b66a449801e9808297c35&quot;</span>,<span class="string">&quot;665f67f0e37f14898082b072297c35&quot;</span>,<span class="string">&quot;7ec967f0e37f14998082b0787b06bd&quot;</span>,<span class="string">&quot;7f07e7f0e47f531b0723b0b6fb0721&quot;</span>,<span class="string">&quot;7f0e26665b66a449801e9808297c35&quot;</span>,<span class="string">&quot;665f67f0e37f1489801eb072297c35&quot;</span>,<span class="string">&quot;7ec967f0e37f14998082b0787b06bd&quot;</span>,<span class="string">&quot;7f07e7f0e47f531b0723b0b6fb0721&quot;</span>,<span class="string">&quot;7f0e27f1487f531b0b0bb0b6fb0722&quot;</span>],nStr1=[<span class="string">&quot;日&quot;</span>,<span class="string">&quot;一&quot;</span>,<span class="string">&quot;二&quot;</span>,<span class="string">&quot;三&quot;</span>,<span class="string">&quot;四&quot;</span>,<span class="string">&quot;五&quot;</span>,<span class="string">&quot;六&quot;</span>,<span class="string">&quot;七&quot;</span>,<span class="string">&quot;八&quot;</span>,<span class="string">&quot;九&quot;</span>,<span class="string">&quot;十&quot;</span>],nStr2=[<span class="string">&quot;初&quot;</span>,<span class="string">&quot;十&quot;</span>,<span class="string">&quot;廿&quot;</span>,<span class="string">&quot;卅&quot;</span>],nStr3=[<span class="string">&quot;正&quot;</span>,<span class="string">&quot;二&quot;</span>,<span class="string">&quot;三&quot;</span>,<span class="string">&quot;四&quot;</span>,<span class="string">&quot;五&quot;</span>,<span class="string">&quot;六&quot;</span>,<span class="string">&quot;七&quot;</span>,<span class="string">&quot;八&quot;</span>,<span class="string">&quot;九&quot;</span>,<span class="string">&quot;十&quot;</span>,<span class="string">&quot;冬&quot;</span>,<span class="string">&quot;腊&quot;</span>];<span class="keyword">function</span> <span class="title function_">lYearDays</span>(<span class="params">b</span>)&#123;<span class="keyword">var</span> f,c=<span class="number">348</span>;<span class="keyword">for</span>(f=<span class="number">32768</span>;f&gt;<span class="number">8</span>;f&gt;&gt;=<span class="number">1</span>)c+=lunarInfo[b-<span class="number">1900</span>]&amp;f?<span class="number">1</span>:<span class="number">0</span>;<span class="keyword">return</span> c+<span class="title function_">leapDays</span>(b)&#125;<span class="keyword">function</span> <span class="title function_">leapMonth</span>(<span class="params">b</span>)&#123;<span class="keyword">return</span> <span class="number">15</span>&amp;lunarInfo[b-<span class="number">1900</span>]&#125;<span class="keyword">function</span> <span class="title function_">leapDays</span>(<span class="params">b</span>)&#123;<span class="keyword">return</span> <span class="title function_">leapMonth</span>(b)?<span class="number">65536</span>&amp;lunarInfo[b-<span class="number">1900</span>]?<span class="number">30</span>:<span class="number">29</span>:<span class="number">0</span>&#125;<span class="keyword">function</span> <span class="title function_">monthDays</span>(<span class="params">b,f</span>)&#123;<span class="keyword">return</span> f&gt;<span class="number">12</span>||f&lt;<span class="number">1</span>?-<span class="number">1</span>:lunarInfo[b-<span class="number">1900</span>]&amp;<span class="number">65536</span>&gt;&gt;f?<span class="number">30</span>:<span class="number">29</span>&#125;<span class="keyword">function</span> <span class="title function_">solarDays</span>(<span class="params">b,f</span>)&#123;<span class="keyword">if</span>(f&gt;<span class="number">12</span>||f&lt;<span class="number">1</span>)<span class="keyword">return</span>-<span class="number">1</span>;<span class="keyword">var</span> c=f-<span class="number">1</span>;<span class="keyword">return</span> <span class="number">1</span>===c?b%<span class="number">4</span>==<span class="number">0</span>&amp;&amp;b%<span class="number">100</span>!=<span class="number">0</span>||b%<span class="number">400</span>==<span class="number">0</span>?<span class="number">29</span>:<span class="number">28</span>:solarMonth[c]&#125;<span class="keyword">function</span> <span class="title function_">toGanZhiYear</span>(<span class="params">b</span>)&#123;<span class="keyword">var</span> f=(b-<span class="number">3</span>)%<span class="number">10</span>,c=(b-<span class="number">3</span>)%<span class="number">12</span>;<span class="keyword">return</span> <span class="number">0</span>===f&amp;&amp;(f=<span class="number">10</span>),<span class="number">0</span>===c&amp;&amp;(c=<span class="number">12</span>),<span class="title class_">Gan</span>[f-<span class="number">1</span>]+<span class="title class_">Zhi</span>[c-<span class="number">1</span>]&#125;<span class="keyword">function</span> <span class="title function_">toAstro</span>(<span class="params">b,f</span>)&#123;<span class="keyword">return</span><span class="string">&quot;魔羯水瓶双鱼白羊金牛双子巨蟹狮子处女天秤天蝎射手魔羯&quot;</span>.<span class="title function_">substr</span>(<span class="number">2</span>*b-(f&lt;[<span class="number">20</span>,<span class="number">19</span>,<span class="number">21</span>,<span class="number">21</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">23</span>,<span class="number">23</span>,<span class="number">23</span>,<span class="number">22</span>,<span class="number">22</span>][b-<span class="number">1</span>]?<span class="number">2</span>:<span class="number">0</span>),<span class="number">2</span>)+<span class="string">&quot;座&quot;</span>&#125;<span class="keyword">function</span> <span class="title function_">toGanZhi</span>(<span class="params">b</span>)&#123;<span class="keyword">return</span> <span class="title class_">Gan</span>[b%<span class="number">10</span>]+<span class="title class_">Zhi</span>[b%<span class="number">12</span>]&#125;<span class="keyword">function</span> <span class="title function_">getTerm</span>(<span class="params">b,f</span>)&#123;<span class="keyword">if</span>(b&lt;<span class="number">1900</span>||b&gt;<span class="number">2100</span>)<span class="keyword">return</span>-<span class="number">1</span>;<span class="keyword">if</span>(f&lt;<span class="number">1</span>||f&gt;<span class="number">24</span>)<span class="keyword">return</span>-<span class="number">1</span>;<span class="keyword">var</span> c=sTermInfo[b-<span class="number">1900</span>],e=[<span class="built_in">parseInt</span>(<span class="string">&quot;0x&quot;</span>+c.<span class="title function_">substr</span>(<span class="number">0</span>,<span class="number">5</span>)).<span class="title function_">toString</span>(),<span class="built_in">parseInt</span>(<span class="string">&quot;0x&quot;</span>+c.<span class="title function_">substr</span>(<span class="number">5</span>,<span class="number">5</span>)).<span class="title function_">toString</span>(),<span class="built_in">parseInt</span>(<span class="string">&quot;0x&quot;</span>+c.<span class="title function_">substr</span>(<span class="number">10</span>,<span class="number">5</span>)).<span class="title function_">toString</span>(),<span class="built_in">parseInt</span>(<span class="string">&quot;0x&quot;</span>+c.<span class="title function_">substr</span>(<span class="number">15</span>,<span class="number">5</span>)).<span class="title function_">toString</span>(),<span class="built_in">parseInt</span>(<span class="string">&quot;0x&quot;</span>+c.<span class="title function_">substr</span>(<span class="number">20</span>,<span class="number">5</span>)).<span class="title function_">toString</span>(),<span class="built_in">parseInt</span>(<span class="string">&quot;0x&quot;</span>+c.<span class="title function_">substr</span>(<span class="number">25</span>,<span class="number">5</span>)).<span class="title function_">toString</span>()],a=[e[<span class="number">0</span>].<span class="title function_">substr</span>(<span class="number">0</span>,<span class="number">1</span>),e[<span class="number">0</span>].<span class="title function_">substr</span>(<span class="number">1</span>,<span class="number">2</span>),e[<span class="number">0</span>].<span class="title function_">substr</span>(<span class="number">3</span>,<span class="number">1</span>),e[<span class="number">0</span>].<span class="title function_">substr</span>(<span class="number">4</span>,<span class="number">2</span>),e[<span class="number">1</span>].<span class="title function_">substr</span>(<span class="number">0</span>,<span class="number">1</span>),e[<span class="number">1</span>].<span class="title function_">substr</span>(<span class="number">1</span>,<span class="number">2</span>),e[<span class="number">1</span>].<span class="title function_">substr</span>(<span class="number">3</span>,<span class="number">1</span>),e[<span class="number">1</span>].<span class="title function_">substr</span>(<span class="number">4</span>,<span class="number">2</span>),e[<span class="number">2</span>].<span class="title function_">substr</span>(<span class="number">0</span>,<span class="number">1</span>),e[<span class="number">2</span>].<span class="title function_">substr</span>(<span class="number">1</span>,<span class="number">2</span>),e[<span class="number">2</span>].<span class="title function_">substr</span>(<span class="number">3</span>,<span class="number">1</span>),e[<span class="number">2</span>].<span class="title function_">substr</span>(<span class="number">4</span>,<span class="number">2</span>),e[<span class="number">3</span>].<span class="title function_">substr</span>(<span class="number">0</span>,<span class="number">1</span>),e[<span class="number">3</span>].<span class="title function_">substr</span>(<span class="number">1</span>,<span class="number">2</span>),e[<span class="number">3</span>].<span class="title function_">substr</span>(<span class="number">3</span>,<span class="number">1</span>),e[<span class="number">3</span>].<span class="title function_">substr</span>(<span class="number">4</span>,<span class="number">2</span>),e[<span class="number">4</span>].<span class="title function_">substr</span>(<span class="number">0</span>,<span class="number">1</span>),e[<span class="number">4</span>].<span class="title function_">substr</span>(<span class="number">1</span>,<span class="number">2</span>),e[<span class="number">4</span>].<span class="title function_">substr</span>(<span class="number">3</span>,<span class="number">1</span>),e[<span class="number">4</span>].<span class="title function_">substr</span>(<span class="number">4</span>,<span class="number">2</span>),e[<span class="number">5</span>].<span class="title function_">substr</span>(<span class="number">0</span>,<span class="number">1</span>),e[<span class="number">5</span>].<span class="title function_">substr</span>(<span class="number">1</span>,<span class="number">2</span>),e[<span class="number">5</span>].<span class="title function_">substr</span>(<span class="number">3</span>,<span class="number">1</span>),e[<span class="number">5</span>].<span class="title function_">substr</span>(<span class="number">4</span>,<span class="number">2</span>)];<span class="keyword">return</span> <span class="built_in">parseInt</span>(a[f-<span class="number">1</span>])&#125;<span class="keyword">function</span> <span class="title function_">toChinaMonth</span>(<span class="params">b</span>)&#123;<span class="keyword">if</span>(b&gt;<span class="number">12</span>||b&lt;<span class="number">1</span>)<span class="keyword">return</span>-<span class="number">1</span>;<span class="keyword">var</span> f=nStr3[b-<span class="number">1</span>];<span class="keyword">return</span> f+=<span class="string">&quot;月&quot;</span>&#125;<span class="keyword">function</span> <span class="title function_">toChinaDay</span>(<span class="params">b</span>)&#123;<span class="keyword">var</span> f;<span class="keyword">switch</span>(b)&#123;<span class="keyword">case</span> <span class="number">10</span>:f=<span class="string">&quot;初十&quot;</span>;<span class="keyword">break</span>;<span class="keyword">case</span> <span class="number">20</span>:f=<span class="string">&quot;二十&quot;</span>;<span class="keyword">break</span>;<span class="keyword">case</span> <span class="number">30</span>:f=<span class="string">&quot;三十&quot;</span>;<span class="keyword">break</span>;<span class="attr">default</span>:f=nStr2[<span class="title class_">Math</span>.<span class="title function_">floor</span>(b/<span class="number">10</span>)],f+=nStr1[b%<span class="number">10</span>]&#125;<span class="keyword">return</span> f&#125;<span class="keyword">function</span> <span class="title function_">getAnimal</span>(<span class="params">b</span>)&#123;<span class="keyword">return</span> <span class="title class_">Animals</span>[(b-<span class="number">4</span>)%<span class="number">12</span>]&#125;<span class="keyword">function</span> <span class="title function_">solar2lunar</span>(<span class="params">b,f,c</span>)&#123;<span class="keyword">if</span>(b&lt;<span class="number">1900</span>||b&gt;<span class="number">2100</span>)<span class="keyword">return</span>-<span class="number">1</span>;<span class="keyword">if</span>(<span class="number">1900</span>===b&amp;&amp;<span class="number">1</span>===f&amp;&amp;c&lt;<span class="number">31</span>)<span class="keyword">return</span>-<span class="number">1</span>;<span class="keyword">var</span> e,a,r=<span class="literal">null</span>,t=<span class="number">0</span>;b=(r=b?<span class="keyword">new</span> <span class="title class_">Date</span>(b,<span class="built_in">parseInt</span>(f)-<span class="number">1</span>,c):<span class="keyword">new</span> <span class="title class_">Date</span>).<span class="title function_">getFullYear</span>(),f=r.<span class="title function_">getMonth</span>()+<span class="number">1</span>,c=r.<span class="title function_">getDate</span>();<span class="keyword">var</span> d=(<span class="title class_">Date</span>.<span class="title function_">UTC</span>(r.<span class="title function_">getFullYear</span>(),r.<span class="title function_">getMonth</span>(),r.<span class="title function_">getDate</span>())-<span class="title class_">Date</span>.<span class="title function_">UTC</span>(<span class="number">1900</span>,<span class="number">0</span>,<span class="number">31</span>))/<span class="number">864e5</span>;<span class="keyword">for</span>(e=<span class="number">1900</span>;e&lt;<span class="number">2101</span>&amp;&amp;d&gt;<span class="number">0</span>;e++)d-=t=<span class="title function_">lYearDays</span>(e);d&lt;<span class="number">0</span>&amp;&amp;(d+=t,e--);<span class="keyword">var</span> n=<span class="keyword">new</span> <span class="title class_">Date</span>,s=!<span class="number">1</span>;n.<span class="title function_">getFullYear</span>()===b&amp;&amp;n.<span class="title function_">getMonth</span>()+<span class="number">1</span>===f&amp;&amp;n.<span class="title function_">getDate</span>()===c&amp;&amp;(s=!<span class="number">0</span>);<span class="keyword">var</span> u=r.<span class="title function_">getDay</span>(),o=nStr1[u];<span class="number">0</span>===u&amp;&amp;(u=<span class="number">7</span>);<span class="keyword">var</span> l=e;a=<span class="title function_">leapMonth</span>(e);<span class="keyword">var</span> i=!<span class="number">1</span>;<span class="keyword">for</span>(e=<span class="number">1</span>;e&lt;<span class="number">13</span>&amp;&amp;d&gt;<span class="number">0</span>;e++)a&gt;<span class="number">0</span>&amp;&amp;e===a+<span class="number">1</span>&amp;&amp;!<span class="number">1</span>===i?(--e,i=!<span class="number">0</span>,t=<span class="title function_">leapDays</span>(l)):t=<span class="title function_">monthDays</span>(l,e),!<span class="number">0</span>===i&amp;&amp;e===a+<span class="number">1</span>&amp;&amp;(i=!<span class="number">1</span>),d-=t;<span class="number">0</span>===d&amp;&amp;a&gt;<span class="number">0</span>&amp;&amp;e===a+<span class="number">1</span>&amp;&amp;(i?i=!<span class="number">1</span>:(i=!<span class="number">0</span>,--e)),d&lt;<span class="number">0</span>&amp;&amp;(d+=t,--e);<span class="keyword">var</span> h=e,D=d+<span class="number">1</span>,g=f-<span class="number">1</span>,v=<span class="title function_">toGanZhiYear</span>(l),y=<span class="title function_">getTerm</span>(b,<span class="number">2</span>*f-<span class="number">1</span>),m=<span class="title function_">getTerm</span>(b,<span class="number">2</span>*f),p=<span class="title function_">toGanZhi</span>(<span class="number">12</span>*(b-<span class="number">1900</span>)+f+<span class="number">11</span>);c&gt;=y&amp;&amp;(p=<span class="title function_">toGanZhi</span>(<span class="number">12</span>*(b-<span class="number">1900</span>)+f+<span class="number">12</span>));<span class="keyword">var</span> M=!<span class="number">1</span>,T=<span class="literal">null</span>;y===c&amp;&amp;(M=!<span class="number">0</span>,T=solarTerm[<span class="number">2</span>*f-<span class="number">2</span>]),m===c&amp;&amp;(M=!<span class="number">0</span>,T=solarTerm[<span class="number">2</span>*f-<span class="number">1</span>]);<span class="keyword">var</span> I=<span class="title function_">toGanZhi</span>(<span class="title class_">Date</span>.<span class="title function_">UTC</span>(b,g,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)/<span class="number">864e5</span>+<span class="number">25567</span>+<span class="number">10</span>+c-<span class="number">1</span>),C=<span class="title function_">toAstro</span>(f,c);<span class="keyword">return</span>&#123;<span class="attr">lYear</span>:l,<span class="attr">lMonth</span>:h,<span class="attr">lDay</span>:D,<span class="title class_">Animal</span>:<span class="title function_">getAnimal</span>(l),<span class="title class_">IMonthCn</span>:(i?<span class="string">&quot;闰&quot;</span>:<span class="string">&quot;&quot;</span>)+<span class="title function_">toChinaMonth</span>(h),<span class="title class_">IDayCn</span>:<span class="title function_">toChinaDay</span>(D),<span class="attr">cYear</span>:b,<span class="attr">cMonth</span>:f,<span class="attr">cDay</span>:c,<span class="attr">gzYear</span>:v,<span class="attr">gzMonth</span>:p,<span class="attr">gzDay</span>:I,<span class="attr">isToday</span>:s,<span class="attr">isLeap</span>:i,<span class="attr">nWeek</span>:u,<span class="attr">ncWeek</span>:<span class="string">&quot;星期&quot;</span>+o,<span class="attr">isTerm</span>:M,<span class="title class_">Term</span>:T,<span class="attr">astro</span>:C&#125;&#125;<span class="keyword">var</span> calendarFormatter=&#123;<span class="attr">solar2lunar</span>:<span class="keyword">function</span>(<span class="params">b,f,c</span>)&#123;<span class="keyword">return</span> <span class="title function_">solar2lunar</span>(b,f,c)&#125;,<span class="attr">lunar2solar</span>:<span class="keyword">function</span>(<span class="params">b,f,c,e</span>)&#123;<span class="keyword">if</span>((e=!!e)&amp;&amp;leapMonth!==f)<span class="keyword">return</span>-<span class="number">1</span>;<span class="keyword">if</span>(<span class="number">2100</span>===b&amp;&amp;<span class="number">12</span>===f&amp;&amp;c&gt;<span class="number">1</span>||<span class="number">1900</span>===b&amp;&amp;<span class="number">1</span>===f&amp;&amp;c&lt;<span class="number">31</span>)<span class="keyword">return</span>-<span class="number">1</span>;<span class="keyword">var</span> a=<span class="title function_">monthDays</span>(b,f),r=a;<span class="keyword">if</span>(e&amp;&amp;(r=<span class="title function_">leapDays</span>(b,f)),b&lt;<span class="number">1900</span>||b&gt;<span class="number">2100</span>||c&gt;r)<span class="keyword">return</span>-<span class="number">1</span>;<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>,d=<span class="number">1900</span>;d&lt;b;d++)t+=<span class="title function_">lYearDays</span>(d);<span class="keyword">var</span> n=<span class="number">0</span>,s=!<span class="number">1</span>;<span class="keyword">for</span>(d=<span class="number">1</span>;d&lt;f;d++)n=<span class="title function_">leapMonth</span>(b),s||n&lt;=d&amp;&amp;n&gt;<span class="number">0</span>&amp;&amp;(t+=<span class="title function_">leapDays</span>(b),s=!<span class="number">0</span>),t+=<span class="title function_">monthDays</span>(b,d);e&amp;&amp;(t+=a);<span class="keyword">var</span> u=<span class="title class_">Date</span>.<span class="title function_">UTC</span>(<span class="number">1900</span>,<span class="number">1</span>,<span class="number">30</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>),o=<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">864e5</span>*(t+c-<span class="number">31</span>)+u);<span class="keyword">return</span> <span class="title function_">solar2lunar</span>(o.<span class="title function_">getUTCFullYear</span>(),o.<span class="title function_">getUTCMonth</span>()+<span class="number">1</span>,o.<span class="title function_">getUTCDate</span>())&#125;&#125;;</span><br></pre></td></tr></table></figure><h3 id="引入配置文件-1"><a href="#引入配置文件-1" class="headerlink" title="引入配置文件"></a>引入配置文件</h3><p>在主题配置文件 <code>_config.butterfly.yml</code> 中引入弹窗以来和两个配置文件，例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span> </span><br><span class="line">  <span class="attr">bottom:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">defer</span> <span class="string">type=&quot;text/javascript&quot;</span> <span class="string">src=&quot;https://cdn1.tianli0.top/npm/sweetalert2@8.19.0/dist/sweetalert2.all.js&quot;&gt;&lt;/script&gt;</span> <span class="comment"># 节日弹窗依赖</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">defer</span> <span class="string">src=&quot;/js/lunar.js&quot;&gt;&lt;/script&gt;</span> <span class="comment"># 农历计算</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">defer</span> <span class="string">src=&quot;/js/day.js&quot;&gt;&lt;/script&gt;</span> <span class="comment"># 节日弹窗</span></span><br></pre></td></tr></table></figure><p><em><strong>注意顺序不要颠倒</strong></em></p><h2 id="恶搞网站标题"><a href="#恶搞网站标题" class="headerlink" title="恶搞网站标题"></a>恶搞网站标题</h2><p>在 <code>[BlogRoot]\source\js</code> 中新建 <code>title.js</code> 文件，写入下面代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//动态标题</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">OriginTitile</span> = <span class="variable language_">document</span>.<span class="property">title</span>;</span><br><span class="line"><span class="keyword">var</span> titleTime;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;visibilitychange&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">hidden</span>) &#123;</span><br><span class="line">    <span class="comment">//离开当前页面时标签显示内容</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">&#x27;👀跑哪里去了~&#x27;</span>;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(titleTime);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//返回当前页面时标签显示内容</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">&#x27;👮‍抓到你啦～&#x27;</span>;</span><br><span class="line">    <span class="comment">//两秒后变回正常标题</span></span><br><span class="line">    titleTime = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">title</span> = <span class="title class_">OriginTitile</span>;</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在主题配置文件 <code>_config.butterfly.yml</code> 中引入：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span> </span><br><span class="line">  <span class="attr">bottom:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">async</span> <span class="string">src=&quot;/js/title.js&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="替换CDN配置文件"><a href="#替换CDN配置文件" class="headerlink" title="替换CDN配置文件"></a>替换CDN配置文件</h2><p>替换CDN配置能提高部分标准静态资源的响应速度</p><blockquote><p>参考教程：</p><ul><li><a href="https://blog.zhheo.com/p/790087d9.html">HEO大佬的配置</a></li><li><a href="https://www.fomal.cc/posts/d1927166.html">Formalhaut🥝大佬的配置</a></li></ul></blockquote><h2 id="完结撒花"><a href="#完结撒花" class="headerlink" title="完结撒花"></a>完结撒花</h2><p><em><strong>这个系列教程到这里就结束啦，来点感言吧：</strong></em></p><blockquote><ul><li><em><strong>第一次搭博客，一步步跟着教程来，自己也将搭建历程以博客的形式记录了下来，收获很多，也很有成就感！</strong></em></li><li><em><strong>看过几个官方文档，也参考了几个大佬的博客，先感谢大佬前辈们提供的示范先例和教程。</strong></em></li><li><em><strong>途中也出现了几处bug，自己通过浏览器控制台和VSCode，甚至用过Postman工具一步步调试，目前暂时没有未处理的报错了，博客网站各个功能都能正常运行。</strong></em></li><li><em><strong>提醒一下要自己搭建博客网站的朋友们，调试的过程可能比较费时费事，从我的文章更新日期中就可以看出来中间甚至有次甚至卡了好几天，但是调试代码、定位问题、查找资料、排除错误的过程中能学到的东西才是最多的，只有通过亲自调试才能更好地理解别人代码的结构和含义，也就能试着自己定制博客外观或添加功能了。</strong></em></li><li><em><strong>最后，预祝诸位搭建出自己满意的博客网站，在搭建过程中收获满满🎉！也希望诸位没事能常来我的小窝转转，交流学习，吐槽唠嗑！</strong></em></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 博客搭建系列教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Butterfly </tag>
            
            <tag> 博客美化 </tag>
            
            <tag> 博客魔改 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手把手搭建个人博客系列教程-五</title>
      <link href="/2024/05/20/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E4%BA%94/"/>
      <url>/2024/05/20/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E4%BA%94/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong><a href="#%E6%96%87%E7%AB%A0%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE">手把手搭建个人博客系列教程-五</a>:  本节设置文章相关,侧边栏,footer,右下角按钮,404页面,特效,字体,本地搜索,显示模式,预加载动画,标签外挂等</strong></p><blockquote><p><strong>参考文档:</strong></p><ul><li><a href="https://butterfly.js.org/posts/21cfbf15/">Butterfly主题的官方文档</a></li></ul></blockquote><h2 id="环境与工具"><a href="#环境与工具" class="headerlink" title="环境与工具"></a>环境与工具</h2><ul><li>操作系统：Windows 10</li><li>VSCode编辑器</li></ul><hr><h2 id="文章相关配置"><a href="#文章相关配置" class="headerlink" title="文章相关配置"></a>文章相关配置</h2><h3 id="文章meta显示"><a href="#文章meta显示" class="headerlink" title="文章meta显示"></a>文章meta显示</h3><p>文章页针对每篇文章会记录其基本信息meta，包括创建日期、更新日期、分类信息、标签信息等，这些信息会在主页的文章卡片部分和文章页的顶部、底部显示，下面是关于文章meta信息的配置项</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_meta:</span></span><br><span class="line">  <span class="attr">page:</span> <span class="comment"># 主页</span></span><br><span class="line">    <span class="attr">date_type:</span> <span class="string">created</span> <span class="comment"># created/updated/both 主页文章日期是创建日或者更新日或都显示</span></span><br><span class="line">    <span class="attr">date_format:</span> <span class="string">date</span> <span class="comment"># date/relative 显示日期还是相对日期</span></span><br><span class="line">    <span class="attr">categories:</span> <span class="literal">true</span> <span class="comment"># true/false 主页是否显示分类</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="literal">true</span> <span class="comment"># true/false 主页是否显示标签</span></span><br><span class="line">    <span class="attr">label:</span> <span class="literal">true</span> <span class="comment"># true/false 显示描述性文字</span></span><br><span class="line">  <span class="attr">post:</span></span><br><span class="line">    <span class="attr">date_type:</span> <span class="string">updated</span> <span class="comment"># created/updated/both 文章页日期是创建日或者更新日或都显示</span></span><br><span class="line">    <span class="attr">date_format:</span> <span class="string">relative</span> <span class="comment"># date/relative 显示日期还是是相对日期</span></span><br><span class="line">    <span class="attr">categories:</span> <span class="literal">true</span> <span class="comment"># true/false 文章页是否显示分类</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="literal">true</span> <span class="comment"># true/false 文章页是否显示标签</span></span><br><span class="line">    <span class="attr">label:</span> <span class="literal">true</span> <span class="comment"># true/false 显示描述性文字</span></span><br></pre></td></tr></table></figure><ul><li>相对日期指的距今的时间，例如：一个月前</li><li>绝对日期指的是日期格式的时间，例如：2024-05-19</li></ul><h3 id="主页文章描述设置"><a href="#主页文章描述设置" class="headerlink" title="主页文章描述设置"></a>主页文章描述设置</h3><p>主页文章描述使用index_post_content项来配置，包含method和length两个配置项， method项可选值：</p><table><thead><tr><th>可选值</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>文章中front-matter中配置的description</td></tr><tr><td>2</td><td>both(用description如有，否则从文章自动节选)</td></tr><tr><td>3</td><td>从文章自动节选</td></tr></tbody></table><p><em><strong>method选2或3时需要设置length来决定自动节选的长度</strong></em></p><h3 id="复制相关配置"><a href="#复制相关配置" class="headerlink" title="复制相关配置"></a>复制相关配置</h3><p>参数解释：</p><table><thead><tr><th>参数</th><th>描述</th><th>可选值</th></tr></thead><tbody><tr><td>enable</td><td>是否启用</td><td>true</td></tr><tr><td>limit_count</td><td>复制字数超过设定值时，将自动在复制内容后面加上版权信息</td><td>数字，如:100</td></tr></tbody></table><h3 id="文章版权"><a href="#文章版权" class="headerlink" title="文章版权"></a>文章版权</h3><p>post_copyright配置文章版权信息，decode配置项启用后会对版权信息中的中文信息解码，如果你的文章标题或者文章链接中包含中文就启用此项<br>如果有文章(如：转载文章)不需要显示版权，可以在文章的front-matter部分配置copyright项为false</p><h3 id="文章打赏"><a href="#文章打赏" class="headerlink" title="文章打赏"></a>文章打赏</h3><p>在每篇文章的结尾添加打赏功能，格式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">reward:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>  <span class="comment"># 是否启用</span></span><br><span class="line">  <span class="attr">text:</span> <span class="string">打赏按钮显示的文字</span></span><br><span class="line">  <span class="attr">QR_code:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">img:</span> <span class="string">/img/wechatpay.jpg</span>   <span class="comment"># 可为本地图片或者外链图片</span></span><br><span class="line">      <span class="attr">link:</span> <span class="comment"># 点击跳转的链接</span></span><br><span class="line">      <span class="attr">text:</span> <span class="string">wechatpay</span>    <span class="comment"># 图片下方的介绍信息</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">img:</span> <span class="string">/img/alipay.jpg</span></span><br><span class="line">      <span class="attr">link:</span></span><br><span class="line">      <span class="attr">text:</span> <span class="string">alipay</span></span><br></pre></td></tr></table></figure><h3 id="文章页侧边目录"><a href="#文章页侧边目录" class="headerlink" title="文章页侧边目录"></a>文章页侧边目录</h3><p>文章页侧边栏目录展示toc，配置项：</p><table><thead><tr><th>配置项</th><th>描述</th></tr></thead><tbody><tr><td>post</td><td>是否在文章页启用</td></tr><tr><td>page</td><td>是否在其他页面页启用</td></tr><tr><td>number</td><td>目录前的顺序数字是否启用</td></tr><tr><td>expand</td><td>多级目录是否展开</td></tr><tr><td>style_simple</td><td>是否在文章页只展示目录，隐藏社交卡片等侧边栏，此项只对文章页有效</td></tr><tr><td>scroll_percent</td><td>阅读进度展示是否启用</td></tr></tbody></table><h3 id="文章推荐"><a href="#文章推荐" class="headerlink" title="文章推荐"></a>文章推荐</h3><p>related_post文章推荐配置，根据文章的tags比重推荐</p><ul><li><code>limit</code> 项设置推荐的文章数量</li><li><code>data_type</code> 项配置推荐文章日期显示为 <code>created</code> 还是 <code>updated</code></li></ul><h3 id="文章分页"><a href="#文章分页" class="headerlink" title="文章分页"></a>文章分页</h3><p>post_pagination文章分页是文章底部下一篇上一篇的部分，post_pagination配置项解释：</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>下一篇指向更早的文章</td></tr><tr><td>2</td><td>下一篇指向更新的文章</td></tr><tr><td>false</td><td>不启用分页功能</td></tr></tbody></table><h3 id="文章过期提醒"><a href="#文章过期提醒" class="headerlink" title="文章过期提醒"></a>文章过期提醒</h3><p>noticeOutdate文章过期提醒配置项：</p><table><thead><tr><th>配置项</th><th>描述</th><th>可选值</th></tr></thead><tbody><tr><td>style</td><td>过期提醒消息的风格</td><td>simple&#x2F;flat</td></tr><tr><td>limit_day</td><td>文章更新距今超过此参数会进行过期提醒</td><td>数字，如500表示500天</td></tr><tr><td>position</td><td>提醒消息的位置</td><td>top&#x2F;bottom</td></tr><tr><td>message_prev</td><td>天数之前的消息</td><td>例:It has been</td></tr><tr><td>message_next</td><td>天数之后的消息</td><td>例如:days since the last update, the content may be outdated.</td></tr></tbody></table><h3 id="分享文章"><a href="#分享文章" class="headerlink" title="分享文章"></a>分享文章</h3><p>在博客文章页末尾添加分享按钮</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sharejs:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">sites:</span> <span class="string">wechat,weibo,qq</span></span><br></pre></td></tr></table></figure><h3 id="字数统计"><a href="#字数统计" class="headerlink" title="字数统计"></a>字数统计</h3><p>wordcount: 文章的字数统计，会显示在文章页的最上方统计栏，包含字数统计，阅读需要的时间，总字数统计信息，更多介绍见<a href="https://butterfly.js.org/posts/ceeb73f/">官网</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">wordcount:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post_wordcount:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">min2read:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_wordcount:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="文章页的标题图标"><a href="#文章页的标题图标" class="headerlink" title="文章页的标题图标"></a>文章页的标题图标</h3><p>beautify: 给文章的每个标题前添加一个图标</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">beautify:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span> <span class="comment"># site/post   # site:整个网站应用还是只在文章页面</span></span><br><span class="line">  <span class="attr">title-prefix-icon:</span> <span class="string">&#x27;\f0c1&#x27;</span>    <span class="comment"># 图标</span></span><br><span class="line">  <span class="attr">title-prefix-icon-color:</span> <span class="string">&#x27;#F47466&#x27;</span>    <span class="comment"># 图标颜色</span></span><br></pre></td></tr></table></figure><h3 id="水平分割线图标设置"><a href="#水平分割线图标设置" class="headerlink" title="水平分割线图标设置"></a>水平分割线图标设置</h3><p>hr_icon: 定制分割线样式，使用Font Awesome icon，在<a href="https://fontawesome.com.cn/v5">fontawesome官网</a>找到图标，复制unicode，格式<code>&#39;\unicode&#39;</code>，例如<code>&#39;\3423&#39;</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hr_icon:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">&#x27;\3423&#x27;</span></span><br><span class="line">  <span class="attr">icon-top:</span></span><br></pre></td></tr></table></figure><h2 id="footer设置"><a href="#footer设置" class="headerlink" title="footer设置"></a>footer设置</h2><p>footer部分的配置，用于显示在所有页面的footer部分，配置项：</p><table><thead><tr><th>配置项</th><th>描述</th></tr></thead><tbody><tr><td>since</td><td>网站建立年份，会自动补充为<code>建立年份-现在年份</code>的形式</td></tr><tr><td>custom_text</td><td>可自定义显示的内容</td></tr><tr><td>copyright</td><td>是否附上版权声明</td></tr></tbody></table><p>对于部分人需要写 ICP 的，也可以写在 custom_text里<br>custom_text部分可自定义内容和样式，可以使用标签包裹的链接和图标，例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">Welcome</span> <span class="string">to</span> <span class="string">&lt;a</span> <span class="string">href=&quot;https://PeakofMountains.github.io/&quot;&gt;PeakofMountains</span> <span class="string">Blog&lt;/a&gt;!</span> <span class="string">Have</span> <span class="string">a</span> <span class="string">nice</span> <span class="string">day!</span> <span class="string">&lt;p&gt;&lt;a</span> <span class="string">target=&quot;_blank&quot;</span> <span class="string">href=&quot;https://hexo.io/&quot;&gt;&lt;img</span> <span class="string">src=&quot;https://img.shields.io/badge/Frame-Hexo-blue?style=flat&amp;logo=hexo&quot;</span> <span class="string">title=&quot;博客以Hexo为框架&quot;&gt;&lt;/a&gt;&amp;nbsp;&lt;a</span> <span class="string">target=&quot;_blank&quot;</span> <span class="string">href=&quot;https://butterfly.js.org/&quot;&gt;&lt;img</span> <span class="string">src=&quot;https://img.shields.io/badge/Theme-Butterfly-6513df?style=flat&amp;logo=bitdefender&quot;</span> <span class="string">title=&quot;采用butterfly主题&quot;&gt;&lt;/a&gt;&amp;nbsp;</span>  <span class="string">&lt;a</span> <span class="string">target=&quot;_blank&quot;</span> <span class="string">href=&quot;https://www.jsdelivr.com/&quot;&gt;&lt;img</span> <span class="string">src=&quot;https://img.shields.io/badge/CDN-jsDelivr-orange?style=flat&amp;logo=jsDelivr&quot;</span> <span class="string">title=&quot;使用JsDelivr为静态资源进行CDN加速&quot;&gt;&lt;/a&gt;</span> <span class="string">&amp;nbsp;&lt;a</span> <span class="string">target=&quot;_blank&quot;</span> <span class="string">href=&quot;https://github.com/&quot;&gt;&lt;img</span> <span class="string">src=&quot;https://img.shields.io/badge/Source-Github-d021d6?style=flat&amp;logo=GitHub&quot;</span> <span class="string">title=&quot;本站项目由Gtihub托管&quot;&gt;&lt;/a&gt;&amp;nbsp;&lt;a</span> <span class="string">target=&quot;_blank&quot;</span> <span class="string">href=&quot;http://creativecommons.org/licenses/by-nc-sa/4.0/&quot;&gt;&lt;img</span> <span class="string">src=&quot;https://img.shields.io/badge/Copyright-BY--NC--SA%204.0-d42328?style=flat&amp;logo=Claris&quot;</span> <span class="string">title=&quot;本站采用知识共享署名-非商业性使用-相同方式共享4.0国际许可协议进行许可&quot;&gt;&lt;/a&gt;&lt;/p&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="https://www.fomal.cc/posts/3451f874.html">参考Fomalhaut大佬博客的custom_text设置</a></p></blockquote><h2 id="侧边栏设置"><a href="#侧边栏设置" class="headerlink" title="侧边栏设置"></a>侧边栏设置</h2><p>aside侧边栏设置</p><h3 id="侧边排版和默认部件"><a href="#侧边排版和默认部件" class="headerlink" title="侧边排版和默认部件"></a>侧边排版和默认部件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aside:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>  <span class="comment"># 启用侧边栏</span></span><br><span class="line">  <span class="attr">hide:</span> <span class="literal">false</span>   <span class="comment"># 隐藏侧边栏</span></span><br><span class="line">  <span class="attr">button:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">true</span> <span class="comment"># 手机端启用侧边栏</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">right</span> <span class="comment"># left/right 侧边栏的位置</span></span><br><span class="line">  <span class="attr">display:</span>  <span class="comment"># 文章标签等的基本信息的显示</span></span><br><span class="line">    <span class="attr">archive:</span> <span class="literal">false</span>  <span class="comment"># 展示archive</span></span><br><span class="line">    <span class="attr">tag:</span> <span class="literal">false</span>  <span class="comment"># 展示tag</span></span><br><span class="line">    <span class="attr">category:</span> <span class="literal">false</span> <span class="comment"># 展示category</span></span><br><span class="line">  <span class="attr">card_author:</span>  <span class="comment"># 作者卡片部分</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">一个热爱计算机技术的小菜鸟</span></span><br><span class="line">    <span class="attr">button:</span></span><br><span class="line">      <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">fab</span> <span class="string">fa-github</span></span><br><span class="line">      <span class="attr">text:</span> <span class="string">去作者Github主页看看</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://github.com/PeakofMountains/</span></span><br><span class="line">  <span class="attr">card_announcement:</span> <span class="comment"># 公告</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">content:</span> <span class="string">喝杯水,看看窗外放松放松吧！</span></span><br><span class="line">  <span class="attr">card_recent_post:</span> <span class="comment"># 最近文章模块</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">3</span> <span class="comment"># 如果设置为0则展示所有最近文章</span></span><br><span class="line">    <span class="attr">sort:</span> <span class="string">updated</span> <span class="comment"># date/updated 最近文章的排序方式</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># 不建议修改</span></span><br><span class="line">  <span class="attr">card_categories:</span>  <span class="comment"># 显示总计的categories</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">8</span> <span class="comment"># 如果设置为0则展示所有最近文章</span></span><br><span class="line">    <span class="attr">expand:</span> <span class="string">none</span> <span class="comment"># none/true/false</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># 不建议修改</span></span><br><span class="line">  <span class="attr">card_tags:</span>    <span class="comment"># 显示总计的tags</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">12</span> <span class="comment"># 如果设置为0则展示所有最近文章</span></span><br><span class="line">    <span class="attr">color:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">orderby:</span> <span class="string">random</span> <span class="comment"># tags的顺序, random/name/length</span></span><br><span class="line">    <span class="attr">order:</span> <span class="number">1</span> <span class="comment"># Sort of order. 1, asc for ascending; -1, desc for descending</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">card_archives:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">monthly</span> <span class="comment"># yearly or monthly</span></span><br><span class="line">    <span class="attr">format:</span> <span class="string">MMMM</span> <span class="string">YYYY</span> <span class="comment"># 例子: YYYY年MM月</span></span><br><span class="line">    <span class="attr">order:</span> <span class="number">-1</span> <span class="comment"># Sort of order. 1, asc for ascending; -1, desc for descending</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">8</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">card_webinfo:</span> <span class="comment"># 网站统计信息栏</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">post_count:</span> <span class="literal">true</span>    <span class="comment"># 显示发布的文章数</span></span><br><span class="line">    <span class="attr">last_push_date:</span> <span class="literal">true</span>    <span class="comment"># 显示最近更新日期</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">card_post_series:</span> <span class="comment"># 系列文章卡片</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">series_title:</span> <span class="literal">false</span> <span class="comment"># 展示系列标题</span></span><br><span class="line">    <span class="attr">orderBy:</span> <span class="string">&#x27;date&#x27;</span> <span class="comment"># Order by title/date</span></span><br><span class="line">    <span class="attr">order:</span> <span class="number">-1</span> <span class="comment"># Sort of order. 1, asc for ascending; -1, desc for descending</span></span><br></pre></td></tr></table></figure><h3 id="网站访问人数"><a href="#网站访问人数" class="headerlink" title="网站访问人数"></a>网站访问人数</h3><p>busuanzi访问量、总访问量、阅读量的配置，更多介绍见<a href="https://busuanzi.ibruce.info/">官方网站</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">busuanzi:</span></span><br><span class="line">  <span class="attr">site_uv:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">site_pv:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">page_pv:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="网站运行时间"><a href="#网站运行时间" class="headerlink" title="网站运行时间"></a>网站运行时间</h3><p>runtimeshow网站运行时间，配置项 <code>publish_date</code>的格式：<br><code>Month/Day/Year Time</code> 或者 <code>Year/Month/Day Time</code>，使用例子：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">publish_date:</span> <span class="number">2024</span><span class="string">/5/15</span> <span class="number">00</span><span class="string">:00:00</span></span><br></pre></td></tr></table></figure><h3 id="最新评论"><a href="#最新评论" class="headerlink" title="最新评论"></a>最新评论</h3><p>newest_comments侧边栏最新评论板块</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">newest_comments:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">6</span> <span class="comment"># 在侧边栏显示的评论数量</span></span><br><span class="line">  <span class="attr">storage:</span> <span class="number">30</span> <span class="comment"># unit: mins, save data to localStorage 评论缓存时间，每隔 x min才将评论内容更新</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="literal">true</span> <span class="comment"># 是否显示评论人的头像</span></span><br></pre></td></tr></table></figure><div class="note info flat"><p>最新评论只会在刷新时才会去读取，并不会实时变化<br>由于 API 有 访问次数限制，为了避免调用太多，主题默认存取期限为 10 分钟，调用后资料会存在 localStorage 里，10分钟内刷新网站只会去 localStorage 读取资料，10 分钟期限一过，刷新页面时才会去调取 API 读取新的数据<br>3.6.0 新增了 storage 配置，可自行配置缓存时间</p></div><h3 id="自定义添加侧边板块"><a href="#自定义添加侧边板块" class="headerlink" title="自定义添加侧边板块"></a>自定义添加侧边板块</h3><p>参考<a href="https://butterfly.js.org/posts/ea33ab97/">官方教程</a></p><h2 id="页面右下角按钮"><a href="#页面右下角按钮" class="headerlink" title="页面右下角按钮"></a>页面右下角按钮</h2><h3 id="繁简转换"><a href="#繁简转换" class="headerlink" title="繁简转换"></a>繁简转换</h3><p>translate繁简转换按钮</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">translate:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># The text of a button</span></span><br><span class="line">  <span class="attr">default:</span> <span class="string">繁</span></span><br><span class="line">  <span class="comment"># 网站语言,1:繁体;2:简体</span></span><br><span class="line">  <span class="attr">defaultEncoding:</span> <span class="number">2</span></span><br><span class="line">  <span class="comment"># Time delay</span></span><br><span class="line">  <span class="attr">translateDelay:</span> <span class="number">0</span></span><br><span class="line">  <span class="comment"># 简体中文时按钮显示的文字</span></span><br><span class="line">  <span class="attr">msgToTraditionalChinese:</span> <span class="string">&#x27;繁&#x27;</span></span><br><span class="line">  <span class="comment"># 繁体中文时按钮显示的文字</span></span><br><span class="line">  <span class="attr">msgToSimplifiedChinese:</span> <span class="string">&#x27;简&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="阅读模式"><a href="#阅读模式" class="headerlink" title="阅读模式"></a>阅读模式</h3><p>readmode阅读模式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">readmode:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><div class="note info flat"><p>readmode只在文章页起作用</p></div><h3 id="夜间模式"><a href="#夜间模式" class="headerlink" title="夜间模式"></a>夜间模式</h3><p>夜间模式darkmode</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">darkmode:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 夜间白天模式切换按钮</span></span><br><span class="line">  <span class="attr">button:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 自动切换 dark mode和 light mode</span></span><br><span class="line">  <span class="comment"># autoChangeMode: 1  # Following System Settings, if the system doesn&#x27;t support dark mode, it will switch dark mode between 6 pm to 6 am</span></span><br><span class="line">  <span class="attr">autoChangeMode:</span> <span class="number">2</span>  <span class="comment"># Switch dark mode between 6 pm to 6 am</span></span><br><span class="line">  <span class="comment"># autoChangeMode: false</span></span><br><span class="line">  <span class="comment"># autoChangeMode: false</span></span><br><span class="line">  <span class="comment"># 设置白天时间，可选值 0~24. 默认start: 6, end: 20</span></span><br><span class="line">  <span class="attr">start:</span> <span class="comment"># 8</span></span><br><span class="line">  <span class="attr">end:</span> <span class="comment"># 22</span></span><br></pre></td></tr></table></figure><p>autoChangeMode项设置夜间白天自动切换的方式，参数值含义：</p><table><thead><tr><th>参数值</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>跟随系统，系统不支持黑夜模式则在6 pm-6 am自动切换为黑夜模式</td></tr><tr><td>2</td><td>在6 pm-6 am自动切换为黑夜模式</td></tr><tr><td>false</td><td>不启用自动切换</td></tr></tbody></table><h3 id="滚动条百分比"><a href="#滚动条百分比" class="headerlink" title="滚动条百分比"></a>滚动条百分比</h3><p>rightside_scroll_percent右侧滚动条百分比</p><h2 id="配置404页面"><a href="#配置404页面" class="headerlink" title="配置404页面"></a>配置404页面</h2><p>butterfly主题内置了一个简单的404页面，在_config.butterfly.yml中启用，将enable项配置为<code>true</code>即可</p><div class="note info flat"><p><em>本地预览访问出错网站是不会跳转到404页面的，如果需要本地预览，通过<a><a href="http://localhost:4000/404.html">http://localhost:4000/404.html</a></a>来访问</em></p></div><h2 id="本地搜索系统"><a href="#本地搜索系统" class="headerlink" title="本地搜索系统"></a>本地搜索系统</h2><ol><li>local_search本地搜索系统需要先安装依赖，在博客根目录打开终端:<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure></li><li>在全局配置文件 <code>_config.yml</code> 中添加配置：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li>在主题配置文件 <code>_config.butterfly.yml</code>中启动local_search，<code>local_search: true</code></li></ol><h2 id="主题颜色配置"><a href="#主题颜色配置" class="headerlink" title="主题颜色配置"></a>主题颜色配置</h2><p>主题颜色配置theme_color</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme_color:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">main:</span> <span class="string">&quot;#49B1F5&quot;</span></span><br><span class="line">  <span class="attr">paginator:</span> <span class="string">&quot;#00c4b6&quot;</span></span><br><span class="line">  <span class="attr">button_hover:</span> <span class="string">&quot;#FF7242&quot;</span></span><br><span class="line">  <span class="attr">text_selection:</span> <span class="string">&quot;#00c4b6&quot;</span></span><br><span class="line">  <span class="attr">link_color:</span> <span class="string">&quot;#99a9bf&quot;</span></span><br><span class="line">  <span class="attr">meta_color:</span> <span class="string">&quot;#858585&quot;</span></span><br><span class="line">  <span class="attr">hr_color:</span> <span class="string">&quot;#A4D8FA&quot;</span></span><br><span class="line">  <span class="attr">code_foreground:</span> <span class="string">&quot;#F47466&quot;</span></span><br><span class="line">  <span class="attr">code_background:</span> <span class="string">&quot;rgba(27, 31, 35, .05)&quot;</span></span><br><span class="line">  <span class="attr">toc_color:</span> <span class="string">&quot;#00c4b6&quot;</span></span><br><span class="line">  <span class="attr">blockquote_padding_color:</span> <span class="string">&quot;#49b1f5&quot;</span></span><br><span class="line">  <span class="attr">blockquote_background_color:</span> <span class="string">&quot;#49b1f5&quot;</span></span><br><span class="line">  <span class="attr">scrollbar_color:</span> <span class="string">&quot;#49b1f5&quot;</span></span><br><span class="line">  <span class="attr">meta_theme_color_light:</span> <span class="string">&quot;ffffff&quot;</span></span><br><span class="line">  <span class="attr">meta_theme_color_dark:</span> <span class="string">&quot;#0d0d0d&quot;</span></span><br></pre></td></tr></table></figure><h2 id="特效"><a href="#特效" class="headerlink" title="特效"></a>特效</h2><h3 id="评论区打字特效"><a href="#评论区打字特效" class="headerlink" title="评论区打字特效"></a>评论区打字特效</h3><p>评论区输入打字特效</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://github.com/disjukr/activate-power-mode</span></span><br><span class="line"><span class="attr">activate_power_mode:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">colorful:</span> <span class="literal">true</span> <span class="comment"># 冒光特效</span></span><br><span class="line">  <span class="attr">shake:</span> <span class="literal">true</span> <span class="comment">#  抖动特效</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="静止彩带背景特效"><a href="#静止彩带背景特效" class="headerlink" title="静止彩带背景特效"></a>静止彩带背景特效</h3><p>网页背景为静止彩带，点击后彩带切换</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># See: https://github.com/hustcc/ribbon.js</span></span><br><span class="line"><span class="attr">canvas_ribbon:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">size:</span> <span class="number">150</span></span><br><span class="line">  <span class="attr">alpha:</span> <span class="number">0.6</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span></span><br><span class="line">  <span class="attr">click_to_change:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="动态彩带特效"><a href="#动态彩带特效" class="headerlink" title="动态彩带特效"></a>动态彩带特效</h3><p>canvas_fluttering_ribbon:动态彩带背景，彩带会自动运动和变色</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># See: https://github.com/hustcc/ribbon.js</span></span><br><span class="line"><span class="attr">canvas_fluttering_ribbon:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="线条集束特效"><a href="#线条集束特效" class="headerlink" title="线条集束特效"></a>线条集束特效</h3><p>canvas_nest: 线条集束特效</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># canvas_nest</span></span><br><span class="line"><span class="comment"># https://github.com/hustcc/canvas-nest.js</span></span><br><span class="line"><span class="attr">canvas_nest:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&#x27;0,0,255&#x27;</span> <span class="comment"># 线条颜色</span></span><br><span class="line">  <span class="attr">opacity:</span> <span class="number">0.9</span> <span class="comment"># the opacity of line (0~1), default: 0.5. 透明度</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span> <span class="comment"># z-index property of the background, default: -1.</span></span><br><span class="line">  <span class="attr">count:</span> <span class="number">40</span> <span class="comment"># the number of lines, default: 99. 线条数</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>参数介绍：</p><table><thead><tr><th>参数</th><th>描述</th><th>可选值</th></tr></thead><tbody><tr><td>color</td><td>线条颜色</td><td>RGB values:(R,G,B)，例：<code>&#39;0,0,255&#39;</code>，默认 <code>&#39;0,0,0&#39;</code></td></tr><tr><td>opacity</td><td>线条透明度</td><td>0~9，默认0.5，例：0.9，数值0代表完全透明</td></tr><tr><td>zIndex</td><td>在背景上的层级</td><td>默认-1</td></tr><tr><td>count</td><td>特效线条的数量</td><td>默认99</td></tr></tbody></table><h3 id="鼠标点击特效"><a href="#鼠标点击特效" class="headerlink" title="鼠标点击特效"></a>鼠标点击特效</h3><h4 id="烟花特效"><a href="#烟花特效" class="headerlink" title="烟花特效"></a>烟花特效</h4><p>fireworks: 鼠标点击后在点击处出现烟花特效</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">fireworks:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">9999</span> <span class="comment"># -1 or 9999，设置9999是为了将特效显示在最高层，如此点击画面中任何部位都会展示特效</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span> <span class="comment"># 移动端是否启用</span></span><br></pre></td></tr></table></figure><h4 id="心形特效"><a href="#心形特效" class="headerlink" title="心形特效"></a>心形特效</h4><p>click_heart: 鼠标点击后在点击处出现心形图案特效</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">click_heart:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h4 id="文字特效"><a href="#文字特效" class="headerlink" title="文字特效"></a>文字特效</h4><p>鼠标点击后在点击处出现预设的文字特效</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">clickShowText:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">text:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">hello</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">对的</span></span><br><span class="line">  <span class="attr">fontSize:</span> <span class="string">16px</span>    <span class="comment"># 字体大小</span></span><br><span class="line">  <span class="attr">random:</span> <span class="literal">false</span> <span class="comment"># 是否随机设定的文本</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="网站默认显示模式"><a href="#网站默认显示模式" class="headerlink" title="网站默认显示模式"></a>网站默认显示模式</h2><p>Default display mode网站默认的主题显示模式，light或者dark，包括文章的背景色，主页的文章卡片背景色、侧边栏背景色等</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">display_mode:</span> <span class="string">dark</span>  <span class="comment"># light/dark,默认为light</span></span><br></pre></td></tr></table></figure><h3 id="主页打字特效"><a href="#主页打字特效" class="headerlink" title="主页打字特效"></a>主页打字特效</h3><p>subtitle主页打字特效</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 主页subtitle副标题</span></span><br><span class="line"><span class="attr">subtitle:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 打字特效</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># loop 循环打字 true/false</span></span><br><span class="line">  <span class="attr">loop:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Customize typed.js (配置typed.js)</span></span><br><span class="line">  <span class="comment"># https://github.com/mattboldt/typed.js/customization</span></span><br><span class="line">  <span class="attr">typed_option:</span></span><br><span class="line">  <span class="comment"># source 调用第三方服务</span></span><br><span class="line">  <span class="attr">source:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">sub:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">&quot;Have a good day!&quot;</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">&quot;Stay hungry, stay foolish.&quot;</span></span><br></pre></td></tr></table></figure><p>source配置项的参数介绍：</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>false</td><td>关闭调用</td></tr><tr><td>1</td><td>调用<a href="https://hitokoto.cn/">一言网</a>的一句话</td></tr><tr><td>2</td><td>调用<a href="https://yijuzhan.com/">一句网</a>的一句话</td></tr><tr><td>3</td><td>调用<a href="https://www.jinrishici.com/">今日诗词</a>的一句话</td></tr></tbody></table><div class="note info flat"><p><em>subtitle 会先显示 source , 再显示 sub 的內容</em><br><em>如果关闭打字特效，subtitle 只会显示 sub 的第一行文字</em></p></div><h2 id="字体设置"><a href="#字体设置" class="headerlink" title="字体设置"></a>字体设置</h2><h3 id="全局字体设置"><a href="#全局字体设置" class="headerlink" title="全局字体设置"></a>全局字体设置</h3><p>font: 全局字体设置，可配置全局字体的大小、字体样式、代码字体大小、代码字体样式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">font:</span></span><br><span class="line">  <span class="attr">global-font-size:</span> <span class="string">&#x27;16px&#x27;</span></span><br><span class="line">  <span class="attr">code-font-size:</span> <span class="string">&#x27;15px&#x27;</span></span><br><span class="line">  <span class="comment"># -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot; , &quot;Helvetica Neue&quot; , Lato, Roboto, &quot;PingFang SC&quot; , &quot;Microsoft JhengHei&quot; , &quot;Microsoft YaHei&quot; , sans-serif</span></span><br><span class="line">  <span class="comment"># Wenkai, consolas, -apple-system, &#x27;Quicksand&#x27;, &#x27;Nimbus Roman No9 L&#x27;, &#x27;PingFang SC&#x27;, &#x27;Hiragino Sans GB&#x27;, &#x27;Noto Serif SC&#x27;, &#x27;Microsoft Yahei&#x27;, &#x27;WenQuanYi Micro Hei&#x27;, &#x27;ST Heiti&#x27;, sans-serif;</span></span><br><span class="line">  <span class="attr">font-family:</span> <span class="string">var(--global-font),</span> <span class="string">Consolas_1,</span> <span class="string">-apple-system,</span> <span class="string">&#x27;Quicksand&#x27;</span><span class="string">,</span> <span class="string">&#x27;Microsoft Yahei&#x27;</span></span><br><span class="line">  <span class="comment"># consolas, ZhuZiAWan_light, &quot;Microsoft YaHei&quot;, Menlo, &quot;PingFang SC&quot;, &quot;Microsoft JhengHei&quot;, sans-serif</span></span><br><span class="line">  <span class="comment"># Consolas_1, ZhuZiAWan_light, &quot;Microsoft YaHei&quot;, Menlo, &quot;PingFang SC&quot;, &quot;Microsoft JhengHei&quot;, sans-serif</span></span><br><span class="line">  <span class="attr">code-font-family:</span> <span class="string">Consolas_1,</span> <span class="string">var(--global-font),</span> <span class="string">&quot;Microsoft YaHei&quot;</span></span><br></pre></td></tr></table></figure><h3 id="网站名字字体"><a href="#网站名字字体" class="headerlink" title="网站名字字体"></a>网站名字字体</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 左上角网站名字 主页居中网站名字</span></span><br><span class="line"><span class="attr">blog_title_font:</span></span><br><span class="line">  <span class="attr">font_link:</span></span><br><span class="line">  <span class="attr">font-family:</span> <span class="string">-apple-system</span></span><br></pre></td></tr></table></figure><h2 id="预加载动画"><a href="#预加载动画" class="headerlink" title="预加载动画"></a>预加载动画</h2><p>preloader: 预加载动画设置，进入网页有些图片类资源还没加载好，此项开启后会在此时播放预加载动画，知道资源全部加载完成</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">preloader:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># source</span></span><br><span class="line">  <span class="comment"># 1. fullpage-loading</span></span><br><span class="line">  <span class="comment"># 2. pace (progress bar)</span></span><br><span class="line">  <span class="attr">source:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># pace theme (see https://codebyzach.github.io/pace/)</span></span><br><span class="line">  <span class="attr">pace_css_url:</span></span><br></pre></td></tr></table></figure><h2 id="标签外挂"><a href="#标签外挂" class="headerlink" title="标签外挂"></a>标签外挂</h2><div class="note info flat"><p>标签外挂是Hexo独有的功能，并不是标准的Markdown格式。<br>以下的写法，只适用于Butterfly主题，用在其它主题上不会有效果，甚至可能会报错。使用前请留意</p></div><div class="note warning flat"><p>标签外挂虽然能为主题带来一些额外的功能和UI方面的强化，但是，标签外挂也有明显的限制，使用时请留意</p></div><p>标签外挂可用的地方很多，这里只介绍最常用的Note外挂标签的一种用法，更多详细内容请参考<a href="https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89">官网介绍</a></p><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><p>Note外挂标签的使用格式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">%</span> <span class="string">note</span> [<span class="string">class</span>] [<span class="literal">no</span><span class="string">-icon</span>] [<span class="string">style</span>] <span class="string">%</span>&#125;</span><br><span class="line"><span class="string">Any</span> <span class="string">content</span> <span class="string">(support</span> <span class="string">inline</span> <span class="string">tags</span> <span class="string">too.io).</span></span><br><span class="line">&#123;<span class="string">%</span> <span class="string">endnote</span> <span class="string">%</span>&#125;</span><br></pre></td></tr></table></figure><p>class,no-icon,style均是可选参数，可以忽略不填，参数介绍:</p><table><thead><tr><th>参数</th><th>描述</th><th>可选值</th></tr></thead><tbody><tr><td>class</td><td>标识,不同标识配色不同</td><td>default&#x2F;primary&#x2F;success&#x2F;info&#x2F;warning&#x2F;danger</td></tr><tr><td>no-icon</td><td>不显示icon</td><td>no-icon</td></tr><tr><td>style</td><td>风格,可覆盖note配置的style值</td><td>simple&#x2F;modern&#x2F;flat&#x2F;disabled</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 博客搭建系列教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Butterfly </tag>
            
            <tag> 博客美化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手把手搭建个人博客系列教程-六</title>
      <link href="/2024/05/20/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E5%85%AD/"/>
      <url>/2024/05/20/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E5%85%AD/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong><a href="#picgo%E5%9B%BE%E5%BA%8A">手把手搭建个人博客系列教程-六</a>:  本节主要介绍如何搭建PicGo图床，如何搭建Live2D,留言板,Valine评论区,一图流,页脚美化,首页磁吸分类,首页文章轮播图,首页文章双栏显示等板块</strong></p><blockquote><p><strong>参考文档:</strong></p><ul><li><a href="https://butterfly.js.org/posts/21cfbf15/">Butterfly主题的官方文档</a></li><li><a href="https://www.fomal.cc/posts/eec9786.html">Fomalhaut🥝大佬的博客</a></li></ul></blockquote><h2 id="环境与工具"><a href="#环境与工具" class="headerlink" title="环境与工具"></a>环境与工具</h2><ul><li>操作系统：Windows 10</li><li>VSCode编辑器</li><li>Github</li><li>VSCode的PicGo插件或PicGo客户端</li></ul><hr><h2 id="PicGo图床"><a href="#PicGo图床" class="headerlink" title="PicGo图床"></a>PicGo图床</h2><p>Github + VSCode的PicGo插件 实现图床.<br>每次写博客文章可能都有插入图片的需求，如果你不想通过外链的方式在博客中引用，你可以将要插入的图片放在source目录下，通过相对路径的方式来引用.<br>例如：在source目录下创建img文件夹，在其中放入要插入的图片 <code>1.jpg</code> ，在要使用的配置文件中通过相对路径 <code>/img/1.jpg</code> 来引用<br><em><strong>注意默认的绝对路径根目录是source目录</strong></em><br>但是插入的图片都保存在本地博客文件中会造成部署时项目文件庞大，维护不容易管理，加载耗时较长的问题，由此就需要引入图床这个工具了<br>图床是一种托管图片的方式，通过将本地图片上传至图床管理网站，通过外链访问原始图片地址，例如将本地的图片上传后，在项目代码中就可以用http形式的网络地址来插入图片<br>图床托管网站有多个，常用的有：七牛云、网易NOS、腾讯COS、Github等<br>本教程采用免费的Github为例介绍如何搭建和使用图床</p><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>在Github中创建图床仓库，<em><strong>注意仓库权限必须为 <code>public</code> ，图床仓库才能生效</strong></em></p><h3 id="设置token"><a href="#设置token" class="headerlink" title="设置token"></a>设置token</h3><ol><li>在个人设置中选择 <code>Settings</code> -&gt; <code>Developer settings</code> -&gt; <code>Personal access tokens</code> -&gt; <code>Generate new token</code></li><li>Expiration选项为token的有效期，设置为 <code>no expiration</code> 无期限</li><li>勾选 <code>repo</code> 选项</li><li>创建token，创建成功后将生成的token复制并保存在本地</li></ol><div class="note info flat"><p><em><strong>注意token最好在本地备份，并注意起名字区分，因为页面刷新后此token内容会被隐藏，以后使用时不能再在GitHub上查看</strong></em></p></div><h3 id="VSCode中配置PicGo"><a href="#VSCode中配置PicGo" class="headerlink" title="VSCode中配置PicGo"></a>VSCode中配置PicGo</h3><ol><li>VSCode安装插件PicGo</li><li><code>PicGo插件</code> -&gt; <code>设置</code> -&gt; <code>Extension Settings</code>，在配置项中找到以下配置项并配置：<table><thead><tr><th>配置项</th><th>值</th></tr></thead><tbody><tr><td>Current</td><td><code>github</code></td></tr><tr><td>Branch</td><td><code>main</code></td></tr><tr><td>Custom Url</td><td><code>https://cdn.jsdelivr.net/gh/github的账户名/图床仓库名</code></td></tr><tr><td>Path</td><td>图床仓库里图片存储的文件夹名称，例如: <code>img/</code></td></tr><tr><td>Repo</td><td><code>github用户名/图床仓库名</code></td></tr><tr><td>Token</td><td><code>之前保存的token</code></td></tr></tbody></table></li></ol><p>其中 <code>https://cdn.jsdelivr.net/gh/</code> 部分就是采用jsdelivr工具对访问github进行CDN加速的格式，设置后就启动了cdn加速<br>使用PicGo客户端的配置和PicGo插件配置基本相同</p><h3 id="使用PicGo插件"><a href="#使用PicGo插件" class="headerlink" title="使用PicGo插件"></a>使用PicGo插件</h3><p>配置好PicGo插件后，在VSCode中编辑文件时，将要插入的图片复制，然后用快捷键 <code>Ctrl+Alt+U</code> 就能将剪切板中的图片上传到Github图床仓库中去，PicGo插件会自动将引用的cdn加速外链放在剪切板，直接粘贴在文章中使用</p><div class="note info flat"><p>使用VSCode的PicGo插件和使用PicGo客户端差别就是PicGo客户端可以查看图片，这两个都不能实现图片的管理，在本地修改删除后远端仓库中的图片并不会相对应的修改和删除<br>当你在使用PicGo时如果要更改已经上传的图片，需要在Github端和PicGo端都进行删除更改操作(如果使用的是PicGo软件就在PicGo软件清理，用的VSCode就重启VSCode),同时清理使用的浏览器的缓存数据，这样才能保证旧链接失效，新链接启用</p></div><h2 id="Live2D"><a href="#Live2D" class="headerlink" title="Live2D"></a>Live2D</h2><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><ol><li><p>安装Live2D必要插件</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure></li><li><p>安装看板娘模块<br> <code>live2d-widget-model-wanko</code>是默认的一款看板娘，使用时需要先安装此模块</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save live2d-widget-model-wanko</span><br></pre></td></tr></table></figure></li></ol><h3 id="设置全局配置文件"><a href="#设置全局配置文件" class="headerlink" title="设置全局配置文件"></a>设置全局配置文件</h3><p>修改全局配置文件 <code>_config.yml</code>，如果第一次用live2d就直接在<code>_config.yml</code>文件结尾加上此配置内容</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Live2D</span></span><br><span class="line"><span class="comment">## https://github.com/EYHN/hexo-helper-live2d</span></span><br><span class="line"><span class="attr">live2d:</span></span><br><span class="line"><span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 开关插件版看板娘</span></span><br><span class="line"><span class="attr">scriptFrom:</span> <span class="string">local</span> <span class="comment"># 默认</span></span><br><span class="line"><span class="attr">pluginRootPath:</span> <span class="string">live2dw/</span> <span class="comment"># 插件在站点上的根目录(相对路径)</span></span><br><span class="line"><span class="attr">pluginJsPath:</span> <span class="string">lib/</span> <span class="comment"># 脚本文件相对与插件根目录路径</span></span><br><span class="line"><span class="attr">pluginModelPath:</span> <span class="string">assets/</span> <span class="comment"># 模型文件相对与插件根目录路径</span></span><br><span class="line"><span class="comment"># scriptFrom: jsdelivr # jsdelivr CDN</span></span><br><span class="line"><span class="comment"># scriptFrom: unpkg # unpkg CDN</span></span><br><span class="line"><span class="comment"># scriptFrom: https://npm.elemecdn.com/live2d-widget@3.x/lib/L2Dwidget.min.js # 你的自定义 url</span></span><br><span class="line"><span class="attr">tagMode:</span> <span class="literal">false</span> <span class="comment"># 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中</span></span><br><span class="line"><span class="attr">debug:</span> <span class="literal">false</span> <span class="comment"># 调试, 是否在控制台输出日志</span></span><br><span class="line"><span class="attr">model:</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-wanko</span> <span class="comment"># npm-module package name</span></span><br><span class="line">    <span class="comment"># use: wanko # 博客根目录/live2d_models/ 下的目录名</span></span><br><span class="line">    <span class="comment"># use: ./wives/wanko # 相对于博客根目录的路径</span></span><br><span class="line">    <span class="comment"># use: https://npm.elemecdn.com/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 你的自定义 url</span></span><br><span class="line"><span class="attr">display:</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">left</span> <span class="comment">#控制看板娘位置</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">150</span> <span class="comment">#控制看板娘大小</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">300</span> <span class="comment">#控制看板娘大小</span></span><br><span class="line"><span class="attr">mobile:</span></span><br><span class="line">    <span class="attr">show:</span> <span class="literal">true</span> <span class="comment"># 手机中是否展示</span></span><br></pre></td></tr></table></figure><div class="note info flat"><p>这些配置里只需要关注 <code>use</code> 项配置为使用的插件看板娘名称，<code>display</code> 部分负责看板娘显示的位置，看板娘名称可以在<a href="https://github.com/xiazeyu/live2d-widget-models">作者Github</a>查看<br><em>在查看效果前记得使用 <code>hexo clean</code> 清理缓存</em></p></div><h3 id="更换看板娘模块"><a href="#更换看板娘模块" class="headerlink" title="更换看板娘模块"></a>更换看板娘模块</h3><p>想要使用别的看板娘，还是通过npm来下载看板娘模块，例如要使用的看板娘模块名字为 <code>live2d-widget-model-koharu</code>，则先在博客根目录使用命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save live2d-widget-model-koharu</span><br></pre></td></tr></table></figure><p>然后修改 <code>_config.yml</code> 中live2d部分的use配置项为新的模型名字，例:  <code>use: live2d-widget-model-koharu</code></p><h3 id="卸载看板娘模块和看板娘插件"><a href="#卸载看板娘模块和看板娘插件" class="headerlink" title="卸载看板娘模块和看板娘插件"></a>卸载看板娘模块和看板娘插件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载看板娘插件</span></span><br><span class="line">npm uninstall hexo-helper-live2d</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载看板娘模型, 记得替换modelname为看板娘模块名称</span></span><br><span class="line">npm uninstall live2d-widget-model-modelname</span><br></pre></td></tr></table></figure><p><em><strong>卸载后记得将 <code>_config.yml</code> 中的live2d部分注释掉或者删除</strong></em></p><h2 id="Valine评论区"><a href="#Valine评论区" class="headerlink" title="Valine评论区"></a>Valine评论区</h2><p>valine操作简单，可自行配置页面美化，虽简单但功能比较强大，而且快速安全，不要后端</p><div class="note info flat"><p><em>hexo本身支持valine，不用另外使用npm安装valine模块</em></p></div><h3 id="配置主题配置文件"><a href="#配置主题配置文件" class="headerlink" title="配置主题配置文件"></a>配置主题配置文件</h3><p>配置 <code>_config.butterfly.yml</code> 文件中comments部分</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">comments:</span></span><br><span class="line">  <span class="comment"># Choose: Disqus/Disqusjs/Livere/Gitalk/Valine/Waline/Utterances/Facebook Comments/Twikoo/Giscus/Remark42/Artalk</span></span><br><span class="line">  <span class="attr">use:</span> <span class="string">Valine</span> <span class="comment"># ,Disqus # 可实现但评论和双评论，配置两个的话默认用前一个</span></span><br><span class="line">  <span class="attr">text:</span> <span class="literal">true</span> <span class="comment"># 是否显示评论提供商名字</span></span><br><span class="line">  <span class="attr">lazyload:</span> <span class="literal">true</span> <span class="comment"># 是否为评论开启lazyload，开启后，只有滚动到评论位置时才会加载评论所需要的资源（开启lazyload后，评论数将失效）</span></span><br><span class="line">  <span class="attr">count:</span> <span class="literal">true</span> <span class="comment"># 在文章页top_img展示评论数，livere、Giscus 和 utterances 不支持评论数显示</span></span><br><span class="line">  <span class="attr">card_post_count:</span> <span class="literal">false</span> <span class="comment"># 在主页展示评论数</span></span><br></pre></td></tr></table></figure><h3 id="创建Valine应用"><a href="#创建Valine应用" class="headerlink" title="创建Valine应用"></a>创建Valine应用</h3><p>更多有关Valine的介绍请访问<a href="https://valine.js.org/">Valine官网</a></p><ol><li>在<a href="https://www.leancloud.cn/">Valine官网</a>注册个账号，选择中国大陆或者国际版<div class="note info flat"><p>我测试时两种版本都试用过，国际版在评论时通过浏览器控制台看到 <code>403 forbidden error</code> ，说明comment请求正常发出，但被服务端拒绝了，我尝试过 <code>设置服务器地址</code>、<code>添加web安全域名</code> 等解决办法均不行，以后有时间再探究，大陆版本没问题</p></div></li><li>创建Valine应用，在<a href="https://console.leancloud.app/apps">应用页面</a>，创建一个应用，选择开发版就行，需求量大的可以选择商用版(收费)</li><li>点击 <code>对应应用</code> -&gt; <code>设置</code> -&gt; <code>应用凭证</code> ，复制 <code>AppID</code> 和 <code>AppKey</code> 和 <code>服务器地址</code> ，在主题配置文件 <code>_config.butterfly.yml</code> 中添加Valine的配置 <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># valine</span></span><br><span class="line"><span class="comment"># https://valine.js.org</span></span><br><span class="line"><span class="attr">valine:</span></span><br><span class="line"><span class="attr">appId:</span> <span class="string">Your</span> <span class="string">AppId</span></span><br><span class="line"><span class="attr">appKey:</span> <span class="string">Your</span> <span class="string">AppKey</span></span><br><span class="line"><span class="comment"># 查询下面的网站，选择评论的适合出现的图像 https://valine.js.org/#/avatar</span></span><br><span class="line"><span class="attr">avatar:</span> <span class="string">monsterid</span> <span class="comment"># gravatar style</span></span><br><span class="line"><span class="comment"># 你的对应的服务器的地址，就在appid那一页的下面</span></span><br><span class="line"><span class="attr">serverURLs:</span> <span class="string">Your</span> <span class="string">server</span> <span class="string">URL</span> <span class="comment"># 这项配置适合国内自定义域名用户，海外版本会自动检测(无需手动填写)</span></span><br><span class="line"><span class="comment"># 评论系统的背景</span></span><br><span class="line"><span class="attr">bg:</span> <span class="comment"># valine background</span></span><br><span class="line"><span class="comment"># 是否允许游客评论</span></span><br><span class="line"><span class="attr">visitor:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># 评论区显示的文字</span></span><br><span class="line"><span class="attr">placeholder:</span> <span class="string">留下你的想法.</span> <span class="string">(</span> <span class="string">•̀</span> <span class="string">ω</span> <span class="string">•́</span> <span class="string">)✧</span></span><br><span class="line"><span class="comment"># 每一页最大的评论数量</span></span><br><span class="line"><span class="attr">pageSize:</span> <span class="number">15</span></span><br><span class="line"><span class="attr">option:</span></span><br></pre></td></tr></table></figure></li><li>在Valine的设置里 <code>安全中心</code> -&gt; <code>web安全域名</code> 处将自己博客网站的地址加进去，为方便调试localhost是默认不被阻拦的</li></ol><h3 id="测试评论功能"><a href="#测试评论功能" class="headerlink" title="测试评论功能"></a>测试评论功能</h3><ol><li>打开博客的评论区，按键盘 <code>F12</code> 打开浏览器控制台，切换到 <code>Network</code> 栏监控数据流，刷新页面</li><li>输入昵称和邮箱后书写内容点击提交</li><li>查看Name为 <code>Comment</code> 的请求是否发生错误，发生错误字体会报红，右上角出现错误数量，没有的话说明正常，看评论界面出现刚提交的消息说明功能正常</li></ol><div class="note info flat"><p>注意在浏览器控制台中，如果是第一次提交评论，会发现有两个以 <code>Comment?where=</code> 开头的请求报出 <code>404 not found</code> 的错误，这是正常的，因为第一次评论时评论区服务器端还是没有数据返回给客户端，在提交过评论后这两个请求就会正常</p></div><h2 id="violet留言板"><a href="#violet留言板" class="headerlink" title="violet留言板"></a>violet留言板</h2><p><em><strong>注意violet留言板要和评论功能搭配使用，单独留言板是不能进行留言的，violet留言板就相当于建立了一个可以留言的页面，留言还是要靠评论模块</strong></em></p><h3 id="安装留言板插件"><a href="#安装留言板插件" class="headerlink" title="安装留言板插件"></a>安装留言板插件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-butterfly-envelope --save</span><br></pre></td></tr></table></figure><h3 id="设置全局配置文件-1"><a href="#设置全局配置文件-1" class="headerlink" title="设置全局配置文件"></a>设置全局配置文件</h3><p>在全局配置文件 <code>_config.yml</code> 或者主题配置文件 <code>_config.butterfly.yml</code> 中添加留言板模块的相关配置信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># envelope_comment</span></span><br><span class="line"><span class="comment"># see https://akilar.top/posts/e2d3c450/</span></span><br><span class="line"><span class="attr">envelope_comment:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment">#控制开关</span></span><br><span class="line">  <span class="attr">custom_pic:</span>      </span><br><span class="line">    <span class="attr">cover:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-envelope/lib/violet.jpg</span> <span class="comment">#信笺头部图片</span></span><br><span class="line">    <span class="attr">line:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-envelope/lib/line.png</span> <span class="comment">#信笺底部图片</span></span><br><span class="line">    <span class="attr">beforeimg:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-envelope/lib/before.png</span> <span class="comment"># 信封前半部分</span></span><br><span class="line">    <span class="attr">afterimg:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-envelope/lib/after.png</span> <span class="comment"># 信封后半部分</span></span><br><span class="line">  <span class="attr">message:</span> <span class="comment">#信笺正文，多行文本，写法如下</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">有什么想问的？</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">有什么想说的？</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">有什么想吐槽的？</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">哪怕是有什么想吃的，都可以告诉我哦~</span></span><br><span class="line">  <span class="attr">bottom:</span> <span class="string">自动书记人偶竭诚为您服务！</span> <span class="comment">#仅支持单行文本</span></span><br><span class="line">  <span class="attr">height:</span> <span class="comment">#1050px，信封划出的高度</span></span><br><span class="line">  <span class="attr">path:</span> <span class="comment">#【可选】comments 的路径名称。默认为 comments，生成的页面为 comments/index.html</span></span><br><span class="line">  <span class="attr">front_matter:</span> <span class="comment">#【可选】comments页面的 front_matter 配置</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">留言板</span></span><br><span class="line">    <span class="attr">comments:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="一图流"><a href="#一图流" class="headerlink" title="一图流"></a>一图流</h2><p>一图流实现了博客的整个背景呈现出来是一张完整的图片，hexo默认是将页面分为top_img、background、footer三个部分，三个部分需要各自配置，如此三个部分的图片就是分离的<br>之前搭建博客的过程中为了美观，我将主页的top_img、footer同background设置为同一个图片，而别的页面直接禁用top_img，实现了一个 伪一图流(🤣)<br>这部分介绍如何通过css文件添加样式将顶部图和页脚设置透明，达到一图流的效果</p><h3 id="创建css样式"><a href="#创建css样式" class="headerlink" title="创建css样式"></a>创建css样式</h3><p>创建 <code>custom.css</code> 样式文件在 <code>source/css/</code> 路径下，在其中书写透明化顶部图和页脚的css样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 页脚与头图透明 */</span></span><br><span class="line"><span class="selector-id">#footer</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#page-header</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 白天模式遮罩透明 */</span></span><br><span class="line"><span class="selector-id">#footer</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#page-header</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 夜间模式遮罩透明 */</span></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-id">#footer</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-id">#page-header</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注入css样式"><a href="#注入css样式" class="headerlink" title="注入css样式"></a>注入css样式</h3><p>修改主题配置文件 <code>_config.butterfly.yml</code> ，在配置项 <code>inject</code> 处配置head项，注入custom.css: </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/custom.css&quot;</span> <span class="string">media=&quot;defer&quot;</span> <span class="string">onload=&quot;this.media=&#x27;all&#x27;&quot;&gt;</span></span><br></pre></td></tr></table></figure><h3 id="取消加载项"><a href="#取消加载项" class="headerlink" title="取消加载项"></a>取消加载项</h3><p>因为上面配置后将顶部和底部图片都进行了透明化设置，因此修改主题配置文件 <code>_config.butterfly.yml</code> 中的 <code>index_img</code> 和 <code>footer_bg</code> 配置项取消顶部图与页脚图的加载项避免冗余加载</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The banner image of home page</span></span><br><span class="line"><span class="attr">index_img:</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># Footer Background</span></span><br><span class="line"><span class="attr">footer_bg:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="页脚美化"><a href="#页脚美化" class="headerlink" title="页脚美化"></a>页脚美化</h2><h3 id="安装页脚美化插件"><a href="#安装页脚美化插件" class="headerlink" title="安装页脚美化插件"></a>安装页脚美化插件</h3><p>在终端安装页脚美化插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-butterfly-footer-beautify --save</span><br></pre></td></tr></table></figure><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>在全局配置文件 <code>_config.yml</code> 或主题配置文件 <code>_config.butterfly.yml</code> 中添加以下配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># footer_beautify</span></span><br><span class="line"><span class="comment"># 页脚计时器：[Native JS Timer](https://akilar.top/posts/b941af/)</span></span><br><span class="line"><span class="comment"># 页脚徽标：[Add Github Badge](https://akilar.top/posts/e87ad7f8/)</span></span><br><span class="line"><span class="attr">footer_beautify:</span></span><br><span class="line">  <span class="attr">enable:</span></span><br><span class="line">    <span class="attr">timer:</span> <span class="literal">true</span> <span class="comment"># 计时器开关</span></span><br><span class="line">    <span class="attr">bdage:</span> <span class="literal">true</span> <span class="comment"># 徽标开关</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">5</span> <span class="comment"># 过滤器优先权</span></span><br><span class="line">  <span class="attr">enable_page:</span> <span class="string">all</span> <span class="comment"># 应用页面</span></span><br><span class="line">  <span class="attr">exclude:</span> <span class="comment"># 屏蔽页面</span></span><br><span class="line">    <span class="comment"># - /posts/</span></span><br><span class="line">    <span class="comment"># - /about/</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="comment"># 挂载容器类型</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">id</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">footer-wrap</span></span><br><span class="line">    <span class="attr">index:</span> <span class="number">0</span></span><br><span class="line">  <span class="comment"># 这是店长的，要用的话最好下载下来放到自己的项目中不然会增加别人网站的负载，想要定制自己样式的，可以将店长的模板下载下来，在此基础上修改</span></span><br><span class="line">  <span class="attr">runtime_js:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-footer-beautify@1.0.0/lib/runtime.js</span></span><br><span class="line">  <span class="attr">runtime_css:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-footer-beautify@1.0.0/lib/runtime.css</span></span><br><span class="line">  <span class="comment"># 徽标部分配置项</span></span><br><span class="line">  <span class="attr">swiperpara:</span> <span class="number">0</span> <span class="comment"># 若非0，则开启轮播功能，每行徽标个数</span></span><br><span class="line">  <span class="attr">bdageitem:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">link:</span> <span class="string">https://hexo.io/</span> <span class="comment"># 徽标指向网站链接</span></span><br><span class="line">      <span class="attr">shields:</span> <span class="string">https://img.shields.io/badge/Frame-Hexo-blue?style=flat&amp;logo=hexo</span> <span class="comment"># 徽标API</span></span><br><span class="line">      <span class="attr">message:</span> <span class="string">博客框架为Hexo_v7.2.0</span> <span class="comment"># 徽标提示语</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">link:</span> <span class="string">https://butterfly.js.org/</span></span><br><span class="line">      <span class="attr">shields:</span> <span class="string">https://img.shields.io/badge/Theme-Butterfly-6513df?style=flat&amp;logo=bitdefender</span></span><br><span class="line">      <span class="attr">message:</span> <span class="string">主题版本为Butterfly_v4.13.0</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">link:</span> <span class="string">https://www.jsdelivr.com/</span></span><br><span class="line">      <span class="attr">shields:</span> <span class="string">https://img.shields.io/badge/CDN-jsDelivr-orange?style=flat&amp;logo=jsDelivr</span></span><br><span class="line">      <span class="attr">message:</span> <span class="string">使用JsDelivr为静态资源CDN加速</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">link:</span> <span class="string">https://github.com/</span></span><br><span class="line">      <span class="attr">shields:</span> <span class="string">https://img.shields.io/badge/Source-Github-d021d6?style=flat&amp;logo=GitHub</span></span><br><span class="line">      <span class="attr">message:</span> <span class="string">本站项目由Github托管</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">link:</span> <span class="string">http://creativecommons.org/licenses/by-nc-sa/4.0/</span></span><br><span class="line">      <span class="attr">shields:</span> <span class="string">https://img.shields.io/badge/Copyright-BY--NC--SA%204.0-d42328?style=flat&amp;logo=Claris</span></span><br><span class="line">      <span class="attr">message:</span> <span class="string">本站采用知识共享署名-非商业性使用-相同方式共享4.0国际许可协议进行许可</span></span><br><span class="line">  <span class="attr">swiper_css:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-swiper/lib/swiper.min.css</span></span><br><span class="line">  <span class="attr">swiper_js:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-swiper/lib/swiper.min.js</span></span><br><span class="line">  <span class="attr">swiperbdage_init_js:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-footer-beautify/lib/swiperbdage_init.min.js</span></span><br></pre></td></tr></table></figure><p><code>runtime.css</code> 是计时模块的样式配置文件，<code>runtime.js</code> 是计时模块的脚本文件</p><h2 id="首页磁吸分类"><a href="#首页磁吸分类" class="headerlink" title="首页磁吸分类"></a>首页磁吸分类</h2><h3 id="安装插件-1"><a href="#安装插件-1" class="headerlink" title="安装插件"></a>安装插件</h3><p>在终端通过npm安装插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-butterfly-categories-card --save</span><br></pre></td></tr></table></figure><h3 id="修改配置文件-1"><a href="#修改配置文件-1" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>在全局配置文件 <code>_config.yml</code> 或者主题配置文件 <code>_config.butterfly.yml</code> 中添加以下代码，并根据描述排序改为你自己对应的分类名字：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo-butterfly-categories-card</span></span><br><span class="line"><span class="comment"># see https://akilar.top/posts/a9131002/</span></span><br><span class="line"><span class="attr">categoryBar:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 开关</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">5</span> <span class="comment"># 过滤器优先权</span></span><br><span class="line">  <span class="attr">enable_page:</span> <span class="string">/</span> <span class="comment"># 应用页面</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="comment"># 挂载容器类型</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">id</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">recent-posts</span></span><br><span class="line">    <span class="attr">index:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">column:</span> <span class="string">odd</span> <span class="comment"># odd：3列 | even：4列</span></span><br><span class="line">  <span class="attr">row:</span> <span class="number">1</span> <span class="comment"># 显示行数，默认两行，超过行数切换为滚动显示</span></span><br><span class="line">  <span class="attr">message:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">descr:</span> <span class="string">Markdown</span> <span class="string">教程</span>  </span><br><span class="line">      <span class="attr">cover:</span> <span class="comment"># /img/202405131356060.jpg</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">descr:</span> <span class="string">手把手搭建个人博客系列教程</span></span><br><span class="line">      <span class="attr">cover:</span> <span class="comment"># /img/202405131356056.jpg</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">descr:</span> <span class="string">磁盘瘦身教程</span></span><br><span class="line">      <span class="attr">cover:</span> <span class="comment"># /img/202405131356053.jpg</span></span><br><span class="line">  <span class="comment"># custom_css可下载到本地放在css文件夹中采用相对地址的方式引入</span></span><br><span class="line">  <span class="attr">custom_css:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-categories-card@1.0.0/lib/categorybar.css</span></span><br></pre></td></tr></table></figure><div class="note info flat"><ul><li><em>注意在本地测试时即使使用 <code>--draft</code> 后缀草稿文章也不会包含在主页磁吸分类统计里</em></li><li><code>custom_css</code> 配置项所示的链接css文件可下载到本地放在css文件夹中采用相对地址的方式引入，在其中可以魔改自己的样式</li></ul></div><h2 id="首页文章轮播图"><a href="#首页文章轮播图" class="headerlink" title="首页文章轮播图"></a>首页文章轮播图</h2><h3 id="安装插件-2"><a href="#安装插件-2" class="headerlink" title="安装插件"></a>安装插件</h3><p>在终端使用npm安装插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-butterfly-swiper --save</span><br></pre></td></tr></table></figure><h3 id="修改配置文件-2"><a href="#修改配置文件-2" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>在全局配置文件 <code>_config.yml</code> 或主题配置文件 <code>_config.butterfly.yml</code> 中添加以下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo-butterfly-swiper</span></span><br><span class="line"><span class="comment"># see https://akilar.top/posts/8e1264d1/</span></span><br><span class="line"><span class="attr">swiper:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 开关</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">5</span> <span class="comment">#过滤器优先权</span></span><br><span class="line">  <span class="attr">enable_page:</span> <span class="string">all</span> <span class="comment"># 应用页面</span></span><br><span class="line">  <span class="attr">timemode:</span> <span class="string">date</span> <span class="comment">#date/updated</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="comment"># 挂载容器类型</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">id</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">recent-posts</span></span><br><span class="line">    <span class="attr">index:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">default_descr:</span> <span class="string">再怎么看我也不知道怎么描述它的啦！</span></span><br><span class="line">  <span class="attr">swiper_css:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-swiper/lib/swiper.min.css</span> <span class="comment">#swiper css依赖</span></span><br><span class="line">  <span class="attr">swiper_js:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-swiper/lib/swiper.min.js</span> <span class="comment">#swiper js依赖</span></span><br><span class="line">  <span class="attr">custom_css:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-swiper/lib/swiperstyle.css</span> <span class="comment"># 适配主题样式补丁</span></span><br><span class="line">  <span class="attr">custom_js:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-swiper/lib/swiper_init.js</span> <span class="comment"># swiper初始化方法</span></span><br></pre></td></tr></table></figure><p>同样可以将css和js文件下载下来放在本地css文件夹和js文件夹中魔改自己的样式</p><h3 id="设置轮播顺序"><a href="#设置轮播顺序" class="headerlink" title="设置轮播顺序"></a>设置轮播顺序</h3><p>在文章front-matter部分添加优先级设置，值越大显示越靠前</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">swiper_index:</span> <span class="number">1</span> <span class="comment">#置顶轮播图顺序，非负整数，数字越大越靠前</span></span><br></pre></td></tr></table></figure><h2 id="首页文章双栏显示"><a href="#首页文章双栏显示" class="headerlink" title="首页文章双栏显示"></a>首页文章双栏显示</h2><h3 id="安装插件-3"><a href="#安装插件-3" class="headerlink" title="安装插件"></a>安装插件</h3><p>在终端使用npm工具安装插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-butterfly-article-double-row --save</span><br></pre></td></tr></table></figure><h3 id="修改配置文件-3"><a href="#修改配置文件-3" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><ol><li>在全局配置文件 <code>_config.yml</code> 中增加配置项<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">butterfly_article_double_row:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li>在 <code>custom.css</code> 样式文件中添加下面配置来解决最后一页文章数为奇数时不美观的bug<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 翻页按钮居中 */</span></span><br><span class="line"><span class="selector-id">#pagination</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 博客搭建系列教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Butterfly </tag>
            
            <tag> 博客美化 </tag>
            
            <tag> 博客魔改 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手把手搭建个人博客系列教程-四</title>
      <link href="/2024/05/19/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E5%9B%9B/"/>
      <url>/2024/05/19/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E5%9B%9B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong><a href="#front-matter">手把手搭建个人博客系列教程-四</a>:  个人博客搭建中博客的初步美化，导航栏、代码、侧边社交栏，各种图片背景封面的设置</strong></p><blockquote><p><strong>参考文档:</strong></p><ul><li><a href="https://hexo.io/zh-cn/docs/">Hexo框架的官方文档</a></li><li><a href="https://butterfly.js.org/posts/21cfbf15/">Butterfly主题的官方文档</a></li></ul></blockquote><h2 id="环境与工具"><a href="#环境与工具" class="headerlink" title="环境与工具"></a>环境与工具</h2><ul><li>操作系统：Windows 10</li><li>VSCode编辑器</li></ul><hr><h2 id="网站美化原理"><a href="#网站美化原理" class="headerlink" title="网站美化原理"></a>网站美化原理</h2><p>本系列教程前序篇章已经介绍了博客的搭建和基本使用方式，从本篇章开始介绍美化博客的方式，要开始美化博客需要了解Hexo框架中主题配置相关文件的含义：</p><table><thead><tr><th>目录文件</th><th>描述</th></tr></thead><tbody><tr><td>_config.yml</td><td>全局配置文件</td></tr><tr><td>_config.butterfly.yml</td><td>主题配置文件</td></tr></tbody></table><p><em><strong>注意页面文件保存在 <code>source</code> 目录下，以页面名字命名的文件夹，要单独设置页面的主题就修改此路径下的 <code>index.md</code> 文件</strong></em></p><h2 id="config-yml全局配置"><a href="#config-yml全局配置" class="headerlink" title="_config.yml全局配置"></a>_config.yml全局配置</h2><p>在博客项目根目录 <code>_config.yml</code> 文件是博客的全局配置文件，我们初步美化博客首先要对 <code>_config.yml</code> 根据自己的需要进行修改</p><p><em><strong>tips：在_config.yml中找配置项时可以使用快捷键<code>Ctrl</code>+<code>F</code>，使用页面查找功能在文件中直接定位配置项方便修改</strong></em></p><p>初步美化我们只暂时修改下面示例的几处配置，其余项直接使用默认即可：</p><ol><li><p>网站全局设置Site</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">yourtitle</span> <span class="comment"># 网站主页标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">yoursubtitle</span> <span class="comment"># 副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">yourdescription</span> <span class="comment"># 网站描述</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="comment"># 关键词</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">技术</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">笔记</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">yourname</span></span><br><span class="line"><span class="attr">email:</span> <span class="string">excample@excample.com</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span> <span class="comment"># 简体中文</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;Asia/Shanghai&#x27;</span>   <span class="comment"># 时区</span></span><br></pre></td></tr></table></figure><p> 配置项含义：</p><table><thead><tr><th>配置项</th><th>描述</th><th>可选值</th></tr></thead><tbody><tr><td>title</td><td>页面标签名</td><td>文字</td></tr><tr><td>subtitle</td><td>页面副标签名，以<code>title-subtitle</code>的形式展示在最上方标签页</td><td>文字</td></tr><tr><td>language</td><td>全局语言设置</td><td>默认 <code>en</code> 英文，可选中文简体 <code>zh-CN</code> 和 中文繁体<code>zh-TW</code></td></tr><tr><td>timezone</td><td>时区</td><td>默认使用电脑的时区，中国大陆一般用 Asia&#x2F;Shanghai</td></tr></tbody></table><p> 在主题配置文件中可以<a href="#%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87">设置标签页的icon</a></p></li><li><p>URL设置<br>将url项配置为 <code>https://你的用户名.github.io/</code> ,其余部分使用默认即可</p></li></ol><h2 id="采用Butterfly主题美化"><a href="#采用Butterfly主题美化" class="headerlink" title="采用Butterfly主题美化"></a>采用Butterfly主题美化</h2><p>在之前的部署尝试中我们建立了一个简单的博客，这部分我们安装主题，在主题中定制自己喜欢的样式<br>本教程中采用的是经典的Butterfly主题，下面教程参考<a href="https://butterfly.js.org/posts/21cfbf15/">官方文档</a>中的安装方法</p><h3 id="下载主题文件"><a href="#下载主题文件" class="headerlink" title="下载主题文件"></a>下载主题文件</h3><p>在本地博客根目录打开终端，用<code>npm</code>工具安装hexo-theme-butterfly主题，安装文件在node_modules文件夹下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-theme-butterfly</span><br></pre></td></tr></table></figure><h3 id="应用主题文件"><a href="#应用主题文件" class="headerlink" title="应用主题文件"></a>应用主题文件</h3><ol><li>修改根目录的博客配置文件_config.yml，在_config.yml中用<code>Ctrl+F</code>快捷键启动搜索，搜索找到theme项，将theme项配置为<code>theme: butterfly</code>，这样就将_config.yml和后续的主题配置文件_config.butterfly.yml关联起来了</li><li>使用终端命令安装渲染器pug和stylus，这两个渲染器是Butterfly主题生成基础界面必备的依赖项<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure></li><li>将下载的主题文件所在路径<code>node_modules/hexo-theme-butterfly</code>中的 <code>_config.yml</code>复制一份到根目录，重命名为_config.butterfly.yml，这个就是主题配置文件，之后的美化都在此文件基础上配置 <div class="note info flat"><p><em>注意：hexo会自动合并主题中的_config.yml和_config.butterfly.yml中配置，同名配置会优先采用_config.butterfly.yml的配置</em></p></div></li></ol><h3 id="升级主题文件"><a href="#升级主题文件" class="headerlink" title="升级主题文件"></a>升级主题文件</h3><p>通过上述安装方法安装的是最基本的主题，升级后可以使用最新版主题的各项功能，在根目录使用npm命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm update hexo-theme-butterfly</span><br></pre></td></tr></table></figure><div class="note info flat"><p><em>注意：升级前最好将hexo-theme-butterfly文件夹备份，因为通过npm更新会直接覆盖原文件</em></p></div><p>没有升级需求的就不用升级了，我们刚开始配置博客网站，还用不到升级到功能更多的版本</p><h2 id="了解网站界面构成"><a href="#了解网站界面构成" class="headerlink" title="了解网站界面构成"></a>了解网站界面构成</h2><p>了解网站的界面构成能更好地帮助我们了解网站，在美化博客时方便对照配置修改，以网站主页页面举例：<br><img src="/img/indexPageIntroduction.jpg" alt="indexPageIntroduction"></p><h2 id="导航栏设置"><a href="#导航栏设置" class="headerlink" title="导航栏设置"></a>导航栏设置</h2><p>在 <code>_config.butterfly.yml</code> 主题配置文件中进行导航栏nav和menu部分的配置</p><h3 id="nav部分"><a href="#nav部分" class="headerlink" title="nav部分"></a>nav部分</h3><p>nav部分是主页左上角的部分</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">nav:</span></span><br><span class="line">  <span class="attr">logo:</span> <span class="comment">#image,呈现在左上角的网站图标，支持本地图片或外链图片</span></span><br><span class="line">  <span class="attr">display_title:</span> <span class="literal">true</span> <span class="comment"># 是否显示网站标题</span></span><br><span class="line">  <span class="attr">fixed:</span> <span class="literal">false</span> <span class="comment"># fixed navigation bar 固定nav</span></span><br></pre></td></tr></table></figure><h3 id="menu部分"><a href="#menu部分" class="headerlink" title="menu部分"></a>menu部分</h3><p>menu菜单是网站页面最上方的菜单部分</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">主页:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="string">时光轴:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="string">标签:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="string">分类:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-open</span></span><br><span class="line">  <span class="string">放松||fas</span> <span class="attr">fa-list:</span></span><br><span class="line">    <span class="string">音乐:</span> <span class="string">/music/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-music</span></span><br><span class="line">    <span class="string">图库:</span> <span class="string">/photos/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-camera-retro</span></span><br><span class="line">  <span class="string">友情链接:</span> <span class="string">/link/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-link</span></span><br><span class="line">  <span class="string">关于:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-heart</span></span><br></pre></td></tr></table></figure><ul><li>菜单名可以更改，可以添加，添加后要同步创建页面和配置文件</li><li><code>||</code> 右边是图标名称，如果不想显示图标就不用写 <code>||</code> 和右边的内容</li><li>图标可以在 <a href="https://fontawesome.com/icons?from=io">fontawesome网站</a> 搜索，使用其标签中的class内容</li></ul><h3 id="配置菜单栏页面"><a href="#配置菜单栏页面" class="headerlink" title="配置菜单栏页面"></a>配置菜单栏页面</h3><p>要配置菜单栏页面首先要明确菜单栏中的几个功能其实是几个独立的页面，每个页面有各自的页面文件index.md<br>使用 <code>hexo new page 页面名 </code> 命令直接生成页面目录和页面文件，页面目录在source文件夹下，例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><p>页面文件index.md中在front-matter部分可以修改相关配置，例如页面名、创建日期等</p><div class="note info flat"><p><em>注意：tags、categories、link这三个页面必须在页面文件index.md中修改type配置项为对应的类型</em></p></div><p>即：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">type:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">link</span></span><br></pre></td></tr></table></figure><h3 id="设置link页面的具体内容"><a href="#设置link页面的具体内容" class="headerlink" title="设置link页面的具体内容"></a>设置link页面的具体内容</h3><p>在source目录下创建 <code>_data</code> 文件夹，在此文件夹中创建link.yml文件，在其中按照下方示例格式添加自己的友情链接：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">友情链接</span></span><br><span class="line">  <span class="attr">class_desc:</span> <span class="string">那些人，那些事</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hexo</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://hexo.io/zh-tw/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">快速、简单且强大的网志框架</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">网站</span></span><br><span class="line">  <span class="attr">class_desc:</span> <span class="string">值得推荐的网站</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Youtube</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://www.youtube.com/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">视频网站</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Weibo</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://www.weibo.com/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">中国最大社交分享平台</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Twitter</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://twitter.com/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">社交分享平台</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="图标的使用"><a href="#图标的使用" class="headerlink" title="图标的使用"></a>图标的使用</h3><p>一个功能前如果能有一个合适的图标会显得清晰明了，也更加美观，icon网站提供给我们很多常用的图标，使用方法如下：</p><ol><li>进入icon官网，使用英文搜索图标名字</li><li>点击想要的图标，会显示在各种格式下的引用方法，如果只单纯获取图标名，就只需要看高亮的部分，例如： <code>&lt;i class=&quot;fa-brands fa-github&quot;&gt;&lt;/i&gt;</code> 对应的图标名可以使用缩写 <code>fab fa-github</code></li></ol><h3 id="添加自己的菜单栏页面"><a href="#添加自己的菜单栏页面" class="headerlink" title="添加自己的菜单栏页面"></a>添加自己的菜单栏页面</h3><p>以添加并设置一个图库页面为例说明添加自己的菜单栏页面的方法：</p><ol><li><p>用 <code>hexo new page photos</code> 命令生成图库页面目录</p></li><li><p>配置图库 <code>source/photos/index.md</code>，采用标签外挂galleryGroup的方式在 <code>index.md</code> 中实现，galleryGroup使用方法如下：</p> <figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 图库</span><br><span class="line"><span class="section">date: 2024-05-11 19:03:18</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup &#x27;壁纸&#x27; &#x27;收藏的一些壁纸&#x27; &#x27;/photos/wallpaper&#x27; https://cdn.jsdelivr.net/gh/PeakofMountains/BlogImg/img/1.jpeg %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p> galleryGroup的参数说明，格式为</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% galleryGroup <span class="string">&#x27;name&#x27;</span> <span class="string">&#x27;description&#x27;</span> <span class="string">&#x27;link&#x27;</span> img_url %&#125;</span><br></pre></td></tr></table></figure><p> 参数含义：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>图库名</td></tr><tr><td>description</td><td>图库描述</td></tr><tr><td>link</td><td>图库链接到的相册所在路径，根目录默认为source&#x2F;</td></tr><tr><td>img_url</td><td>图库封面图片路径</td></tr></tbody></table></li><li><p>生成相册页面目录</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page wallpaper</span><br></pre></td></tr></table></figure><p> 为方便管理可以将生成的wallpaper文件夹移动到图库文件夹photos下，相应的photos的页面文件index.md中link也要做相应的修改</p></li><li><p>配置相册页面内容，使用外挂gallery的方式，格式为: <code>![](img_url)</code> ，具体如下：</p> <figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: wallpaper</span><br><span class="line"><span class="section">date: 2024-05-12 11:44:26</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg</span>)</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="代码相关设置"><a href="#代码相关设置" class="headerlink" title="代码相关设置"></a>代码相关设置</h2><p>Code Blocks代码相关设置</p><table><thead><tr><th>配置项</th><th>描述</th><th>可选值</th></tr></thead><tbody><tr><td>highlight_theme</td><td>代码高亮主题</td><td>darker&#x2F;pale night&#x2F;light&#x2F;ocean&#x2F;mac&#x2F; mac light&#x2F;false</td></tr><tr><td>highlight_copy</td><td>供一键复制代码选项</td><td>true&#x2F;false</td></tr><tr><td>highlight_lang</td><td>显示代码块所用语言</td><td>true&#x2F;false</td></tr><tr><td>highlight_shrink: false</td><td>代码块收起</td><td>true:收起代码块提供展开按钮;false:展开代码块提供收起按钮;none:完全展开代码块不可收起</td></tr><tr><td>highlight_height_limit</td><td>超过长度限制部分收起</td><td>直接填 数字，单位px，例：120</td></tr><tr><td>code_word_wrap</td><td>长行代码换行</td><td>true&#x2F;false，默认false，不想要横向滚动条的开启此项,同时在_config.yml做相关修改</td></tr></tbody></table><p>code_word_wrap<a href="https://butterfly.js.org/posts/4aa8abbe/#%E4%BB%A3%E7%A2%BC%E6%8F%9B%E8%A1%8C"><strong>代码不自动换行的设置方法</strong></a></p><h2 id="侧边社交栏设置"><a href="#侧边社交栏设置" class="headerlink" title="侧边社交栏设置"></a>侧边社交栏设置</h2><h3 id="social项"><a href="#social项" class="headerlink" title="social项"></a>social项</h3><p>在页面右侧显示的社交卡片，可以设置博主的个人社交信息，格式：<br><code>icon: link || the description || color</code><br>最终的效果是显示color颜色的icon图片，鼠标在icon上停留展示the description内容，点击icon图标跳转link链接，<em><strong>icon可在<a href="https://fontawesome.com/icons?from=io">此网站</a>搜索查找，英文搜索，选中图标后复制图标的标签中class部分粘贴到要用的地方即可，例如 <code>fa fa-address-book</code></strong></em></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">fab fa-github:</span> <span class="string">https://github.com/example</span> <span class="string">||</span> <span class="string">Github</span> <span class="string">||</span> <span class="string">&#x27;#24292e&#x27;</span></span><br><span class="line">  <span class="attr">fas fa-envelope:</span> <span class="string">mailto:example@example.com</span> <span class="string">||</span> <span class="string">Email</span> <span class="string">||</span> <span class="string">&#x27;#22b0ff&#x27;</span></span><br><span class="line">  <span class="attr">fab fa-qq:</span> <span class="string">/img/qq.jpg</span> <span class="string">||</span> <span class="string">QQ</span> <span class="string">||</span> <span class="string">&#x27;#009bdb&#x27;</span></span><br><span class="line">  <span class="attr">fab fa-weixin:</span> <span class="string">/img/wechat.png</span> <span class="string">||</span> <span class="string">微信</span> <span class="string">||</span> <span class="string">&#x27;#39dc7e&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>link部分可以使用外链或本地图片，例如上面所示在本地存储qq和微信二维码，点击icon就能展示图片</li><li>同时也支持 <code>mailto:example@example.com</code> 这种邮件链接，点击后会自动打开电脑上的邮件软件</li></ul><h3 id="avatar项"><a href="#avatar项" class="headerlink" title="avatar项"></a>avatar项</h3><p>社交栏展示的博主头像，示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="attr">img:</span> <span class="string">img/profilePicture.jpg</span>   <span class="comment"># 本地图片或外链图片都可以</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="literal">false</span>  <span class="comment"># true/false true图像会一直旋转</span></span><br></pre></td></tr></table></figure><div class="note info flat"><p><em>注意： 本文中提到的本地图片指的是保存在项目目录中以相对地址表示的图片，外链图片指的是以外链形式，即<code>https://example.com/example.jpg</code>这种形式保存的图片</em></p></div><h2 id="网站图标"><a href="#网站图标" class="headerlink" title="网站图标"></a>网站图标</h2><p>favicon项配置的是网站网页页面最上方的标签favicon，格式为:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">favicon:</span> <span class="string">img/logo.jpg</span>   <span class="comment"># 本地图片或外链图片或icon图标均可</span></span><br></pre></td></tr></table></figure><h2 id="图片的配置"><a href="#图片的配置" class="headerlink" title="图片的配置"></a>图片的配置</h2><p>一般我们会将整个网页页面从上而下划分成top、background、footer三个部分，top和footer部分在background的上层，相当于top和footer会遮挡部分background</p><ul><li>顶部横幅top_img一般是给文章页面最上方的标题和文章信息作背景</li><li>footer部分默认和top_img用的同一个图片，分别显示这个图片的最上方部分和最底部部分</li><li>background设置后，就只显示图片的中间部分</li></ul><h3 id="顶部横幅设置"><a href="#顶部横幅设置" class="headerlink" title="顶部横幅设置"></a>顶部横幅设置</h3><p>这里先设置顶部横幅top_img部分：</p><table><thead><tr><th>配置</th><th>描述</th></tr></thead><tbody><tr><td>disable_top_img</td><td>顶部横幅是否禁用，false为启用</td></tr><tr><td>index_img</td><td>主页横幅，即主页的top_img，本地相对地址图片和外链图片都可以</td></tr><tr><td>default_top_img</td><td>默认top_img，当页面横幅未在其页面文件的front-matter部分设置top_img项就会显示default_top_img</td></tr><tr><td>archive_img</td><td>archive页面的横幅</td></tr><tr><td>tag_img</td><td>tags的子页面tag的默认top_img,格式: - tag name: xxxxx</td></tr><tr><td>tag_per_img</td><td>tags的子页面tag的top_img</td></tr><tr><td>category_img</td><td>categories的子页面category的默认top_img,格式 - category name: xxxxx</td></tr><tr><td>category_per_img</td><td>categories的子页面category的top_img</td></tr></tbody></table><p><em><strong>注意：此处这俩tag_img都设置的是tags的子页面tag的top_img，而不是tags页面的top_img，tags页面的top_img需要在其对应的index.md文件中设置，category_img和category_per_img同理</strong></em></p><h4 id="top-img参数"><a href="#top-img参数" class="headerlink" title="top_img参数"></a>top_img参数</h4><p>上述的所有top_img可配置以下值：</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>留空</td><td>显示默认top_img(如有)，否则显示默认纯色背景，文章页top_img留空会显示cover的值代替</td></tr><tr><td>false</td><td>不启用top_img</td></tr><tr><td>图片地址</td><td>本地图片或外链</td></tr><tr><td>纯色</td><td>HEX值 - #0000FF，RGB值 - rgb(0,0,255)，顔色单词 - orange，渐变色 - linear-gradient(135deg, #E2B0FF 10%, #9F44D3 100%)</td></tr><tr><td>transparent</td><td>透明</td></tr></tbody></table><div class="note warning flat"><p>3.2.0以下版本不支持 纯色 和 transparent</p></div><p><em><strong>并不推荐为每个tag和category设置单独的顶部横幅，配置太多会拖慢生成速度</strong></em></p><h3 id="网站背景设置"><a href="#网站背景设置" class="headerlink" title="网站背景设置"></a>网站背景设置</h3><p>Website Background网站背景</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">background:</span> <span class="string">url(/img/example.jpg)</span></span><br></pre></td></tr></table></figure><h3 id="footer-bg设置"><a href="#footer-bg设置" class="headerlink" title="footer_bg设置"></a>footer_bg设置</h3><p>footer部分背景图的设置，可设置为图片或颜色，值为空则使用默认的纯色的背景，参数值可参考<a href="#top_img%E5%8F%82%E6%95%B0">top_img参数配置</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">footer_bg:</span> <span class="string">/img/example.jpg</span></span><br></pre></td></tr></table></figure><h2 id="文章封面设置"><a href="#文章封面设置" class="headerlink" title="文章封面设置"></a>文章封面设置</h2><p>cover部分，博客中发布的文章会在主页以<code>封面+文字介绍+文章信息</code>的形式呈现出多个文章卡片，来方便访问者快速了解和访问文章内容，配置项含义：</p><table><thead><tr><th>配置项</th><th>描述</th><th>可选值</th></tr></thead><tbody><tr><td>index_enable</td><td>是否在主页展示封面</td><td>true&#x2F;false</td></tr><tr><td>aside_enable</td><td>侧栏是否显示封面</td><td>true&#x2F;false</td></tr><tr><td>archives_enable</td><td>是否在archives页面展示封面</td><td>true&#x2F;false</td></tr><tr><td>position</td><td>在主页文章卡片显示时封面的位置</td><td>left&#x2F;right&#x2F;both，封面在左&#x2F;封面在右&#x2F;封面左右轮流</td></tr><tr><td>default_cover</td><td>未设置封面时采用的默认封面，随机分配，可配置图片链接&#x2F;颜色&#x2F;渐变色</td><td>默认为空使用纯色背景，可配置为本地图片或外链图片</td></tr></tbody></table><p>default_cover项设置多个cover时的格式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">default_cover:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">/img/example1.jpg</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">/img/example2.jpg</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客搭建系列教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Butterfly </tag>
            
            <tag> 博客美化 </tag>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手把手搭建个人博客系列教程-三</title>
      <link href="/2024/05/17/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E4%B8%89/"/>
      <url>/2024/05/17/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E4%B8%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong><a href="#front-matter">手把手搭建个人博客系列教程-三</a>: 分享个人博客中文章书写的方法和技巧</strong></p><blockquote><p><strong>参考文档:</strong></p><ul><li><a href="https://hexo.io/zh-cn/docs/">Hexo框架的官方文档</a></li></ul></blockquote><h2 id="环境与工具"><a href="#环境与工具" class="headerlink" title="环境与工具"></a>环境与工具</h2><ul><li>操作系统：Windows 10</li><li>VSCode编辑器</li></ul><hr><h2 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h2><p>根据文章模板创建的文章都包含了最上方以<code>---</code>分割的区域，称之为Front-matter，在Front-matter部分能设置文章的一些设置和描述信息</p><h3 id="参数配置"><a href="#参数配置" class="headerlink" title="参数配置"></a>参数配置</h3><p>这里列几个常用的，全部的<a href="https://hexo.io/zh-cn/docs/front-matter">文章页Front-matter参数配置可查看官方教程</a>：</p><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>title</td><td>标题</td><td>文章文件名</td></tr><tr><td>date</td><td>创建时间</td><td>文件建立时间</td></tr><tr><td>updated</td><td>更新日期</td><td>文件更新日期</td></tr><tr><td>tags</td><td>标签(不适用于分页)</td><td>None</td></tr><tr><td>categories</td><td>分类(不适用于分页)</td><td>None</td></tr><tr><td>comments</td><td>开启文章评论功能</td><td>true</td></tr><tr><td>published</td><td>文章是否发布</td><td>对于<code>_posts</code>下的文章为true，对_draft下的文章为false</td></tr></tbody></table><h3 id="tags和categories"><a href="#tags和categories" class="headerlink" title="tags和categories"></a>tags和categories</h3><p>tags和categories填写的内容会加入到主页的tags页面和categories页面的统计中，因此填写这两个配置项对管理文章尤为重要<br><em><strong>注意：标签和分类感觉很像，但Hexo中这两个是不一样的，tags没有顺序性和层次性，而categories有，categories的顺序就代表了层级关系</strong></em><br>tags和categories的定义方式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tags:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">只狼：影逝二度</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">PC游戏</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">RPG</span></span><br><span class="line"><span class="attr">categories:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">Game</span></span><br></pre></td></tr></table></figure><p>Hexo的categories不支持同级分类，因此有必要为文章选择尽可能准确的分类<br>如果需要为文章添加多个分类，可以尝试下面的方式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">categories:</span></span><br><span class="line"> <span class="bullet">-</span> [<span class="string">Game</span>, <span class="string">PC</span>]</span><br><span class="line"> <span class="bullet">-</span> [<span class="string">Game</span>, <span class="string">PlayStation</span>]</span><br><span class="line"> <span class="bullet">-</span> [<span class="string">RPG</span>]</span><br></pre></td></tr></table></figure><p>此时文章给你包含三个分类，PC和PlayStation都是Game类的子分类，RPG是没有子分类的分类</p><h3 id="JSON支持"><a href="#JSON支持" class="headerlink" title="JSON支持"></a>JSON支持</h3><p>除了YAML外，也可以用JSON格式编写Front-matter部分，只要将<code>---</code>替换为<code>;;;</code>即可，例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">;;;</span><br><span class="line"><span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Hello World&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2024/5/17 12:00:00&quot;</span></span><br><span class="line">;;;</span><br></pre></td></tr></table></figure><h2 id="标签插件"><a href="#标签插件" class="headerlink" title="标签插件"></a>标签插件</h2><p>标签插件(Tag Plugins)和 Front-matter 中的标签不同，标签插件用于在文章中快速插入特定内容，标签插件的语法与书写文章的格式无关<br><em><strong>注意：标签插件的写法不应该被包裹在Markdown语法中使用，例如：<code>[](&#123;% post_path lorem-ipsum %&#125;)</code> 是不被支持的</strong></em></p><h3 id="引用块blockquote"><a href="#引用块blockquote" class="headerlink" title="引用块blockquote"></a>引用块blockquote</h3><p>在文章中插入引言，可包含作者、来源和标题，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><p>被<code>[]</code>框选的参数为可选参数，全部省略则只以blockquote标签显示content的内容，引用块参数：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>author</td><td>作者</td></tr><tr><td>link</td><td>引用链接</td></tr><tr><td>source_link_title</td><td>引用内容标题</td></tr></tbody></table><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote <span class="title class_">Seth</span> <span class="title class_">Godin</span> <span class="attr">http</span>:<span class="comment">//sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html Welcome to Island Marketing %&#125;</span></span><br><span class="line"><span class="title class_">Every</span> interaction is both precious and an opportunity to delight.</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><p>效果：</p><blockquote><p>Every interaction is both precious and an opportunity to delight.</p><footer><strong>Seth Godin</strong><cite><a href="http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html">Welcome to Island Marketing</a></cite></footer></blockquote><h3 id="代码块codeblock"><a href="#代码块codeblock" class="headerlink" title="代码块codeblock"></a>代码块codeblock</h3><h4 id="标签包裹的代码块"><a href="#标签包裹的代码块" class="headerlink" title="标签包裹的代码块"></a>标签包裹的代码块</h4><p>在文章中插入代码，用法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock [title] [<span class="attr">lang</span>:language] [url] [link text] [additional options] %&#125;</span><br><span class="line">code snippet</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><p>其中额外参数additional options用 <code>option:value</code> 的形式来指定，例如，可选的额外参数：</p><table><thead><tr><th>额外选项</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>line_number</td><td>显示行号</td><td>true</td></tr><tr><td>line_threshold</td><td>只有代码行数超过该阈值才显示行号</td><td>0</td></tr><tr><td>hightlight</td><td>语法高亮</td><td>true</td></tr><tr><td>first_line</td><td>指定第一个行号</td><td>1</td></tr><tr><td>mark</td><td>高亮特定行，值间用<code>,</code>分割，<code>-</code>指定范围值，例如：<code>mark:1,3-5,8</code>表示高亮显示1,3到5,8行</td><td>None</td></tr><tr><td>wrap</td><td>用<code>&lt;table&gt;</code>包裹代码块</td><td>true</td></tr></tbody></table><p>使用示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock <span class="string">&quot;creat a new page&quot;</span> <span class="attr">lang</span>:shell <span class="attr">https</span>:<span class="comment">//hexo.io/zh-cn/docs/commands &quot;更多相关命令&quot; %&#125;</span></span><br><span class="line">hexo <span class="keyword">new</span> page example</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><p>实际效果：</p><figure class="highlight shell"><figcaption><span>creat a new page</span><a href="https://hexo.io/zh-cn/docs/commands">更多相关命令</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page example</span><br></pre></td></tr></table></figure><h4 id="反引号包裹的代码块"><a href="#反引号包裹的代码块" class="headerlink" title="反引号包裹的代码块"></a>反引号包裹的代码块</h4><p>这是在markdown中用的更广泛的代码块形式，格式:</p><blockquote><p>```[language] [title] [url] [link text]<br>code snippet<br>```</p></blockquote><h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><p>插入图片可指定宽度高度等</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% img [<span class="keyword">class</span> <span class="title class_">names</span>] /path/to/image [width] [height] <span class="string">&#x27;&quot;title text&quot; &quot;alt text&quot;&#x27;</span> %&#125;</span><br></pre></td></tr></table></figure><h3 id="代码引入"><a href="#代码引入" class="headerlink" title="代码引入"></a>代码引入</h3><p>插入 <code>source/downloads/code</code> 文件夹内的代码文件，可以指定范围引入，此路径并不固定，取决于在配置文件 <code>_config.yml</code>中的配置项 <code>code_dir</code> 的值，格式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include_code [title] [<span class="attr">lang</span>:language] [<span class="attr">from</span>:line] [<span class="attr">to</span>:line] path/to/file %&#125;</span><br></pre></td></tr></table></figure><p>此功能方便在修改代码后不用再对照修改博客文章中的代码片段<br>使用样例，<code>test.js</code>文件在<code>source/downloads/code</code>路径下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include_code <span class="attr">lang</span>:javascript <span class="attr">from</span>:<span class="number">3</span> <span class="attr">to</span>:<span class="number">10</span> test.<span class="property">js</span> %&#125;</span><br></pre></td></tr></table></figure><h3 id="文章摘要和截断"><a href="#文章摘要和截断" class="headerlink" title="文章摘要和截断"></a>文章摘要和截断</h3><p>在文章中使用 <code>&lt;!-- more  --&gt;</code> ，那么 <code>&lt;!-- more  --&gt;</code> 之前的部分都将被视作文章的摘要部分，后面的部分视作正文部分，在首页将只出现文章的摘要展示，同时摘要和正文都显示在文章页，使用样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这是摘要部分</span><br><span class="line">&lt;!-- more  --&gt;</span><br><span class="line">这是正文部分</span><br></pre></td></tr></table></figure><h2 id="数据文件引入"><a href="#数据文件引入" class="headerlink" title="数据文件引入"></a>数据文件引入</h2><p>有时需要在主题中重复使用某些外部数据，那就应考虑使用数据文件功能，此功能会加载 <code>source/_data</code> 内的 YAML 或 JSON 文件直接在文章或配置中引用，举例来说，在 <code>source/_data</code> 文件夹中新建 <code>menu.yml</code> 文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Home:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">Gallery:</span> <span class="string">/gallery/</span></span><br><span class="line"><span class="attr">Archives:</span> <span class="string">/archives/</span></span><br></pre></td></tr></table></figure><p>我们就能在模板中使用这些数据：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">for</span> (<span class="keyword">var</span> link <span class="keyword">in</span> site.<span class="property">data</span>.<span class="property">menu</span>) &#123; %&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%= site.data.menu[link] %&gt;&quot;</span>&gt;</span> &lt;%= link %&gt; <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>渲染的效果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span>&gt;</span> Home <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/gallery/&quot;</span>&gt;</span> Gallery <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/archives/&quot;</span>&gt;</span> Archives <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客搭建系列教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手把手搭建个人博客系列教程-二</title>
      <link href="/2024/05/17/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E4%BA%8C/"/>
      <url>/2024/05/17/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong><a href="#%E5%88%9B%E5%BB%BA%E6%9C%AC%E5%9C%B0%E5%8D%9A%E5%AE%A2">手把手搭建个人博客系列教程-二</a>: 主要完成个人博客搭建中博客文章的生成和发布</strong></p><blockquote><p><strong>参考文档:</strong></p><ul><li><a href="https://butterfly.js.org/posts/21cfbf15/">Butterfly主题的官方文档</a></li></ul></blockquote><h2 id="环境与工具"><a href="#环境与工具" class="headerlink" title="环境与工具"></a>环境与工具</h2><ul><li>操作系统：Windows 10</li><li>VSCode编辑器</li></ul><hr><h2 id="创建本地博客"><a href="#创建本地博客" class="headerlink" title="创建本地博客"></a>创建本地博客</h2><p>建立个人博客的一般流程都是本地创建博客，平时书写更新文章都在本地完成，修改确认完成后发布到远端网站上线，因此建立博客的第一步就是在本地建立博客并测试<br>本教程中采用Hexo作为博客网站的框架，在框架上搭建自己的博客能大大减少繁杂的工作量，同时分析和使用别人完善的框架也能给自己以后搭建框架提供启发和参考<br>Hexo 是一个简洁、简单的常用博客框架，其使用 Markdown 等渲染引擎解析文章，在几秒内快速渲染主题生成静态网页，下面是创建并部署一个简单博客的步骤：</p><ol><li><p>在本地选一个自己要放置管理博客文件的位置创建个人博客文件夹，命名随意，<em><strong>最好不要放C盘，占空间</strong></em></p></li><li><p>在博客文件夹里右键选择<code>git bash</code>调出git bash终端，或者在VSCode中 左上角File-&gt;Open Folder-&gt;选中博客文件夹-&gt;打开，运行Terminal终端，<em><strong>注意看Terminal命令行确保显示的是自己的博客文件夹路径</strong></em></p></li><li><p>在终端用<code>hexo init</code>命令进行hexo初始化，自动安装相关依赖，初始化完成会提示<code>Start blogging with Hexo!</code></p></li><li><p>在终端用<code>hexo install</code>命令进行安装配置</p></li><li><p>初始化项目完成后，自动生成的本地博客文件目录详解如下，只有了解了文件目录之后在美化网页时才能找到对应美化文件的含义和路径：</p><table><thead><tr><th>目录&#x2F;文件</th><th>描述</th></tr></thead><tbody><tr><td>node_modules</td><td>依赖包</td></tr><tr><td>scaffolds</td><td>生成文章的模板</td></tr><tr><td>source</td><td>存放文章及页面文件</td></tr><tr><td>themes</td><td>主题文件</td></tr><tr><td>_config.landscape.yml</td><td>主题配置文件，两个 <code>.</code> 中间的是主题名</td></tr><tr><td>_config.yml</td><td>博客的全局配置文件</td></tr><tr><td>package.json</td><td>项目名称、描述、版本等信息</td></tr></tbody></table><p> 于此同时，source文件夹作为博客主要内容来源，也要了解其中目录：</p><table><thead><tr><th>目录</th><th>描述</th></tr></thead><tbody><tr><td>_data</td><td>YAML或JSON格式的数据文件</td></tr><tr><td>_posts</td><td>将发布的文章</td></tr><tr><td>_draft</td><td>文章草稿</td></tr></tbody></table></li><li><p>在终端运行命令</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p> 或者其缩写形式 <code>hexo g</code> 命令在hexo站点根目录生成public文件夹</p></li><li><p>在本地部署博客，可以方便调试和预览部署效果，在终端使用命令</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p> 或其缩写命令 <code>hexo s</code> 启动本地服务器，默认本地访问地址是<code>http://localhost:4000/</code> ，4000指的是端口号，在浏览器中使用此地址就可看到本地部署的网页<br> 特别地，如果本地端口4000被占用或者不想使用4000端口或出现 <code>EADDRINUSE</code> 错误，可以使用 <code>-p</code> 选项指定本地服务器的地址端口，以端口5000为例：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server -p 5000</span><br></pre></td></tr></table></figure></li><li><p>终止本地部署<br> 经过我的测试，在不同的终端进行本地博客部署其终止方式也不太一样</p><ul><li>在VSCode终端：在VSCode终端停止本地部署直接用 <code>Ctrl+C</code> 命令就能终止，终止成功会显示一个再见问候</li><li>在git bash：<ol><li>在git bash终端要停止服务使用在git bash窗口用 <code>Ctrl+C</code> 命令不起作用，需要重新打开一个终端用下面命令查看目前4000端口(根据自己实际采用的端口为准，默认是4000端口)的使用情况：  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -o -n -a | findstr :4000 </span><br></pre></td></tr></table></figure></li><li>找到服务所在的进程，用下面命令关闭进程： <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">taskkill /F /PID 3628</span><br></pre></td></tr></table></figure> <em>注意3628指的是服务所在PID号，每个人可能不同，要看步骤1查找出来的条目内容</em></li></ol></li></ul></li></ol><h2 id="部署到远端仓库"><a href="#部署到远端仓库" class="headerlink" title="部署到远端仓库"></a>部署到远端仓库</h2><p>当我们在本地调试好博客内容，经过本地部署预览后就可以部署到远端仓库了，为方便之后的博客部署，我们配置一个项目自动部署发布工具，以后就能直接通过命令 <code>hexo d</code>来一键上传部署博客到远端，下面是具体步骤：</p><ol><li>在本地博客文件夹，记事本打开_config.yml配置文件，在最底部将deploy项配置为： <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">type: git</span><br><span class="line">repository: git@github.com:username/username.github.io.git</span><br><span class="line">branch: main</span><br></pre></td></tr></table></figure> <div class="note info flat"><ul><li>配置项的缩进与默认的type保持一致</li><li>repository项的配置内容为github上个人博客的仓库地址，在github博客仓库首页点击code，复制ssh选项中给出的git开头的仓库地址，粘贴到repository处即可</li></ul></div>   </li><li>配置自动部署发布工具，在本地博客文件夹打开git bash窗口，使用下面命令安装自动部署发布工具 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li>上传并部署到远端GitHub博客仓库<ol><li>使用命令<code>hexo clean</code>删除之前生成的静态文件，如果之前未生成过静态文件可忽略此条</li><li>使用命令<code>hexo generate</code>或简写命令<code>hexo g</code>生成静态文件</li><li>使用命令<code>hexo deploy</code>或简写命令<code>hexo d</code>部署文章</li></ol></li></ol><p>注： </p><ul><li>用<code>hexo d</code>部署文章时由于之前配置过ssh，所以首次使用会用ssh登录，也可能需要输入GitHub的用户名和密码</li><li>当出现Deploy done: git提示时说明部署成功，等待一分钟左右，在GitHub的个人博客页面（GitHub的用户名.github.io）就能看到本地博客已经部署成功的页面了</li><li>步骤1、2都是首次使用时进行的配置，之后的远端部署只用执行步骤3所说的命令即可，而且在VSCode终端中还可以用下面简化命令一次完成清理、生成、部署的操作：  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure></li></ul><h2 id="博客文章生成"><a href="#博客文章生成" class="headerlink" title="博客文章生成"></a>博客文章生成</h2><p>当然建立博客后的首要工作是学会如何写博客文章并发布</p><h3 id="生成博客模板文章"><a href="#生成博客模板文章" class="headerlink" title="生成博客模板文章"></a>生成博客模板文章</h3><p>在本地博客文件夹中打开git bash终端或者直接使用VSCode的Teerminal，通过下面命令创建一篇新文章或者新页面<br>    <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><br>    layout参数可直接忽略不写，默认是 <code>post</code>，当然我们也可以在博客根目录的 <code>_config.yml</code> 全局配置文件中的配置项 <code>default_layout</code> 来指定默认的layout方式</p><h3 id="layout参数"><a href="#layout参数" class="headerlink" title="layout参数"></a>layout参数</h3><p>layout参数是来指定创建的文件类型，可选变量如下：</p><table><thead><tr><th>布局</th><th>生成文件路径</th><th align="center">描述</th></tr></thead><tbody><tr><td>post</td><td>source&#x2F;_posts&#x2F;</td><td align="center">文章</td></tr><tr><td>page</td><td>source&#x2F;</td><td align="center">页面</td></tr><tr><td>draft</td><td>source&#x2F;_drafts&#x2F;</td><td align="center">文章草稿</td></tr></tbody></table><p>默认layout参数为<code>post</code>，相应的生成的文章在路径 <code>source/_posts/</code> 保存，生成文章名字为<code>&lt;title&gt;.md</code> ，title是生成文章时指定的title参数，编辑此文件书写博客文章即可，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new markdown教程</span><br></pre></td></tr></table></figure><p>执行后我们能在 <code>source/_posts/</code> 路径下找到一个 <code>markdown教程.md</code> 文件，这个就是生成的文章文件，直接编辑即可</p><h3 id="title参数"><a href="#title参数" class="headerlink" title="title参数"></a>title参数</h3><p>Hexo的title参数默认使用标题作为创建的文件名称，当然我们可以在 <code>_config.yml</code> 中通过修改<code>new_post_name</code>参数来改变默认的文件名称，举个例子，将参数设置为<code>:year-:month-:day-:title.md</code>可让我们更方便通过日期来管理文章，类似占位符还有：</p><table><thead><tr><th>变量</th><th align="center">描述</th></tr></thead><tbody><tr><td>:title</td><td align="center">标题(小写，空格将替换为<code>-</code>)</td></tr><tr><td>:year</td><td align="center">创建时年份，如，2024</td></tr><tr><td>:month</td><td align="center">创建时月份，如，01</td></tr><tr><td>:i_month</td><td align="center">创建时月份，如，1</td></tr><tr><td>:day</td><td align="center">创建时日期，如，01</td></tr><tr><td>:i_day</td><td align="center">创建时日期，如，1</td></tr></tbody></table><h3 id="草稿-draft"><a href="#草稿-draft" class="headerlink" title="草稿 draft"></a>草稿 draft</h3><p>平时写文章一般是边写边修改，最好能打个草稿，Hexo为我们提供了这个功能就是上面介绍layout参数时提到了一种特殊布局： <code>draft</code> ，这种布局方式会将建立的文件保存在 <code>source/_drafts/</code> 路径下，默认不会显示到页面中，当然在本地预览时可以在执行时在命令最后加上 <code>--draft</code> 参数或者是在<code>_config.yml</code> 中将 <code>render_drafts</code> 参数设置为 <code>true</code> 来预览草稿<br>草稿文章完成后，可通过下面命令将草稿文件移动到发布文章路径 <code>source/_posts/</code> 下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo publish [layout]&lt;title&gt;</span><br></pre></td></tr></table></figure><h3 id="模板-Scaffold"><a href="#模板-Scaffold" class="headerlink" title="模板 Scaffold"></a>模板 Scaffold</h3><p>在新建文章时，使用创建文章命令后，Hexo会根据<code>scafflods</code>文件夹内的模板文件来建立文章文件，默认有<code>post.md</code>，<code>page.md</code>，<code>draft.md</code> 三个模板文件分别对应文章、页面、草稿三种，当然你也可以自定义模板，步骤如下：</p><ol><li>在<code>scaffolds</code>文件夹中创建模板文件，例如<code>photo.md</code></li><li>填写模板内容，可以使用的变量：<table><thead><tr><th>变量</th><th>描述</th></tr></thead><tbody><tr><td>layout</td><td>布局</td></tr><tr><td>title</td><td>标题</td></tr><tr><td>date</td><td>文章建立日期</td></tr></tbody></table></li><li>使用自定义模板创建文章，第一个参数为模板名，例如： <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new photo &quot;myphoto&quot;</span><br></pre></td></tr></table></figure></li></ol><h3 id="Hexo支持的书写格式"><a href="#Hexo支持的书写格式" class="headerlink" title="Hexo支持的书写格式"></a>Hexo支持的书写格式</h3><p>Hexo不仅可以用markdown书写文章，只要安装了相应的渲染插件，用任何格式都可书写文章，默认的可以用Markdown和EJS写作，这两个都是Hexo安装后自带的，<em><strong>相应的文章扩展名也要对应为md或者ejs渲染器才会渲染</strong></em>，常见的书写格式：</p><table><thead><tr><th>书写语言</th><th>渲染器</th></tr></thead><tbody><tr><td>Markdown</td><td>hexo-renderer-marked</td></tr><tr><td>EJS</td><td>hexo-renderer-ejs</td></tr><tr><td>Pug</td><td>hexo-renderer-pug</td></tr></tbody></table><h2 id="博客文章的部署和发布"><a href="#博客文章的部署和发布" class="headerlink" title="博客文章的部署和发布"></a>博客文章的部署和发布</h2><p>在编辑完成后保存文件，在终端窗口中先用<code>hexo clean</code>命令清除上次生成的静态文件，再用<code>hexo g</code>生成新的静态文件，通过<code>hexo s</code>本地部署预览，确认没问题后用<code>hexo d</code>发布博客文章到远端仓库网页，出现Deploy done: git提示时说明部署成功，等待一分钟左右，在GitHub的个人博客页面（GitHub的用户名.github.io）就能看到本地博客已经部署成功的页面了</p><div class="note warning flat"><p><em><strong>注意：请在部署到远端之前务必在本地部署预览一下，因为不同的编辑器使用的Markdown渲染工具不尽相同，可能在我们的编辑器里的渲染效果和部署在网页上的效果不一样，要注意修改</strong></em></p></div>]]></content>
      
      
      <categories>
          
          <category> 博客搭建系列教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手把手搭建个人博客系列教程-一</title>
      <link href="/2024/05/16/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E4%B8%80/"/>
      <url>/2024/05/16/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong><a href="#%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%B7%A5%E5%85%B7%E5%87%86%E5%A4%87">手把手搭建个人博客系列教程-一</a>: 主要完成工具和环境的安装和配置</strong><br>作为计算机专业的学生，一直想要有个专属于自己的个人博客，可以自定义博客样式和内容，但一直由于被各种琐事耽搁，曾经也尝试过CSDN、博客园等专门的博客书写网站，但曾经那个自定义博客的小梦想一直还埋藏在心里，最近趁着空闲，我决定实现我的这个小梦想，并一步步将我在搭建个人博客中所踩过的坑，总结出的经验分享出来，一方面是为了记录我对博客的理解，同时也希望这个浅薄的教程能给与我相似的爱好者一点帮助。<br>感谢在我个人博客搭建中提供参考和帮助的一些教程、网站</p><blockquote><p><strong>参考文档:</strong></p><ul><li><a href="https://hexo.io/zh-cn/docs/">Hexo框架的官方文档</a></li><li><a href="https://butterfly.js.org/">Butterfly主题的官方文档</a></li><li><a href="https://www.fomal.cc/posts/e593433d.html">Fomalhaut🥝大佬的博客</a></li></ul></blockquote><ul><li>个人博客的搭建不仅仅能产生独属于自己的博客这样一个成果，在搭建的过程中也能了解一个博客网站的架构，实现的思路，同时在自己动手修改配置的过程中对个人的文档阅读等能力也是一种提升</li><li>本博客的设计思路是：以Hexo为框架，Butterfly为主题，在此基础上进一步美化，最终形成一个功能多样，外观美观的博客网站</li></ul><hr><h2 id="环境配置与工具准备"><a href="#环境配置与工具准备" class="headerlink" title="环境配置与工具准备"></a>环境配置与工具准备</h2><ul><li>操作系统：Windows10 </li><li>VSCode编辑器</li></ul><h2 id="Node-js安装"><a href="#Node-js安装" class="headerlink" title="Node.js安装"></a>Node.js安装</h2><p>Node.js是一种JavaScript的运行环境，给JavaScript运行在服务端提供了平台，是搭建网站的基础环境，下面是安装步骤：</p><ol><li>直接在<a href="https://nodejs.org/en/download/">Node.js官网</a>下载安装文件</li><li>运行安装文件，安装路径可以自定义，默认路径在 <code>C:\Program Files\nodejs\</code> ，使用时产生的缓冲数据就会在C盘，比较占空间，<em><strong>图省事的C盘战士可以直接一路默认选项点下去就好</strong></em></li><li>安装完成后在cmd终端或VSCode终端使用下面命令验证是否安装成功或查看node.js和npm版本，<em>npm是Node.js的包管理工具，在安装Node.js时会自动安装</em>： <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure></li><li>为节省C盘空间，更改npm的全局安装模块的存储路径和缓冲文件的存储路径，步骤如下：<ol><li>在Node.js的安装目录创建两个文件夹<code>node_global</code>和<code>node_cache</code></li><li>在VSCode终端或cmd终端中执行下面的命令来配置npm相关路径配置： <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config set prefix &quot;D:\nodejs\node_global&quot;</span><br><span class="line">npm config set cache &quot;D:\nodejs\node_cache&quot;</span><br></pre></td></tr></table></figure></li><li>修改环境变量<ul><li>在系统变量中添加变量<code>NODE_PATH</code>，变量内容为刚创建的<code>node_global</code>的路径+<code>node_modules</code>，例如<code>D:\nodejs\node_global\node_modules</code></li><li>修改用户变量中的<code>PATH</code>变量，将默认的<code>C:\Users\Administrator\AppData\Roaming\npm</code>修改为设置的全局安装路径<code>D:\nodejs\node_global</code></li></ul></li><li>测试<br> 安装常用的express模块来测试配置是否成功，<code>-g</code>参数是全局安装的意思，如果成功会安装在之前设置的node_global路径内 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express -g</span><br></pre></td></tr></table></figure> 注：2022年之前安装的nodejs直接运行上述命令会报出<code>npm ERR! request to https://registry.npm.taobao.org/express failed, reason: certificate has expired</code>错误，提示更新证书，执行下面命令来更改镜像源，更改后能正常安装了： <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npmmirror.com</span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="Hexo的安装"><a href="#Hexo的安装" class="headerlink" title="Hexo的安装"></a>Hexo的安装</h2><p>在cmd或VSCode终端使用npm来安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>安装完成后可以用<code>hexo-cli -v</code>来验证安装成功或查看版本</p><h2 id="Git的安装"><a href="#Git的安装" class="headerlink" title="Git的安装"></a>Git的安装</h2><p>Git是一个开源的分布式版本控制系统，结合Github等代码托管平台常用作项目的版本控制和管理，对经常写代码的编程者来说Git是个不可或缺的工具<br>Git的安装也比较简单，网上能找到好多详细的安装教程，这里提供一个<a href="https://www.runoob.com/git/git-install-setup.html">Git安装教程</a>仅供参考<br>安装完成后可在cmd中用<code>git --version</code>测试是否安装成功或查看Git版本<br>安装并配置好Git后，最好先简单学一点Git工具的使用方法，这里给一个我曾经用过的<a href="https://www.runoob.com/w3cnote/git-five-minutes-tutorial.html">Git使用教程</a></p><h2 id="创建挂载仓库"><a href="#创建挂载仓库" class="headerlink" title="创建挂载仓库"></a>创建挂载仓库</h2><p>使用挂载仓库有两个目的，一个是网站文件管理和代码托管，另一个是使用Github的Github Page服务<br>有两个推荐的：Github和Gitee，优缺点也很明显，Github国内访问较Gitee慢很多，但是Github比Gitee的生态环境更完善，是全球最大的代码托管平台，网站也更加稳定</p><p><del>由于国内访问GitHub时常会访问异常或者加载速度太慢，我使用gitee作为Github的替代方案，下面以gitee为例：</del><br><del>1. 新建博客的仓库，名字随便起，选择开源选项</del><br><del>2. 用git将博客仓库克隆到本地，例：<code>git clone https://gitee.com/peakofmountains/blog.git</code>，注：要正常使用git工具，需要提前完成git配置(在gitee中仓库界面点击<code>克隆/下载</code>会给出配置的命令)</del><br><del>3. 在下载下来的博客仓库文件夹中创建文件<code>index.html</code>作为博客主页(仓库中必须包含<code>index.html</code>文件才能启动Gitee Pages服务)，<code>index.html</code>中包含最基本的HTML结构即可</del><br><del>4. index.html用git上传后就可以在项目仓库的Settings选项处开启Gitee Page服务，这样挂载博客的网站就配置好了</del></p><div class="note danger flat"><p><em><strong>注意Gitee目前不能挂载了，Gitee Pages服务已被下线 现在是 2024&#x2F;5&#x2F;7，还没有恢复</strong></em></p></div><p>追求网站访问速度的可以等以后Gitee网站的Gitee Pages服务重新上线后改用Gitee的服务，不过重新上线时间我也说不上来</p><h3 id="Github上创建博客仓库"><a href="#Github上创建博客仓库" class="headerlink" title="Github上创建博客仓库"></a>Github上创建博客仓库</h3><p>在Github上创建一个仓库作为挂载博客和托管博客代码文件的地方，仓库名字应为 <code>用户名+github.io</code> </p><div class="note warning flat"><p>只有按照 <code>用户名+github.io</code> 的格式，Github才会对此仓库启动Github Page服务</p></div><p>启动Github Page服务后即可使用 <code>用户名.github.io</code> 作为自己博客的域名，此域名是免费的</p><h3 id="配置Git连接Github"><a href="#配置Git连接Github" class="headerlink" title="配置Git连接Github"></a>配置Git连接Github</h3><p>这里配置Git连接Github是为了之后在本地使用自动部署工具快速完成本地博客部署打基础，到时候在本地修改完博客后，只需要在VSCode或git bash终端使用简单的<code>hexo d</code>命令即可完成博客的上传和部署工作，下面是配置的具体操作：</p><ol><li><p>打开git bash终端,输入</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;example@example.com&quot;</span><br></pre></td></tr></table></figure><p> 最后一个参数填写自己的邮箱就好，一路敲回车，最终会提示你.ssh文件保存在<code>C:\Users\你的用户名</code>路径，进去后找到.ssh文件夹，右键-&gt;打开方式-&gt;记事本 打开里面的id_rsa.pub，复制里面的全部内容(上面命令生成的rsa密钥)<br> <em><strong>注意：这个.ssh文件夹默认是隐藏的，如果没找到.ssh文件夹就点击上方的查看，选择显示隐藏项目选项</strong></em></p></li><li><p>在Github账户个人设置的Settings里找到SSH keys，新建一个SSH key，在内容处粘贴步骤2中的密钥，创建</p></li><li><p>验证是否成功，在git bash中用</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p> 回车后输入yes回车，出现打招呼提示和账户信息就是成功了。</p> <div class="note warning flat"><p><em>注意:如果之前用过ssh连接其他主机，可能会和我一样出现<code> WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!</code>,提示这时候要用ssh连接github.com就需要重新指向</em></p></div> <div class="note info flat"><p>解决办法：先在.ssh目录中删掉known_hosts中缓存信息，然后在git bash中执行 <code>ssh-keygen -R github.com</code><br>提示更新成功就可以继续用<code>ssh -T git@github.com</code>进行测试了*</p></div></li><li><p><em>初次使用git需要配置下面设置，不是初次使用git连接GitHub的请忽略此条</em>：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email &quot;GitHub绑定的邮箱&quot;</span><br><span class="line">git config --global user.name &quot;GitHub用户名&quot;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 博客搭建系列教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown教程</title>
      <link href="/2024/05/15/Markdown%E6%95%99%E7%A8%8B/"/>
      <url>/2024/05/15/Markdown%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在平时码代码写文档时用的最多的就是markdown语言了，但有时候一些不常用的功能会忘了书写格式，本文旨在做一个Markdown教程兼语法手册，方便我们学习和平时使用查询，在进入教程前，先要感谢多个网站提供的教程或启发</p><blockquote><p><strong>参考文档:</strong></p><ul><li><a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet">Markdown官方手册</a></li><li><a href="https://www.runoob.com/markdown/md-tutorial.html">菜鸟教程</a></li><li><a href="https://www.javatiku.cn/pytorch/16606.html">笨鸟教程</a></li></ul></blockquote><ul><li>Markdown是一种轻量级标记语言，允许使用者以易读易写的纯文本格式编写文档，易读意味着编写好的markdown即使不经过编辑器渲染依然能很清晰的理解文档格式内容，例如 <strong>强调</strong> 和 **强调** 给人的感觉是类似的。</li><li>Markdown编写的文档可导出为多种常用格式的文档，如 HTML、Word、PDF、Epub、思维导图等</li><li>Markdown的轻量但强大的功能使其被广泛应用在各种技术文档中，很多语言或工具都兼容 Markdown语言并提供相应的插件</li><li>Markdown语言被Github、简书等作为撰写文档的首选语言</li><li>Markdown提供书写文档的各种格式，如 标题、链接、代码块、表格、列表、引用图片等<br>…</li></ul><p><em>Markdown作为一种工具类语言，因此强烈建议在实践中学习，对照教程一步步实验每个功能能帮助学习者更快更牢固地掌握其使用方法</em></p><p>话不多说，快来看看Markdown到底能帮我们做到些什么！</p><hr><h2 id="环境配置与工具准备："><a href="#环境配置与工具准备：" class="headerlink" title="环境配置与工具准备："></a>环境配置与工具准备：</h2><blockquote><ul><li>Windows操作系统，Linux未测试但不影响学习</li><li>VSCode编辑器(支持markdown语法的均可，如Typora)</li><li>插件：在VSCode中安装 <code>Markdown Preview Enhanced</code> 插件，右键markdown文档选择 <code>Markdown Preview Enhanced：Open Preview to the Side</code> 即可在侧边实时预览书写效果</li></ul></blockquote><hr><h2 id="多级标题"><a href="#多级标题" class="headerlink" title="多级标题"></a>多级标题</h2><p>写文档第一步就是写标题了，markdown语法中提供了多级标题的功能，使用方式如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># h1 一级标题 </span></span><br><span class="line"><span class="section">## h2 二级标题</span></span><br><span class="line"><span class="section">### h3  </span></span><br><span class="line"><span class="section">#### h4  </span></span><br><span class="line"><span class="section">##### h5  </span></span><br><span class="line"><span class="section">###### h6  </span></span><br></pre></td></tr></table></figure><p><em>标题级数越高字体越小，不同级的标题会自动形成标题目录</em></p><h2 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h2><p>段落方面要说明的是markdown中在段尾用 <code>两个空格+回车</code> 或 <code>一个空行</code> 来实现分段<br>如果想要完全分割两部分，可以用下面的方式建立分割线来明确分割：  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">***</span></span><br><span class="line"><span class="strong">* * * </span></span><br><span class="line"><span class="strong">**</span><span class="strong">***</span></span><br><span class="line"><span class="strong">- - - </span></span><br><span class="line"><span class="strong">------</span></span><br></pre></td></tr></table></figure><p>这几种标记都能产生分割线，效果相同</p><h2 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h2><p>有时候有文字强调的需求，markdown提供了 斜体、粗体、粗斜体、删除线、下划线 等工具，使用方法如下：  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">*斜体文本*</span></span><br><span class="line"><span class="emphasis">_斜体文本_</span></span><br><span class="line"><span class="strong">**粗体文本**</span></span><br><span class="line"><span class="strong">__粗体文本__</span></span><br><span class="line"><span class="strong">**<span class="emphasis">*粗斜体文本*</span>**</span></span><br><span class="line"><span class="strong">__<span class="emphasis">_粗斜体文本_</span>__</span></span><br><span class="line">~~删除线文本~~</span><br></pre></td></tr></table></figure><p>效果展示：</p><blockquote><p><em>斜体文本</em><br><em>斜体文本</em><br><strong>粗体文本</strong><br><strong>粗体文本</strong><br><em><strong>粗斜体文本</strong></em><br><em><strong>粗斜体文本</strong></em><br><del>删除线文本</del></p></blockquote><p>下划线样式是通过使用HTML中的<code>&lt;u&gt;&lt;/u&gt;</code>标签实现的：  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>下划线文本<span class="language-xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>效果： <u>下划线文本</u><br><em>markdown还支持更多的HTML标签的使用，很方便，教程后面会有<a href="#html%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95">相关介绍</a></em></p><h2 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h2><p>文档编写中有时候需要只是显示一个符号，而不是使用符号的功能，那就是转义字符的用武之地了，markdown和大多数编程语言一样，都使用反斜杠 <code>\</code> 来转义特殊字符，使用方式：  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">_正常斜体_</span></span><br><span class="line">\<span class="emphasis">_被转义的显示\_</span></span><br></pre></td></tr></table></figure><p>效果：<em>正常斜体</em> _被转义的显示_</p><h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><p>脚注是对文本的补充说明，当使用脚注标记时，markdown会自动为脚注创建一个超链接，使用者可点击该链接或悬停在上面以查看脚注的内容，语法如下：  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我管理代码所用的网站是Github[^1]。</span><br><span class="line">[<span class="symbol">^1</span>]: <span class="link">https://github.com</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ul><li>脚注的内容可放在文档的任意位置，但是建议放在文档末尾，方便统一管理</li><li>脚注效果和论文中的参考文献相同，但注意有的平台不支持脚注显示</li></ul><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>markdown支持有序列表和无序列表</p><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>无序列表用 <code>*</code>, <code>+</code>, <code>-</code> 作为列表标记，使用时需要在标记后添加一个空格再书写内容，列表标记也可混用，使用方法：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 第一项</span><br><span class="line"><span class="bullet">*</span> 第二项</span><br><span class="line"></span><br><span class="line"><span class="bullet">+</span> 第一项</span><br><span class="line"><span class="bullet">+</span> 第二项</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 第一项</span><br><span class="line"><span class="bullet">-</span> 第二项</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 第一项</span><br><span class="line"><span class="bullet">+</span> 第二项</span><br><span class="line"><span class="bullet">-</span> 第三项</span><br></pre></td></tr></table></figure><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>有序列表使用 <code>数字.</code>作为列表标记，同样也要敲一个空格后书写内容，使用方法：  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 第一项</span><br><span class="line"><span class="bullet">2.</span> 第二项</span><br><span class="line"><span class="bullet">3.</span> 第三项</span><br></pre></td></tr></table></figure><h3 id="嵌套列表"><a href="#嵌套列表" class="headerlink" title="嵌套列表"></a>嵌套列表</h3><p>列表嵌套只须在子列表的选项前添加三个或三个以上空格即可，列表标记也可以使用字体样式，如倾斜加粗等，无序有序列表都能嵌套可混用，具体用法：  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 无序有序混用嵌套:</span><br><span class="line"><span class="bullet">    1.</span> 第一步</span><br><span class="line"><span class="bullet">    2.</span> 第二步</span><br><span class="line"><span class="emphasis">_1._</span> 列表标记可用字体样式：</span><br><span class="line"><span class="bullet">    1.</span> 第一步</span><br><span class="line"><span class="bullet">    2.</span> 第二步</span><br></pre></td></tr></table></figure><h3 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h3><p>markdown中也可实现任务清单列表的撰写，格式同一般列表类似，使用<code>[]</code>标记未完成，<code>[x]</code>标记完成，列表的内容也可用字体样式，如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> [x] ~~学习markdown~~</span><br><span class="line"><span class="bullet">*</span> [ ] 写博客</span><br></pre></td></tr></table></figure><p>具体效果：</p><ul><li><input checked="" disabled="" type="checkbox"> <del>学习markdown</del></li><li><input disabled="" type="checkbox"> 写博客</li></ul><h2 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h2><p>使用多个标记 <code>&gt;</code> 来创建一个区块，常用来在文档中书写引用内容或者表示强调，注意：标记 <code>&gt;</code> 后要紧跟一个空格再书写内容<br>区块也支持嵌套<br>区块和列表也可以嵌套</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 区块第一行</span></span><br><span class="line"><span class="quote">&gt; 区块第二行</span></span><br><span class="line"></span><br><span class="line"><span class="quote">&gt; 区块最外层</span></span><br><span class="line"><span class="quote">&gt; &gt; 第一层嵌套</span></span><br><span class="line"></span><br><span class="line"><span class="quote">&gt; 1. 区块中</span></span><br><span class="line"><span class="quote">&gt; 2. 用列表</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 第一项</span><br><span class="line"><span class="code">    &gt; 列表中</span></span><br><span class="line"><span class="code">    &gt; 用区块</span></span><br><span class="line"><span class="code">2. 第二项</span></span><br></pre></td></tr></table></figure><p>效果展示：</p><blockquote><p>区块第一行<br>区块第二行</p></blockquote><blockquote><p>区块最外层</p><blockquote><p>第一层嵌套</p></blockquote></blockquote><blockquote><ol><li>区块中</li><li>用列表</li></ol></blockquote><ol><li>第一项<blockquote><p>列表中<br>用区块</p></blockquote></li><li>第二项</li></ol><h2 id="代码段与代码块"><a href="#代码段与代码块" class="headerlink" title="代码段与代码块"></a>代码段与代码块</h2><p>对文档中的代码或方法名等要与普通文本区分开就可以使用此功能，有两种方式：</p><ol><li>单行代码片段：<br>用两个 ` 符号将代码包裹，如：`System.out.println();`</li><li>多行代码区块：<br>用三个 ` 来包裹代码段，如：<br>```java<br>int a &#x3D; 1;<br>int b &#x3D; 1;<br>System.out.println(a+b);<br>```</li></ol><p>效果展示：</p><ol><li>单行代码片段： <code>print();</code></li><li>多行代码区块： <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">System.out.println(a+b);</span><br></pre></td></tr></table></figure></li></ol><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><h3 id="内联链接"><a href="#内联链接" class="headerlink" title="内联链接"></a>内联链接</h3><p>创建一个链接，实现点击文字跳转链接，格式： <code>[链接名称](链接地址)</code> ，例如：<br><code>[GitHub](https://github.com)</code> 效果： <a href="https://github.com/">GitHub</a></p><h3 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h3><p>直接用 <code>&lt;</code> 和 <code>&gt;</code> 将地址包裹，地址内容就是链接名字，点击链接跳转链接所示的地址，如 <code>&lt;https://github.com/&gt;</code> 效果： <a href="https://github.com/">https://github.com</a></p><h3 id="脚注链接"><a href="#脚注链接" class="headerlink" title="脚注链接"></a>脚注链接</h3><p>将链接地址与链接文本分离，链接地址统一放在文档末尾，方便维护和管理，格式：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">Github</span>][<span class="symbol">github_link</span>]</span><br><span class="line">[<span class="symbol">github_link</span>]:<span class="link">https://github.com</span></span><br></pre></td></tr></table></figure><h3 id="锚点链接"><a href="#锚点链接" class="headerlink" title="锚点链接"></a>锚点链接</h3><p>在文档内通过锚点链接在不同标题部分跳转，格式: <code>[跳转](#要跳转的标题)</code>，例如： <code>详情请看[后续介绍](#高级技巧)</code>，效果展示：<br>详情请看<a href="#%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7">后续介绍</a></p><h3 id="邮件链接"><a href="#邮件链接" class="headerlink" title="邮件链接"></a>邮件链接</h3><p>文档阅读者点击链接直接发送邮件，格式：<code>[邮件联系](mailto:example@example.com)</code>，效果：<br><a href="mailto:example@example.com">邮件联系</a></p><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>markdown文档中也支持插入图片，支持png、jpg、jpeg、svg、gif等格式图片，插入格式：<code>![图片显示内容](图片地址)</code>，<strong>注意</strong>：</p><ul><li>图片显示内容可为空</li><li><em>图片显示内容部分是图片无法显示的时候替代图片显示的内容</em></li><li><code>[]</code>中间也可以是图片，实现点击图片跳转链接的功能</li><li>图片地址用绝对地址或相对地址均可<br>使用方法：<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">logo图标</span>](<span class="link">https://.../logo.jpg</span>)</span><br><span class="line">![<span class="string">logo图标</span>](<span class="link">/img/logo.jpg</span>)</span><br></pre></td></tr></table></figure>实际效果：直接显示图片，大小位置不可调，鼠标放在图片上显示<code>[]</code>中的图片名称<br>如果想调整图片大小位置显示方式，可以用HTML标签来插入图片，如：<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://.../logo.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>在markdown中可制作简易表格，用<code>|</code>来分隔不同单元格，用<code>-</code>来分割表头和其他行，在分割行可以用<code>:---</code>、<code>---:</code>、<code>:---:</code>来设置列的对齐方式，表格里的字体也可设置字体样式，如：  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 标签   |      可选值    | 内容 |</span><br><span class="line">| :----- | ------------: | :---:|</span><br><span class="line">|<span class="strong">**img<span class="emphasis">_top** | _</span>true/false_    |false|</span></span><br><span class="line"><span class="strong">|**</span>index<span class="emphasis">_bg<span class="strong">**| _true/false/url_|true|</span></span></span><br></pre></td></tr></table></figure><p>效果：</p><table><thead><tr><th align="left">标签</th><th align="right">可选值</th><th align="center">内容</th></tr></thead><tbody><tr><td align="left"><strong>img_top</strong></td><td align="right"><em>true&#x2F;false</em></td><td align="center">false</td></tr><tr><td align="left"><strong>index_bg</strong></td><td align="right"><em>true&#x2F;false&#x2F;url</em></td><td align="center">true</td></tr></tbody></table><hr><h2 id="高级技巧"><a href="#高级技巧" class="headerlink" title="高级技巧"></a>高级技巧</h2><p>上面的部分是常用的markdown语法，还有一些技巧在面对特定的任务时有更灵活多变的效果，下面也做简单介绍</p><h3 id="HTML支持"><a href="#HTML支持" class="headerlink" title="HTML支持"></a>HTML支持</h3><p>要在markdown文档中实现一些超出markdown基本语法的功能就需要借助HTML的标签了<br>HTML在markdown中主要应用在哪些地方：</p><ul><li>插入复杂的元素：如创建样式复杂的表格</li><li>更加灵活的布局：如设置图片的显示大小、位置</li><li>更加美观的样式：如自定义字体的样式、颜色</li><li>提供交互的功能：如插入按钮、提交表单等交互元素<br><strong>注意：</strong></li><li>大多数的Markdown解析器支持原生的HTML，可直接在markdown中书写使用，插入标签，无需额外的语法</li><li>Markdown不一定在HTML中起作用，因此HTML中尽可能用HTML的tags代替markdown，尽量避免在HTML标签中使用markdown的语法样式，如设置字体加粗等</li></ul><h4 id="HTML基本用法"><a href="#HTML基本用法" class="headerlink" title="HTML基本用法"></a>HTML基本用法</h4><ol><li>不在markdown涵盖范围内的标签都可直接在文档内用HTML撰写，常用的有 <code>&lt;kbd&gt;</code>,<code>&lt;b&gt;</code>,<code>&lt;i&gt;</code>,<code>&lt;em&gt;</code>,<code>&lt;sup&gt;</code>,<code>&lt;sub&gt;</code>,<code>&lt;br&gt;</code> 等，使用方法举例：<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用快捷键<span class="language-xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>Ctrl<span class="language-xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span>+<span class="language-xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>C<span class="language-xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span>复制</span><br></pre></td></tr></table></figure>效果： 使用快捷键<kbd>Ctrl</kbd>+<kbd>C</kbd>复制</li><li>markdown中也直接支持原生的HTML，<code>&amp;</code>，<code>&lt;</code>，<code>&gt;</code>符号会自动转成HTML实体，这种支持方便在markdown中使用HTML原始码来操作，例如在markdown中直接写入下面HTML内容：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;周一&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;周二&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;周三&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;晴&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;雨&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;多云&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>效果如下：<table> <tr>     <th>周一</th>     <th>周二</th>     <th>周三</th> </tr> <tr>     <th>晴</th>     <th>雨</th>     <th>多云</th> </tr></table></li></ol><h4 id="更多样的样式"><a href="#更多样的样式" class="headerlink" title="更多样的样式"></a>更多样的样式</h4><p>借助HTML内联CSS定制样式，如 <code>&lt;style&gt;&lt;/style&gt;</code> 标签或 <code>style</code> 属性定制CSS样式，如<code>&lt;p style=&quot;color: orange;&quot;&gt;这段文字将显示为橘色！&lt;/p&gt;</code>，效果：</p><p style="color: orange;">这段文字将显示为橘色！</p><h4 id="更灵活的布局"><a href="#更灵活的布局" class="headerlink" title="更灵活的布局"></a>更灵活的布局</h4><p>HTML标签允许自定义布局，例如对图片的宽度、高度、对齐方式等markdown没办法直接实现，但是可以插入HTML标签来间接实现，例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://example.com/logo.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;50&quot;</span> <span class="attr">height</span>=<span class="string">&quot;60&quot;</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="公式书写"><a href="#公式书写" class="headerlink" title="公式书写"></a>公式书写</h3><p>文档中有时会有插入公式的需求，Markdown支持直接书写并渲染公式<br>Markdown Preview Enhanced 使用<a href="https://github.com/KaTeX/KaTeX">KaTeX</a>或者<a href="https://github.com/mathjax/MathJax">MathJax</a>来渲染数学表达式<br>KaTeX性能更快,MathJax特性更多，markdown公式有两种显示方式：</p><ol><li>行显示： <code>$f(x)$</code> 或 <code>\(f(x)\)</code></li><li>块显示： <code>$$f(x)$$</code> 或 <code>\[f(x)\]</code> 或用代码块的方式<br><em>注意块显示一行只能有一个公式</em>，使用实例：<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 行显示： --&gt;</span><br><span class="line">$f(x)=sin(x)$</span><br><span class="line">\(g(x)=cos(x)\)</span><br><span class="line">&lt;!-- 块显示 --&gt;</span><br><span class="line">$$\sum<span class="emphasis">_&#123;n=1&#125;^&#123;10&#125;f(x)+g(x)$$ </span></span><br><span class="line"><span class="emphasis">\[\sum_</span>&#123;n=1&#125;^&#123;5&#125;f(x)+g(x)\] </span><br></pre></td></tr></table></figure>数学代码块显示格式：<br>```math<br>f(x) &#x3D; sin(x)+cos(x)<br>```<br>本博客中未配置渲染公式，所以暂不展示公式效果，经过笔者在VSCode中测试，显示正常</li></ol><hr><h2 id="笔者的话"><a href="#笔者的话" class="headerlink" title="笔者的话"></a>笔者的话</h2><ul><li>不同的Markdown编辑器和解释环境可能会有不同的渲染效果。因此，在不同平台发布之前，预览你的Markdown文档是很重要的，例如笔者在使用markdown过程中就发现某些网站字体加粗显示只能用 <code>***加粗**</code> ，而 <code>__加粗__</code> 这种方式并不能实现加粗</li><li>使用markdown书写文档时一定要以读者的角度审视文档，要方便读者理解文档内容，如：插入图片格式中<code>[]</code>中的内容可以为空，但是还是建议填上对图片的描述，这样当由于网络原因图片无法显示时，<code>[]</code>中的内容会填充图片部分，读者也就能理解此处图片的含义了</li></ul>]]></content>
      
      
      <categories>
          
          <category> Markdown 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
