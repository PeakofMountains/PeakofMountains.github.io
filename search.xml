<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>手把手搭建个人博客系列教程(一)</title>
      <link href="/2024/05/16/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E4%B8%80/"/>
      <url>/2024/05/16/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong><a href="#%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%B7%A5%E5%85%B7%E5%87%86%E5%A4%87">手把手搭建个人博客系列教程(一)</a>主要完成工具和环境的安装和配置</strong><br>作为计算机专业的学生，一直想要有个专属于自己的个人博客，可以自定义博客样式和内容，但一直由于被各种琐事耽搁，曾经也尝试过CSDN、博客园等专门的博客书写网站，但曾经那个自定义博客的小梦想一直还埋藏在心里，最近趁着空闲，我决定实现我的这个小梦想，并一步步将我在搭建个人博客中所踩过的坑，总结出的经验分享出来，一方面是为了记录我对博客的理解，同时也希望这个浅薄的教程能给与我相似的爱好者一点帮助。<br>感谢在我个人博客搭建中提供参考和帮助的一些教程、网站：</p><blockquote><ul><li><a href="https://hexo.io/zh-cn/docs/">Hexo框架的官方文档</a></li><li><a href="https://butterfly.js.org/">Butterfly主题的官方文档</a></li><li><a href="https://www.fomal.cc/posts/e593433d.html">Fomalhaut大佬的博客搭建教程</a></li></ul></blockquote><ul><li>个人博客的搭建不仅仅能产生独属于自己的博客这样一个成果，在搭建的过程中也能了解一个博客网站的架构，实现的思路，同时在自己动手修改配置的过程中对个人的文档阅读等能力也是一种提升</li><li>本博客的设计思路是：以Hexo为框架，Butterfly为主题，在此基础上进一步美化，最终形成一个功能多样，外观美观的博客网站</li></ul><hr><h2 id="环境配置与工具准备"><a href="#环境配置与工具准备" class="headerlink" title="环境配置与工具准备"></a>环境配置与工具准备</h2><ul><li>操作系统：Windows10 </li><li>VSCode编辑器</li></ul><h2 id="Node-js安装"><a href="#Node-js安装" class="headerlink" title="Node.js安装"></a>Node.js安装</h2><p>Node.js是一种JavaScript的运行环境，给JavaScript运行在服务端提供了平台，是搭建网站的基础环境，下面是安装步骤：</p><ol><li>直接在<a href="https://nodejs.org/en/download/">Node.js官网</a>下载安装文件</li><li>运行安装文件，安装路径可以自定义，默认路径在 <code>C:\Program Files\nodejs\</code> ，使用时产生的缓冲数据就会在C盘，比较占空间，<em><strong>图省事的C盘战士可以直接一路默认选项点下去就好</strong></em></li><li>安装完成后在cmd终端或VSCode终端使用下面命令验证是否安装成功或查看node.js和npm版本，<em>npm是Node.js的包管理工具，在安装Node.js时会自动安装</em>： <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure></li><li>为节省C盘空间，更改npm的全局安装模块的存储路径和缓冲文件的存储路径，步骤如下：<ol><li>在Node.js的安装目录创建两个文件夹<code>node_global</code>和<code>node_cache</code></li><li>在VSCode终端或cmd终端中执行下面的命令来配置npm相关路径配置： <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config set prefix &quot;D:\nodejs\node_global&quot;</span><br><span class="line">npm config set cache &quot;D:\nodejs\node_cache&quot;</span><br></pre></td></tr></table></figure></li><li>修改环境变量<ul><li>在系统变量中添加变量<code>NODE_PATH</code>，变量内容为刚创建的<code>node_global</code>的路径+<code>node_modules</code>，例如<code>D:\nodejs\node_global\node_modules</code></li><li>修改用户变量中的<code>PATH</code>变量，将默认的<code>C:\Users\Administrator\AppData\Roaming\npm</code>修改为设置的全局安装路径<code>D:\nodejs\node_global</code></li></ul></li><li>测试<br> 安装常用的express模块来测试配置是否成功，<code>-g</code>参数是全局安装的意思，如果成功会安装在之前设置的node_global路径内 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express -g</span><br></pre></td></tr></table></figure> 注：2022年之前安装的nodejs直接运行上述命令会报出<code>npm ERR! request to https://registry.npm.taobao.org/express failed, reason: certificate has expired</code>错误，提示更新证书，执行下面命令来更改镜像源，更改后能正常安装了： <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npmmirror.com</span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="Hexo的安装"><a href="#Hexo的安装" class="headerlink" title="Hexo的安装"></a>Hexo的安装</h2><p>在cmd或VSCode终端使用npm来安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>安装完成后可以用<code>hexo-cli -v</code>来验证安装成功或查看版本</p><h2 id="Git的安装"><a href="#Git的安装" class="headerlink" title="Git的安装"></a>Git的安装</h2><p>Git是一个开源的分布式版本控制系统，结合Github等代码托管平台常用作项目的版本控制和管理，对经常写代码的编程者来说Git是个不可或缺的工具<br>Git的安装也比较简单，网上能找到好多详细的安装教程，这里提供一个<a href="https://www.runoob.com/git/git-install-setup.html">Git安装教程</a>仅供参考<br>安装完成后可在cmd中用<code>git --version</code>测试是否安装成功或查看Git版本<br>安装并配置好Git后，最好先简单学一点Git工具的使用方法，这里给一个我曾经用过的<a href="https://www.runoob.com/w3cnote/git-five-minutes-tutorial.html">Git使用教程</a></p><h2 id="创建挂载仓库"><a href="#创建挂载仓库" class="headerlink" title="创建挂载仓库"></a>创建挂载仓库</h2><p>使用挂载仓库有两个目的，一个是网站文件管理和代码托管，另一个是使用Github的Github Page服务<br>有两个推荐的：Github和Gitee，优缺点也很明显，Github国内访问较Gitee慢很多，但是Github比Gitee的生态环境更完善，是全球最大的代码托管平台，网站也更加稳定</p><p><del>由于国内访问GitHub时常会访问异常或者加载速度太慢，我使用gitee作为Github的替代方案，下面以gitee为例：</del><br><del>1. 新建博客的仓库，名字随便起，选择开源选项</del><br><del>2. 用git将博客仓库克隆到本地，例：<code>git clone https://gitee.com/peakofmountains/blog.git</code>，注：要正常使用git工具，需要提前完成git配置(在gitee中仓库界面点击<code>克隆/下载</code>会给出配置的命令)</del><br><del>3. 在下载下来的博客仓库文件夹中创建文件<code>index.html</code>作为博客主页(仓库中必须包含<code>index.html</code>文件才能启动Gitee Pages服务)，<code>index.html</code>中包含最基本的HTML结构即可</del><br><del>4. index.html用git上传后就可以在项目仓库的Settings选项处开启Gitee Page服务，这样挂载博客的网站就配置好了</del></p><p><em><strong>注意Gitee目前不能挂载了，Gitee Pages服务已被下线 现在是 2024&#x2F;5&#x2F;7，还没有恢复</strong></em></p><p>追求网站访问速度的可以等以后Gitee网站的Gitee Pages服务重新上线后改用Gitee的服务，不过重新上线时间我也说不上来</p><h3 id="Github上创建博客仓库"><a href="#Github上创建博客仓库" class="headerlink" title="Github上创建博客仓库"></a>Github上创建博客仓库</h3><p>在Github上创建一个仓库作为挂载博客和托管博客代码文件的地方，仓库名字应为 <code>用户名+github.io</code> ，注意这一项是必须的，只有按照此格式，Github才会对此仓库启动Github Page服务，我们才能使用 <code>用户名.github.io</code> 作为自己博客的域名，此域名是免费的</p><h3 id="配置Git连接Github"><a href="#配置Git连接Github" class="headerlink" title="配置Git连接Github"></a>配置Git连接Github</h3><p>这里配置Git连接Github是为了之后在本地使用自动部署工具快速完成本地博客部署打基础，到时候在本地修改完博客后，只需要在VSCode或git bash终端使用简单的<code>hexo d</code>命令即可完成博客的上传和部署工作，下面是配置的具体操作：</p><ol><li>打开git bash终端,输入 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;example@example.com&quot;</span><br></pre></td></tr></table></figure> 最后一个参数填写自己的邮箱就好，一路敲回车，最终会提示你.ssh文件保存在<code>C:\Users\你的用户名</code>路径，进去后找到.ssh文件夹，右键-&gt;打开方式-&gt;记事本 打开里面的id_rsa.pub，复制里面的全部内容(上面命令生成的rsa密钥)，<em><strong>注意：这个.ssh文件夹默认是隐藏的，如果没找到.ssh文件夹就点击上方的查看，选择显示隐藏项目选项</strong></em></li><li>在Github账户个人设置的Settings里找到SSH keys，新建一个SSH key，在内容处粘贴步骤2中的密钥，创建</li><li>验证是否成功，在git bash中用 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure> 回车后输入yes回车，出现打招呼提示和账户信息就是成功了。<br> *注意:如果之前用过ssh连接其他主机，可能会和我一样出现<code> WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!</code>提示，这时候要用ssh连接github.com就需要重新指向。解决办法：先在.ssh目录中删掉known_hosts中缓存信息，然后在git bash中执行 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -R github.com</span><br></pre></td></tr></table></figure> 提示更新成功就可以继续用<code>ssh -T git@github.com</code>进行测试了*</li><li><em>初次使用git需要配置下面设置，不是初次使用git连接GitHub的请忽略此条</em>： <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email &quot;GitHub绑定的邮箱&quot;</span><br><span class="line">git config --global user.name &quot;GitHub用户名&quot;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown教程</title>
      <link href="/2024/05/15/Markdown%E6%95%99%E7%A8%8B/"/>
      <url>/2024/05/15/Markdown%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在平时码代码写文档时用的最多的就是markdown语言了，但有时候一些不常用的功能会忘了书写格式，本文旨在做一个Markdown教程兼语法手册，方便我们学习和平时使用查询，在进入教程前，先要感谢多个网站提供的教程或启发：</p><blockquote><ul><li><a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet">Markdown官方手册</a></li><li><a href="https://www.runoob.com/markdown/md-tutorial.html">菜鸟教程</a></li><li><a href="https://www.javatiku.cn/pytorch/16606.html">笨鸟教程</a></li></ul></blockquote><ul><li>Markdown是一种轻量级标记语言，允许使用者以易读易写的纯文本格式编写文档，易读意味着编写好的markdown即使不经过编辑器渲染依然能很清晰的理解文档格式内容，例如 <strong>强调</strong> 和 **强调** 给人的感觉是类似的。</li><li>Markdown编写的文档可导出为多种常用格式的文档，如 HTML、Word、PDF、Epub、思维导图等</li><li>Markdown的轻量但强大的功能使其被广泛应用在各种技术文档中，很多语言或工具都兼容 Markdown语言并提供相应的插件</li><li>Markdown语言被Github、简书等作为撰写文档的首选语言</li><li>Markdown提供书写文档的各种格式，如 标题、链接、代码块、表格、列表、引用图片等<br>…</li></ul><p><em>Markdown作为一种工具类语言，因此强烈建议在实践中学习，对照教程一步步实验每个功能能帮助学习者更快更牢固地掌握其使用方法</em></p><p>话不多说，快来看看Markdown到底能帮我们做到些什么！</p><hr><h2 id="环境配置与工具准备："><a href="#环境配置与工具准备：" class="headerlink" title="环境配置与工具准备："></a>环境配置与工具准备：</h2><blockquote><ul><li>Windows操作系统，Linux未测试但不影响学习</li><li>VSCode编辑器(支持markdown语法的均可，如Typora)</li><li>插件：在VSCode中安装 <code>Markdown Preview Enhanced</code> 插件，右键markdown文档选择 <code>Markdown Preview Enhanced：Open Preview to the Side</code> 即可在侧边实时预览书写效果</li></ul></blockquote><hr><h2 id="多级标题"><a href="#多级标题" class="headerlink" title="多级标题"></a>多级标题</h2><p>写文档第一步就是写标题了，markdown语法中提供了多级标题的功能，使用方式如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># h1 一级标题 </span></span><br><span class="line"><span class="section">## h2 二级标题</span></span><br><span class="line"><span class="section">### h3  </span></span><br><span class="line"><span class="section">#### h4  </span></span><br><span class="line"><span class="section">##### h5  </span></span><br><span class="line"><span class="section">###### h6  </span></span><br></pre></td></tr></table></figure><p><em>标题级数越高字体越小，不同级的标题会自动形成标题目录</em></p><h2 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h2><p>段落方面要说明的是markdown中在段尾用 <code>两个空格+回车</code> 或 <code>一个空行</code> 来实现分段<br>如果想要完全分割两部分，可以用下面的方式建立分割线来明确分割：  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">***</span></span><br><span class="line"><span class="strong">* * * </span></span><br><span class="line"><span class="strong">**</span><span class="strong">***</span></span><br><span class="line"><span class="strong">- - - </span></span><br><span class="line"><span class="strong">------</span></span><br></pre></td></tr></table></figure><p>这几种标记都能产生分割线，效果相同</p><h2 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h2><p>有时候有文字强调的需求，markdown提供了 斜体、粗体、粗斜体、删除线、下划线 等工具，使用方法如下：  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">*斜体文本*</span></span><br><span class="line"><span class="emphasis">_斜体文本_</span></span><br><span class="line"><span class="strong">**粗体文本**</span></span><br><span class="line"><span class="strong">__粗体文本__</span></span><br><span class="line"><span class="strong">**<span class="emphasis">*粗斜体文本*</span>**</span></span><br><span class="line"><span class="strong">__<span class="emphasis">_粗斜体文本_</span>__</span></span><br><span class="line">~~删除线文本~~</span><br></pre></td></tr></table></figure><p>效果展示：</p><blockquote><p><em>斜体文本</em><br><em>斜体文本</em><br><strong>粗体文本</strong><br><strong>粗体文本</strong><br><em><strong>粗斜体文本</strong></em><br><em><strong>粗斜体文本</strong></em><br><del>删除线文本</del></p></blockquote><p>下划线样式是通过使用HTML中的<code>&lt;u&gt;&lt;/u&gt;</code>标签实现的：  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>下划线文本<span class="language-xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>效果： <u>下划线文本</u><br><em>markdown还支持更多的HTML标签的使用，很方便，教程后面会有<a href="#html%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95">相关介绍</a></em></p><h2 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h2><p>文档编写中有时候需要只是显示一个符号，而不是使用符号的功能，那就是转义字符的用武之地了，markdown和大多数编程语言一样，都使用反斜杠 <code>\</code> 来转义特殊字符，使用方式：  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">_正常斜体_</span></span><br><span class="line">\<span class="emphasis">_被转义的显示\_</span></span><br></pre></td></tr></table></figure><p>效果：<em>正常斜体</em> _被转义的显示_</p><h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><p>脚注是对文本的补充说明，当使用脚注标记时，markdown会自动为脚注创建一个超链接，使用者可点击该链接或悬停在上面以查看脚注的内容，语法如下：  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我管理代码所用的网站是Github[^1]。</span><br><span class="line">[<span class="symbol">^1</span>]: <span class="link">https://github.com</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ul><li>脚注的内容可放在文档的任意位置，但是建议放在文档末尾，方便统一管理</li><li>脚注效果和论文中的参考文献相同，但注意有的平台不支持脚注显示</li></ul><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>markdown支持有序列表和无序列表</p><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>无序列表用 <code>*</code>, <code>+</code>, <code>-</code> 作为列表标记，使用时需要在标记后添加一个空格再书写内容，列表标记也可混用，使用方法：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 第一项</span><br><span class="line"><span class="bullet">*</span> 第二项</span><br><span class="line"></span><br><span class="line"><span class="bullet">+</span> 第一项</span><br><span class="line"><span class="bullet">+</span> 第二项</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 第一项</span><br><span class="line"><span class="bullet">-</span> 第二项</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 第一项</span><br><span class="line"><span class="bullet">+</span> 第二项</span><br><span class="line"><span class="bullet">-</span> 第三项</span><br></pre></td></tr></table></figure><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>有序列表使用 <code>数字.</code>作为列表标记，同样也要敲一个空格后书写内容，使用方法：  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 第一项</span><br><span class="line"><span class="bullet">2.</span> 第二项</span><br><span class="line"><span class="bullet">3.</span> 第三项</span><br></pre></td></tr></table></figure><h3 id="嵌套列表"><a href="#嵌套列表" class="headerlink" title="嵌套列表"></a>嵌套列表</h3><p>列表嵌套只须在子列表的选项前添加三个或三个以上空格即可，列表标记也可以使用字体样式，如倾斜加粗等，无序有序列表都能嵌套可混用，具体用法：  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 无序有序混用嵌套:</span><br><span class="line"><span class="bullet">    1.</span> 第一步</span><br><span class="line"><span class="bullet">    2.</span> 第二步</span><br><span class="line"><span class="emphasis">_1._</span> 列表标记可用字体样式：</span><br><span class="line"><span class="bullet">    1.</span> 第一步</span><br><span class="line"><span class="bullet">    2.</span> 第二步</span><br></pre></td></tr></table></figure><h3 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h3><p>markdown中也可实现任务清单列表的撰写，格式同一般列表类似，使用<code>[]</code>标记未完成，<code>[x]</code>标记完成，列表的内容也可用字体样式，如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> [x] ~~学习markdown~~</span><br><span class="line"><span class="bullet">*</span> [ ] 写博客</span><br></pre></td></tr></table></figure><p>具体效果：</p><ul><li><input checked="" disabled="" type="checkbox"> <del>学习markdown</del></li><li><input disabled="" type="checkbox"> 写博客</li></ul><h2 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h2><p>使用多个标记 <code>&gt;</code> 来创建一个区块，常用来在文档中书写引用内容或者表示强调，注意：标记 <code>&gt;</code> 后要紧跟一个空格再书写内容<br>区块也支持嵌套<br>区块和列表也可以嵌套</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 区块第一行</span></span><br><span class="line"><span class="quote">&gt; 区块第二行</span></span><br><span class="line"></span><br><span class="line"><span class="quote">&gt; 区块最外层</span></span><br><span class="line"><span class="quote">&gt; &gt; 第一层嵌套</span></span><br><span class="line"></span><br><span class="line"><span class="quote">&gt; 1. 区块中</span></span><br><span class="line"><span class="quote">&gt; 2. 用列表</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 第一项</span><br><span class="line"><span class="code">    &gt; 列表中</span></span><br><span class="line"><span class="code">    &gt; 用区块</span></span><br><span class="line"><span class="code">2. 第二项</span></span><br></pre></td></tr></table></figure><p>效果展示：</p><blockquote><p>区块第一行<br>区块第二行</p></blockquote><blockquote><p>区块最外层</p><blockquote><p>第一层嵌套</p></blockquote></blockquote><blockquote><ol><li>区块中</li><li>用列表</li></ol></blockquote><ol><li>第一项<blockquote><p>列表中<br>用区块</p></blockquote></li><li>第二项</li></ol><h2 id="代码段与代码块"><a href="#代码段与代码块" class="headerlink" title="代码段与代码块"></a>代码段与代码块</h2><p>对文档中的代码或方法名等要与普通文本区分开就可以使用此功能，有两种方式：</p><ol><li>单行代码片段：<br>用两个 ` 符号将代码包裹，如：`System.out.println();`</li><li>多行代码区块：<br>用三个 ` 来包裹代码段，如：<br>```java<br>int a &#x3D; 1;<br>int b &#x3D; 1;<br>System.out.println(a+b);<br>```</li></ol><p>效果展示：</p><ol><li>单行代码片段： <code>print();</code></li><li>多行代码区块： <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">System.out.println(a+b);</span><br></pre></td></tr></table></figure></li></ol><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><h3 id="内联链接"><a href="#内联链接" class="headerlink" title="内联链接"></a>内联链接</h3><p>创建一个链接，实现点击文字跳转链接，格式： <code>[链接名称](链接地址)</code> ，例如：<br><code>[GitHub](https://github.com)</code> 效果： <a href="https://github.com/">GitHub</a></p><h3 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h3><p>直接用 <code>&lt;</code> 和 <code>&gt;</code> 将地址包裹，地址内容就是链接名字，点击链接跳转链接所示的地址，如 <code>&lt;https://github.com/&gt;</code> 效果： <a href="https://github.com/">https://github.com</a></p><h3 id="脚注链接"><a href="#脚注链接" class="headerlink" title="脚注链接"></a>脚注链接</h3><p>将链接地址与链接文本分离，链接地址统一放在文档末尾，方便维护和管理，格式：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">Github</span>][<span class="symbol">github_link</span>]</span><br><span class="line">[<span class="symbol">github_link</span>]:<span class="link">https://github.com</span></span><br></pre></td></tr></table></figure><h3 id="锚点链接"><a href="#锚点链接" class="headerlink" title="锚点链接"></a>锚点链接</h3><p>在文档内通过锚点链接在不同标题部分跳转，格式: <code>[跳转](#要跳转的标题)</code>，例如： <code>详情请看[后续介绍](#高级技巧)</code>，效果展示：<br>详情请看<a href="#%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7">后续介绍</a></p><h3 id="邮件链接"><a href="#邮件链接" class="headerlink" title="邮件链接"></a>邮件链接</h3><p>文档阅读者点击链接直接发送邮件，格式：<code>[邮件联系](mailto:example@example.com)</code>，效果：<br><a href="mailto:example@example.com">邮件联系</a></p><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>markdown文档中也支持插入图片，支持png、jpg、jpeg、svg、gif等格式图片，插入格式：<code>![图片显示内容](图片地址)</code>，<strong>注意</strong>：</p><ul><li>图片显示内容可为空</li><li><em>图片显示内容部分是图片无法显示的时候替代图片显示的内容</em></li><li><code>[]</code>中间也可以是图片，实现点击图片跳转链接的功能</li><li>图片地址用绝对地址或相对地址均可<br>使用方法：<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">logo图标</span>](<span class="link">https://.../logo.jpg</span>)</span><br><span class="line">![<span class="string">logo图标</span>](<span class="link">/img/logo.jpg</span>)</span><br></pre></td></tr></table></figure>实际效果：直接显示图片，大小位置不可调，鼠标放在图片上显示<code>[]</code>中的图片名称<br>如果想调整图片大小位置显示方式，可以用HTML标签来插入图片，如：<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://.../logo.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>在markdown中可制作简易表格，用<code>|</code>来分隔不同单元格，用<code>-</code>来分割表头和其他行，在分割行可以用<code>:---</code>、<code>---:</code>、<code>:---:</code>来设置列的对齐方式，表格里的字体也可设置字体样式，如：  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 标签   |      可选值    | 内容 |</span><br><span class="line">| :----- | ------------: | :---:|</span><br><span class="line">|<span class="strong">**img<span class="emphasis">_top** | _</span>true/false_    |false|</span></span><br><span class="line"><span class="strong">|**</span>index<span class="emphasis">_bg<span class="strong">**| _true/false/url_|true|</span></span></span><br></pre></td></tr></table></figure><p>效果：</p><table><thead><tr><th align="left">标签</th><th align="right">可选值</th><th align="center">内容</th></tr></thead><tbody><tr><td align="left"><strong>img_top</strong></td><td align="right"><em>true&#x2F;false</em></td><td align="center">false</td></tr><tr><td align="left"><strong>index_bg</strong></td><td align="right"><em>true&#x2F;false&#x2F;url</em></td><td align="center">true</td></tr></tbody></table><hr><h2 id="高级技巧"><a href="#高级技巧" class="headerlink" title="高级技巧"></a>高级技巧</h2><p>上面的部分是常用的markdown语法，还有一些技巧在面对特定的任务时有更灵活多变的效果，下面也做简单介绍</p><h3 id="HTML支持"><a href="#HTML支持" class="headerlink" title="HTML支持"></a>HTML支持</h3><p>要在markdown文档中实现一些超出markdown基本语法的功能就需要借助HTML的标签了<br>HTML在markdown中主要应用在哪些地方：</p><ul><li>插入复杂的元素：如创建样式复杂的表格</li><li>更加灵活的布局：如设置图片的显示大小、位置</li><li>更加美观的样式：如自定义字体的样式、颜色</li><li>提供交互的功能：如插入按钮、提交表单等交互元素<br><strong>注意：</strong></li><li>大多数的Markdown解析器支持原生的HTML，可直接在markdown中书写使用，插入标签，无需额外的语法</li><li>Markdown不一定在HTML中起作用，因此HTML中尽可能用HTML的tags代替markdown，尽量避免在HTML标签中使用markdown的语法样式，如设置字体加粗等</li></ul><h4 id="HTML基本用法"><a href="#HTML基本用法" class="headerlink" title="HTML基本用法"></a>HTML基本用法</h4><ol><li>不在markdown涵盖范围内的标签都可直接在文档内用HTML撰写，常用的有 <code>&lt;kbd&gt;</code>,<code>&lt;b&gt;</code>,<code>&lt;i&gt;</code>,<code>&lt;em&gt;</code>,<code>&lt;sup&gt;</code>,<code>&lt;sub&gt;</code>,<code>&lt;br&gt;</code> 等，使用方法举例：<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用快捷键<span class="language-xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>Ctrl<span class="language-xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span>+<span class="language-xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>C<span class="language-xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span>复制</span><br></pre></td></tr></table></figure>效果： 使用快捷键<kbd>Ctrl</kbd>+<kbd>C</kbd>复制</li><li>markdown中也直接支持原生的HTML，<code>&amp;</code>，<code>&lt;</code>，<code>&gt;</code>符号会自动转成HTML实体，这种支持方便在markdown中使用HTML原始码来操作，例如在markdown中直接写入下面HTML内容：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;周一&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;周二&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;周三&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;晴&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;雨&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;多云&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>效果如下：<table> <tr>     <th>周一</th>     <th>周二</th>     <th>周三</th> </tr> <tr>     <th>晴</th>     <th>雨</th>     <th>多云</th> </tr></table></li></ol><h4 id="更多样的样式"><a href="#更多样的样式" class="headerlink" title="更多样的样式"></a>更多样的样式</h4><p>借助HTML内联CSS定制样式，如 <code>&lt;style&gt;&lt;/style&gt;</code> 标签或 <code>style</code> 属性定制CSS样式，如<code>&lt;p style=&quot;color: orange;&quot;&gt;这段文字将显示为橘色！&lt;/p&gt;</code>，效果：</p><p style="color: orange;">这段文字将显示为橘色！</p><h4 id="更灵活的布局"><a href="#更灵活的布局" class="headerlink" title="更灵活的布局"></a>更灵活的布局</h4><p>HTML标签允许自定义布局，例如对图片的宽度、高度、对齐方式等markdown没办法直接实现，但是可以插入HTML标签来间接实现，例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://example.com/logo.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;50&quot;</span> <span class="attr">height</span>=<span class="string">&quot;60&quot;</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="公式书写"><a href="#公式书写" class="headerlink" title="公式书写"></a>公式书写</h3><p>文档中有时会有插入公式的需求，Markdown支持直接书写并渲染公式<br>Markdown Preview Enhanced 使用<a href="https://github.com/KaTeX/KaTeX">KaTeX</a>或者<a href="https://github.com/mathjax/MathJax">MathJax</a>来渲染数学表达式<br>KaTeX性能更快,MathJax特性更多，markdown公式有两种显示方式：</p><ol><li>行显示： <code>$f(x)$</code> 或 <code>\(f(x)\)</code></li><li>块显示： <code>$$f(x)$$</code> 或 <code>\[f(x)\]</code> 或用代码块的方式<br><em>注意块显示一行只能有一个公式</em>，使用实例：<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 行显示： --&gt;</span><br><span class="line">$f(x)=sin(x)$</span><br><span class="line">\(g(x)=cos(x)\)</span><br><span class="line">&lt;!-- 块显示 --&gt;</span><br><span class="line">$$\sum<span class="emphasis">_&#123;n=1&#125;^&#123;10&#125;f(x)+g(x)$$ </span></span><br><span class="line"><span class="emphasis">\[\sum_</span>&#123;n=1&#125;^&#123;5&#125;f(x)+g(x)\] </span><br></pre></td></tr></table></figure>数学代码块显示格式：<br>```math<br>f(x) &#x3D; sin(x)+cos(x)<br>```<br>本博客中未配置渲染公式，所以暂不展示公式效果，经过笔者在VSCode中测试，显示正常</li></ol><hr><h2 id="笔者的话"><a href="#笔者的话" class="headerlink" title="笔者的话"></a>笔者的话</h2><ul><li>不同的Markdown编辑器和解释环境可能会有不同的渲染效果。因此，在不同平台发布之前，预览你的Markdown文档是很重要的，例如笔者在使用markdown过程中就发现某些网站字体加粗显示只能用 <code>***加粗**</code> ，而 <code>__加粗__</code> 这种方式并不能实现加粗</li><li>使用markdown书写文档时一定要以读者的角度审视文档，要方便读者理解文档内容，如：插入图片格式中<code>[]</code>中的内容可以为空，但是还是建议填上对图片的描述，这样当由于网络原因图片无法显示时，<code>[]</code>中的内容会填充图片部分，读者也就能理解此处图片的含义了</li></ul>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
